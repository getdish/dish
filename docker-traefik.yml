version: '3.7'

services:
  traefik:
    image: traefik:v2.2
    ports:
      - 80:80
      - 443:443
    deploy:
      update_config:
        order: start-first
        
      placement:
        constraints:
          # Make the traefik service run only on the node with this label
          - node.labels.traefik-public.traefik-public-certificates == true
      labels:
        - traefik.enable=true
        - traefik.sendanonymoususage = false
        # Use the traefik-public network (declared below)
        - traefik.docker.network=traefik-public
        # Use the custom label "traefik.constraint-label=traefik-public"
        # This public Traefik will only use services with this label
        # That way you can add other internal Traefik instances per stack if needed
        - traefik.constraint-label=traefik-public
        - serverstransport.insecureskipverify=true
        # admin-auth middleware with HTTP Basic auth
        # Using the environment variables USERNAME and HASHED_PASSWORD
        - traefik.http.middlewares.admin-auth.basicauth.users=${TRAEFIK_USERNAME?err0}:${TRAEFIK_PASSWORD?err0}
        # https-redirect middleware to redirect HTTP to HTTPS
        # It can be re-used by other stacks in other Docker Compose files
        - traefik.http.middlewares.dish-https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.dish-https-redirect.redirectscheme.permanent=true
        # traefik-http set up only to use the middleware to redirect to https
        # Uses the environment variable DOMAIN
        - traefik.http.routers.dish-http.rule=Host(`traefik.${DOMAIN}`)
        - traefik.http.routers.dish-http.entrypoints=http
        - traefik.http.routers.dish-http.middlewares=dish-https-redirect
        # traefik-https the actual router using HTTPS
        # Uses the environment variable DOMAIN
        - traefik.http.routers.dish-https.rule=Host(`traefik.${DOMAIN}`)
        - traefik.http.routers.dish-https.entrypoints=https
        - traefik.http.routers.dish-https.tls=true
        # Use the special Traefik service api@internal with the web UI/Dashboard
        - traefik.http.routers.dish-https.service=api@internal
        # Use the "le" (Let's Encrypt) resolver created below
        - traefik.http.routers.dish-https.tls.certresolver=alt4
        # Enable HTTP Basic auth, using the middleware created above
        - traefik.http.routers.dish-https.middlewares=admin-auth
        # Define the port inside of the Docker service to use
        - traefik.http.services.dish.loadbalancer.server.port=80
    volumes:
      # Add Docker as a mounted volume, so that Traefik can read the labels of other services
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Mount the volume to store the certificates
      - /var/data/traefik:/certificates
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label "traefik.constraint-label=traefik-public"
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-public`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Enable Docker Swarm mode
      - --providers.docker.swarmmode
      # Create an entrypoint "http" listening on port 80
      - --entrypoints.http.address=:80
      # Create an entrypoint "https" listening on port 443
      - --entrypoints.https.address=:443
      # disable in prod
      # - --certificatesresolvers.le.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
      # - --certificatesresolvers.le.acme.storage=/certificates/acme-staging.json
      - --certificatesresolvers.le.acme.caserver=https://acme-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.le.acme.email=${TRAEFIK_EMAIL?err0}
      - --certificatesresolvers.le.acme.storage=/certificates/acme-production.json
      - --certificatesresolvers.le.acme.tlschallenge=true
      - --certificatesresolvers.alt.acme.caserver=https://acme-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.alt.acme.email=${TRAEFIK_EMAIL?err0}
      - --certificatesresolvers.alt.acme.storage=/certificates/acme-production.json
      - --certificatesresolvers.alt.acme.tlschallenge=true
      - --certificatesresolvers.alt3.acme.caserver=https://acme-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.alt3.acme.email=${TRAEFIK_EMAIL?err0}
      - --certificatesresolvers.alt3.acme.storage=/certificates/acme-production.json
      - --certificatesresolvers.alt3.acme.tlschallenge=true
      - --certificatesresolvers.alt4.acme.caserver=https://acme-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.alt4.acme.email=${TRAEFIK_EMAIL?err0}
      - --certificatesresolvers.alt4.acme.storage=/certificates/acme-production.json
      - --certificatesresolvers.alt4.acme.tlschallenge=true
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - traefik-public

networks:
  traefik-public:
    external: true
