diff --git a/node_modules/gqless/dist/Type.d.ts b/node_modules/gqless/dist/Type.d.ts
index 27c8f79..d7d2975 100644
--- a/node_modules/gqless/dist/Type.d.ts
+++ b/node_modules/gqless/dist/Type.d.ts
@@ -50,5 +50,9 @@ declare type ArrayData<TArray extends ValidType[], TExtensions extends Tuple> =
 } : never);
 declare type ScalarData<TScalar extends ScalarType | EnumType, TExtensions extends Tuple> = LastTupleValue<TExtensions> extends never ? TScalar['data'] : LastTupleValue<TExtensions>;
 declare type UnshiftExtension<TExtensions, TType extends ValidType> = keyof TypeExtension<TType> extends never ? TExtensions : UnshiftTuple<TExtensions, TypeExtension<TType>>;
-export declare type TypeData<TType extends ValidType, TExtensions extends Tuple = {}> = TType extends Array<any> ? ArrayData<TType, UnshiftExtension<TExtensions, TType>> : TType extends ScalarType | EnumType ? ScalarData<TType, UnshiftExtension<TExtensions, TType>> : TType extends FieldsType ? FieldsData<TType, UnshiftExtension<TExtensions, TType>> : null;
+export declare type TypeData<TType extends ValidType, TExtensions extends Tuple = {}> =
+    TType extends Array<any> ? ArrayData<TType, UnshiftExtension<TExtensions, TType>> :
+        TType extends ScalarType | EnumType ? ScalarData<TType, UnshiftExtension<TExtensions, TType>> :
+            TType extends FieldsType ? FieldsData<TType, UnshiftExtension<TExtensions, TType>> :
+                TType extends FieldsTypeArg<any, infer X> ? X extends Type<any, infer Z> ? Z : X : null;
 export {};
diff --git a/node_modules/gqless/dist/gqless.cjs.development.js b/node_modules/gqless/dist/gqless.cjs.development.js
index 12268bf..d0b9986 100644
--- a/node_modules/gqless/dist/gqless.cjs.development.js
+++ b/node_modules/gqless/dist/gqless.cjs.development.js
@@ -135,6 +135,8 @@ const deepReference = rootValue => {
       onUnreference.filter(v => v === value).then(dispose);
     }; // Handle references created, before watchAndEmit called
 
+    if (!parentValue.references) return () => {}
+
 
     for (const ref of parentValue.references.keys()) {
       handleReference(ref);
@@ -416,6 +418,7 @@ const buildArguments = ({
 
       if (context) {
         const field = context.node.inputs[key];
+        if (!field) return
         keyContext = {
           node: field.ofNode,
           nullable: field.nullable
@@ -451,7 +454,8 @@ const buildArguments = ({
     if ((context === null || context === void 0 ? void 0 : context.node) instanceof ScalarNode) {
       // Object / Array passed as scalar
       // serialize as a JSON-string
-      return JSON.stringify(JSON.stringify(arg));
+      const json = JSON.stringify(arg)
+      return json ? json.replace(/"([^"]+)":/g, '$1:') : ''
     }
 
     if (Array.isArray(arg)) {
@@ -486,6 +490,7 @@ const buildSelections = ({
   const includeTypename = // When no selections or not on ObjectNode
   (!tree.children.length || !(innerNode instanceof ObjectNode)) && // fragments should never need __typename
   !(tree.selection instanceof Fragment);
+  if (innerNode) innerNode.constructor.name; // fixed weird firefox bug
   const selections = [includeTypename && '__typename', ...tree.children.map(tree => buildSelectionTree(formatter, tree, variables))].filter(Boolean);
   if (!selections.length) return '';
   return selections.join(LINE_SEPARATOR);
@@ -563,17 +568,13 @@ const memoized =
 utils.createMemo();
 const getAlias = tree => {
   if (!tree.parent) return;
-  const fieldAliases = memoized(() => {
-    const aliases = new Map();
-    let id = 0;
-    tree.parent.children.forEach(siblingTree => {
-      if (!(siblingTree.selection instanceof FieldSelection)) return;
-      if (tree.selection === siblingTree.selection || tree.selection.field !== siblingTree.selection.field) return;
-      aliases.set(tree.selection, `${tree.selection.field.name}__${++id}`);
-    });
-    return aliases;
-  }, [tree.parent, tree.selection.field]);
-  return fieldAliases.get(tree.selection);
+  for (const siblingTree of tree.parent.children) {
+    if (siblingTree.selection instanceof FieldSelection) {
+      if (tree.selection !== siblingTree.selection || tree.selection.field === siblingTree.selection.field) {
+        return `${tree.selection.field.name}__${++id}`
+      }
+    }
+  }
 };
 
 /**
@@ -1541,6 +1542,7 @@ class Commit extends Disposable {
         return Promise.resolve(Promise.all(promises)).then(function () {});
       }, function (e) {
         console.error(e);
+        global['latestUnhandledGQLessRejection'] = e;
       });
 
       return Promise.resolve(_temp && _temp.then ? _temp.then(_temp2) : _temp2(_temp));
@@ -1885,7 +1887,9 @@ class Accessor extends Disposable {
 
   setData(data) {
     // @TODO
-    console.log('set', this.path.toString(), data);
+    if (typeof window !== 'undefined' && window['gqlessSetListener']) {
+      window['gqlessSetListener'](this, data)
+    }
     this.cache.merge(this, data);
   }
 
@@ -2127,10 +2131,10 @@ const interceptor =
 new Interceptor();
 interceptor.onAccessor(accessor => {
   lastAccessor = accessor;
-  clearTimeout(timer);
-  timer = setTimeout(() => {
-    lastAccessor = null;
-  });
+  // clearTimeout(timer);
+  // timer = setTimeout(() => {
+  //   lastAccessor = null;
+  // });
 });
 interceptor.start();
 const getAccessor = input => {
