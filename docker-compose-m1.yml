version: '2.4'
services:
  postgres:
    build:
      context: ./services/postgres
    restart: always
    volumes:
      - ${HOME}/.dish/postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 'postgres'
      POSTGRES_DB: dish
      BITNAMI_DEBUG: 'true'
    ports:
      - 5432:5432
  redis:
    image: redis
    ports:
      - 6379:6379
  hasura:
    image: fedormelexin/graphql-engine-arm64
    restart: always
    ports:
      - 8080:8080
    environment:
      - HASURA_GRAPHQL_DATABASE_URL=postgres://postgres:postgres@postgres/dish
      - HASURA_GRAPHQL_ENABLED_LOG_TYPES=startup, http-log, webhook-log, websocket-log, query-log
      - HASURA_GRAPHQL_ENABLE_TELEMETRY=false
      - HASURA_GRAPHQL_ADMIN_SECRET=${TF_VAR_HASURA_GRAPHQL_ADMIN_SECRET:-password}
      - HASURA_GRAPHQL_UNAUTHORIZED_ROLE=anon
      - HASURA_GRAPHQL_JWT_SECRET={"type":"HS256", "key":"12345678901234567890123456789012"}
      - HASURA_GRAPHQL_ENABLE_CONSOLE=true
      - DISH_HOOKS_ENDPOINT=http://dish-hooks:6154
      - GORSE_SYNC_HOOK=http://dish-hooks:6154/gorse_sync
    depends_on:
      - 'postgres'
      - 'redis'
  timescaledb:
    image: timescale/timescaledb-postgis:1.7.2-pg11
    restart: always
    volumes:
      - ${HOME}/.dish/timescaledb:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 'postgres'
      POSTGRES_DB: scrape_data
    ports:
      - 5433:5432
  tileserver:
    image: urbica/martin
    ports:
      - 3005:3000
    environment:
      - WATCH_MODE=true
      - DATABASE_URL=postgres://postgres:postgres@postgres/dish
    depends_on:
      - 'postgres'
  search:
    image: gcr.io/dish-258800/dish/search${DISH_IMAGE_TAG}
    build:
      context: ./
      dockerfile: ./services/search/Dockerfile
    ports:
      - 10000:10000
    environment:
      - POSTGRES_HOST=postgres
    depends_on:
      - 'postgres'
  worker:
    image: gcr.io/dish-258800/worker${DISH_IMAGE_TAG}
    environment:
      - DISH_ENV=staging
      - HASURA_ENDPOINT=http://hasura:8080
      - REDIS_HOST=redis
      - PGHOST=postgres
      - PGPASSWORD=postgres
      - HASURA_SECRET=${TF_VAR_HASURA_GRAPHQL_ADMIN_SECRET:-password}
      - TIMESCALE_HOST=timescaledb
      - TIMESCALE_PASSWORD=postgres
      - TIMESCALE_PORT=5432
      - UBEREATS_PROXY=${TF_VAR_UBEREATS_PROXY}
      - HEREMAPS_API_TOKEN${TF_VAR_HEREMAPS_API_TOKEN}
      - INFATUATED_PROXY=${TF_VAR_INFATUATED_PROXY}
      - MICHELIN_PROXY=${TF_VAR_MICHELIN_PROXY}
      - YELP_AWS_PROXY=${TF_VAR_YELP_AWS_PROXY}
      - TRIPADVISOR_PROXY=${TF_VAR_TRIPADVISOR_PROXY}
      - GOOGLE_SEARCH_PROXY=${TF_VAR_GOOGLE_SEARCH_PROXY}
      - GOOGLE_AWS_PROXY=${TF_VAR_GOOGLE_AWS_PROXY}
      - GOOGLE_USERCONTENT_AWS_PROXY=${TF_VAR_GOOGLE_USERCONTENT_AWS_PROXY}
      - DOORDASH_GRAPHQL_AWS_PROXY=${TF_VAR_DOORDASH_GRAPHQL_AWS_PROXY}
      - GRUBHUB_AWS_PROXY=${TF_VAR_GRUBHUB_AWS_PROXY}
      - YELP_CDN_AWS_PROXY=${TF_VAR_YELP_CDN_AWS_PROXY}
      - LUMINATI_PROXY_HOST=${TF_VAR_LUMINATI_PROXY_HOST}
      - LUMINATI_PROXY_PORT=${TF_VAR_LUMINATI_PROXY_PORT}
      - LUMINATI_PROXY_DATACENTRE_USER=${TF_VAR_LUMINATI_PROXY_DATACENTRE_USER}
      - LUMINATI_PROXY_DATACENTRE_PASSWORD=${TF_VAR_LUMINATI_PROXY_DATACENTRE_PASSWORD}
      - LUMINATI_PROXY_RESIDENTIAL_USER=${TF_VAR_LUMINATI_PROXY_RESIDENTIAL_USER}
      - LUMINATI_PROXY_RESIDENTIAL_PASSWORD=${TF_VAR_LUMINATI_PROXY_RESIDENTIAL_PASSWORD}
      - DO_SPACES_ID=${TF_VAR_DO_SPACES_ID}
      - DO_SPACES_SECRET=${TF_VAR_DO_SPACES_SECRET}
      - GPT3_KEY=${TF_VAR_GPT3_KEY}
      - NODE_OPTIONS="--max_old_space_size=5120"
      - GORSE_ENDPOINT="http://gorse:9000"
      - DISH_DEBUG=1
