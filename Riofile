{{- if (eq .Values.DISH_ENV "production") }}
services:
  hasura:
    app: hasura
    image: hasura/graphql-engine:v1.0.0
    ports:
      - 8080/http
    env:
      - HASURA_GRAPHQL_DATABASE_URL=postgres://postgres:${TF_VAR_POSTGRES_PASSWORD}@postgres-postgresql.postgres/dish
      - HASURA_GRAPHQL_ENABLE_CONSOLE=true
      - HASURA_GRAPHQL_ENABLED_LOG_TYPES=startup, http-log, webhook-log, websocket-log, query-log
      - HASURA_GRAPHQL_ENABLE_TELEMETRY=false
  worker-ui:
    image: tombh/bull-board:latest
    env:
      - REDIS_HOST=redis-master.redis
    port: 3000/http
  worker:
    image: dish/crawlers
    build:
      dockerfile: ./services/worker/Dockerfile
      context: ./
    env:
      - REDIS_HOST=redis-master.redis
      - HASURA_ENDPOINT=https://hasura.rio.dishapp.com
      - UBEREATS_PROXY=${UBEREATS_PROXY}
    command:
      - node
    args:
      - _/index.js
  crawlers:
    image: dish/crawlers
    build:
      dockerfile: ./services/crawlers/Dockerfile
      context: ./
    env:
      - REDIS_HOST=redis-master.redis
      - UBEREATS_PROXY=${UBEREATS_PROXY}
    command:
      - node
    args:
      - _/ubereats/sanfran.js
  lab:
    image: dish/lab
    build:
      dockerfile: ./apps/lab/Dockerfile
      context: ./
    ports:
      - 5000/http
    env:
      - HASURA_ENDPOINT=https://hasura.rio.dishapp.com
{{- end}}

template:
  goTemplate: true # use go templating
  envSubst: true # use ENV vars during templating
  questions:
  - variable: DISH_ENV
    description: "Environment to deploy to"
