{{- if (eq .Values.DISH_ENV "production") }}
services:
  hasura:
    app: hasura
    image: hasura/graphql-engine:v1.2.2
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: doks.digitalocean.com/node-pool
            operator: In
            values:
            - dish-pool
    resources:
      requests:
        cpu: 500m
        memory: 500Mi
    ports:
      - 8080/http
    env:
      - HASURA_GRAPHQL_DATABASE_URL=postgres://postgres:${TF_VAR_POSTGRES_PASSWORD}@postgres-postgresql.postgres/dish
      - HASURA_GRAPHQL_ENABLE_CONSOLE=true
      - HASURA_GRAPHQL_ENABLED_LOG_TYPES=startup, http-log, webhook-log, websocket-log, query-log
      - HASURA_GRAPHQL_ENABLE_TELEMETRY=false
      - HASURA_GRAPHQL_UNAUTHORIZED_ROLE=anon
      - HASURA_GRAPHQL_ADMIN_SECRET=${HASURA_GRAPHQL_ADMIN_SECRET}
    command: ['graphql-engine', 'serve', '--jwt-secret', '{"type":"HS256", "key":"${JWT_KEY}"}']
  search:
    image: docker.k8s.dishapp.com/dish/search
    imagePullSecrets:
      - docker-config-json
    imagePullPolicy: always
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: doks.digitalocean.com/node-pool
            operator: In
            values:
            - dish-pool
    ports:
      - 10000/http
    env:
      - POSTGRES_HOST=postgres-postgresql.postgres
      - POSTGRES_PASSWORD=${TF_VAR_POSTGRES_PASSWORD}
  worker-ui:
    image: tombh/bull-board:latest
    env:
      - REDIS_HOST=redis-master.redis
    port: 3000/http
  worker:
    image: docker.k8s.dishapp.com/dish/worker
    imagePullSecrets:
      - docker-config-json
    imagePullPolicy: always
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: doks.digitalocean.com/node-pool
            operator: In
            values:
            - dish-worker-pool
    resources:
      limits:
        cpu: 2000m
        memory: 2Gi
    env:
      - DISH_ENV=production
      - COMMIT_HASH=${REVISION}
      - REDIS_HOST=redis-master.redis
      - PGHOST=postgres-postgresql.postgres
      - PGPASSWORD=${TF_VAR_POSTGRES_PASSWORD}
      - HASURA_ENDPOINT=https://hasura.rio.dishapp.com
      - HASURA_SECRET=${HASURA_GRAPHQL_ADMIN_SECRET}
      - UBEREATS_PROXY=${UBEREATS_PROXY}
      - HEREMAPS_API_TOKEN=${HEREMAPS_API_TOKEN}
      - INFATUATED_PROXY=${INFATUATED_PROXY}
      - YELP_AWS_PROXY=${YELP_AWS_PROXY}
      - TRIPADVISOR_PROXY=${TRIPADVISOR_PROXY}
      - GOOGLE_AWS_PROXY=${GOOGLE_AWS_PROXY}
      - GOOGLE_USERCONTENT_AWS_PROXY=${GOOGLE_USERCONTENT_AWS_PROXY}
      - DOORDASH_GRAPHQL_AWS_PROXY=${DOORDASH_GRAPHQL_AWS_PROXY}
      - GRUBHUB_AWS_PROXY=${GRUBHUB_AWS_PROXY}
      - YELP_CDN_AWS_PROXY=${YELP_CDN_AWS_PROXY}
      - LUMINATI_PROXY_HOST=${LUMINATI_PROXY_HOST}
      - LUMINATI_PROXY_PORT=${LUMINATI_PROXY_PORT}
      - LUMINATI_PROXY_DATACENTRE_USER=${LUMINATI_PROXY_DATACENTRE_USER}
      - LUMINATI_PROXY_DATACENTRE_PASSWORD=${LUMINATI_PROXY_DATACENTRE_PASSWORD}
      - LUMINATI_PROXY_RESIDENTIAL_USER=${LUMINATI_PROXY_RESIDENTIAL_USER}
      - LUMINATI_PROXY_RESIDENTIAL_PASSWORD=${LUMINATI_PROXY_RESIDENTIAL_PASSWORD}
  crawlers:
    image: docker.k8s.dishapp.com/dish/crawlers
    imagePullSecrets:
      - docker-config-json
    imagePullPolicy: always
    env:
      - DISH_ENV=production
      - HASURA_ENDPOINT=https://hasura.rio.dishapp.com
      - HASURA_SECRET=${HASURA_GRAPHQL_ADMIN_SECRET}
      - PGHOST=postgres-postgresql.postgres
      - PGPASSWORD=${TF_VAR_POSTGRES_PASSWORD}
      - COMMIT_HASH=${REVISION}
      - REDIS_HOST=redis-master.redis
      - UBEREATS_PROXY=${UBEREATS_PROXY}
      - YELP_PROXY=${YELP_PROXY}
      - INFATUATED_PROXY=${INFATUATED_PROXY}
      - MICHELIN_PROXY=${MICHELIN_PROXY}
      - TRIPADVISOR_PROXY=${TRIPADVISOR_PROXY}
      - DOORDASH_GRAPHQL_AWS_PROXY=${DOORDASH_GRAPHQL_AWS_PROXY}
  web:
    image: docker.k8s.dishapp.com/dish/web
    imagePullSecrets:
      - docker-config-json
    imagePullPolicy: always
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: doks.digitalocean.com/node-pool
            operator: In
            values:
            - dish-pool
    ports:
      - 19006/http
    env:
      - DISH_ENV=production
      - COMMIT_HASH=${REVISION}
      - HASURA_ENDPOINT=https://hasura.rio.dishapp.com
  jwt-server:
    image: docker.k8s.dishapp.com/dish/jwt-server
    imagePullSecrets:
      - docker-config-json
    imagePullPolicy: always
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: doks.digitalocean.com/node-pool
            operator: In
            values:
            - dish-pool
    ports:
      - 3000/http
    env:
      - DISH_ENV=production
      - ADMIN_PASSWORD=${JWT_ADMIN_PASSWORD}
      - JWT_SECRET=${JWT_KEY}
      - COMMIT_HASH=${REVISION}
      - POSTGRES_HOST=postgres-postgresql.postgres
      - POSTGRES_PASSWORD=${TF_VAR_POSTGRES_PASSWORD}
  backups:
    image: docker.k8s.dishapp.com/dish/backups
    imagePullSecrets:
      - docker-config-json
    imagePullPolicy: always
    env:
      - DO_SPACES_API_ID=${TF_VAR_DO_SPACES_ID}
      - DO_SPACES_API_SECRET=${TF_VAR_DO_SPACES_SECRET}
      - DB_PASSWORD=${TF_VAR_POSTGRES_PASSWORD}
  image-proxy:
    app: image-proxy
    image: willnorris/imageproxy@sha256:9cc15ad4b0f61e371a982c5fa0520cd6f6cebba317bb1a9188ac9169a826fc35
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: doks.digitalocean.com/node-pool
            operator: In
            values:
            - dish-pool
    ports:
      - 8080/http
    volumes:
      name: image-proxy-pvc
      path: /image-cache
    args:
      - -cache
      - /image-cache
  image-quality-api:
    app: image-quality-api
    image: docker.k8s.dishapp.com/dish/image-quality-server
    imagePullSecrets:
      - docker-config-json
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: doks.digitalocean.com/node-pool
            operator: In
            values:
            - dish-worker-pool
    cpu: 2000m
    memory: 2Gi
    ports:
      - 5005/http
{{- end}}

template:
  goTemplate: true # use go templating
  envSubst: true # use ENV vars during templating
  questions:
  - variable: DISH_ENV
    description: "Environment to deploy to"
  - variable: REVISION
    description: "Current Git commit hash (automatically added by Rio)"
