{{- if (eq .Values.DISH_ENV "production") }}
services:
  hasura:
    app: hasura
    image: hasura/graphql-engine:v1.1.0
    ports:
      - 8080/http
    env:
      - HASURA_GRAPHQL_DATABASE_URL=postgres://postgres:${TF_VAR_POSTGRES_PASSWORD}@postgres-postgresql.postgres/dish
      - HASURA_GRAPHQL_ENABLE_CONSOLE=true
      - HASURA_GRAPHQL_ENABLED_LOG_TYPES=startup, http-log, webhook-log, websocket-log, query-log
      - HASURA_GRAPHQL_ENABLE_TELEMETRY=false
      - HASURA_GRAPHQL_UNAUTHORIZED_ROLE=anon
      - HASURA_GRAPHQL_ADMIN_SECRET=${HASURA_GRAPHQL_ADMIN_SECRET}
    command: ['graphql-engine', 'serve', '--jwt-secret', '{"type":"HS256", "key":"${JWT_KEY}"}']
  search:
    image: dish/search-server
    build:
      dockerfile: ./services/search/Dockerfile
      context: ./
    ports:
      - 10000/http
    env:
      - POSTGRES_HOST=postgres-postgresql.postgres
      - POSTGRES_PASSWORD=${TF_VAR_POSTGRES_PASSWORD}
  worker-ui:
    image: tombh/bull-board:latest
    env:
      - REDIS_HOST=redis-master.redis
    port: 3000/http
  worker:
    image: dish/crawlers
    build:
      dockerfile: ./services/worker/Dockerfile
      context: ./
    env:
      - DISH_ENV=production
      - COMMIT_HASH=${REVISION}
      - REDIS_HOST=redis-master.redis
      - PGHOST=postgres-postgresql.postgres
      - PGPASSWORD=${TF_VAR_POSTGRES_PASSWORD}
      - HASURA_ENDPOINT=https://hasura.rio.dishapp.com
      - HASURA_SECRET=${HASURA_GRAPHQL_ADMIN_SECRET}
      - UBEREATS_PROXY=${UBEREATS_PROXY}
      - HEREMAPS_API_TOKEN=${HEREMAPS_API_TOKEN}
      - INFATUATED_PROXY=${INFATUATED_PROXY}
      - YELP_PROXY=${YELP_PROXY}
      - TRIPADVISOR_PROXY=${TRIPADVISOR_PROXY}
    command:
      - node
    args:
      - _/index.js
  crawlers:
    image: dish/crawlers
    build:
      dockerfile: ./services/crawlers/Dockerfile
      context: ./
    env:
      - DISH_ENV=production
      - HASURA_ENDPOINT=https://hasura.rio.dishapp.com
      - HASURA_SECRET=${HASURA_GRAPHQL_ADMIN_SECRET}
      - PGHOST=postgres-postgresql.postgres
      - PGPASSWORD=${TF_VAR_POSTGRES_PASSWORD}
      - COMMIT_HASH=${REVISION}
      - REDIS_HOST=redis-master.redis
      - UBEREATS_PROXY=${UBEREATS_PROXY}
      - YELP_PROXY=${YELP_PROXY}
      - INFATUATED_PROXY=${INFATUATED_PROXY}
      - MICHELIN_PROXY=${MICHELIN_PROXY}
      - TRIPADVISOR_PROXY=${TRIPADVISOR_PROXY}
    command:
      - node
    args:
      - _/all.js
  web:
    image: dish/web
    build:
      dockerfile: ./apps/web/Dockerfile
      context: ./
    ports:
      - 5000/http
    env:
      - DISH_ENV=production
      - COMMIT_HASH=${REVISION}
      - HASURA_ENDPOINT=https://hasura.rio.dishapp.com
  jwt-server:
    image: dish/jwt-server
    build:
      dockerfile: ./services/jwt-server/Dockerfile
      context: ./
    ports:
      - 3000/http
    env:
      - DISH_ENV=production
      - ADMIN_PASSWORD=${JWT_ADMIN_PASSWORD}
      - JWT_SECRET=${JWT_KEY}
      - COMMIT_HASH=${REVISION}
      - POSTGRES_HOST=postgres-postgresql.postgres
      - POSTGRES_PASSWORD=${TF_VAR_POSTGRES_PASSWORD}
  postgres-backups:
    image: dish/backups
    build:
      dockerfile: ./services/backups/Dockerfile
      context: ./
    env:
      - DO_SPACES_API_ID=${TF_VAR_DO_SPACES_ID}
      - DO_SPACES_API_SECRET=${DO_SPACES_API_SECRET}
      - DB_PASSWORD=${TF_VAR_POSTGRES_PASSWORD}
{{- end}}

template:
  goTemplate: true # use go templating
  envSubst: true # use ENV vars during templating
  questions:
  - variable: DISH_ENV
    description: "Environment to deploy to"
  - variable: REVISION
    description: "Current Git commit hash (automatically added by Rio)"
