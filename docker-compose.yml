version: '3.2'
services:
  base:
    image: registry.fly.io/dish-base${DISH_IMAGE_TAG}
    build:
      context: .
      dockerfile: ./Dockerfile
  run-tests:
    build:
      context: .
      dockerfile: ./services/run-tests/Dockerfile
    environment:
      - REDIS_PASSWORD=redis
  cron:
    image: registry.fly.io/dish-cron${DISH_IMAGE_TAG}
    build:
      context: .
      dockerfile: ./services/cron/Dockerfile
  postgres:
    image: registry.fly.io/dish-${POSTGRES_NAME:-postgres}${DISH_IMAGE_TAG}
    command: postgres -c 'max_connections=300'
    build:
      context: ./services/${POSTGRES_NAME:-postgres}
    volumes:
      - ${HOME}/.dish/postgresdb/${POSTGRES_DB:-dish}:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 'postgres'
      POSTGRES_DB: ${POSTGRES_DB:-dish}
    ports:
      - 5432:5432
  timescale:
    command: ["-c", "max_connections=300"]
    image: registry.fly.io/dish-timescale${DISH_IMAGE_TAG}
    build:
      context: ./services/timescale
    volumes:
      - ${HOME}/.dish/timescaledb:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: scrape_data
    ports:
      - 5433:5432
  redis:
    image: redis
    build:
      context: ./services/redis
      dockerfile: ./Dockerfile
    ports:
      - 6379:6379
    environment:
      - REDIS_PASSWORD=redis
  hooks:
    image: registry.fly.io/dish-hooks${DISH_IMAGE_TAG}
    build:
      context: ./
      dockerfile: ./services/hooks/Dockerfile
    ports:
      - 6154:6154
    environment:
      - DO_SPACES_ID=${TF_VAR_DO_SPACES_ID}
      - DO_SPACES_SECRET=${TF_VAR_DO_SPACES_SECRET}
      - GORSE_ENDPOINT=http://gorse:9000
      - DISH_ENV=production
    depends_on:
      - 'gorse'
  hasura:
    image: registry.fly.io/dish-hasura${DISH_IMAGE_TAG}
    build:
      context: .
      dockerfile: ./services/hasura/Dockerfile
    ports:
      - 8080:8080
    environment:
      - HASURA_GRAPHQL_NO_OF_RETRIES=20
      - HASURA_GRAPHQL_DATABASE_URL=${HASURA_GRAPHQL_DATABASE_URL:-postgres://postgres:postgres@postgres/dish}
      - HASURA_GRAPHQL_ENABLED_LOG_TYPES=startup, http-log, webhook-log, websocket-log, query-log
      - HASURA_GRAPHQL_ENABLE_TELEMETRY=false
      - HASURA_GRAPHQL_ADMIN_SECRET=${TF_VAR_HASURA_GRAPHQL_ADMIN_SECRET:-password}
      - HASURA_GRAPHQL_UNAUTHORIZED_ROLE=anon
      - HASURA_GRAPHQL_JWT_SECRET={"type":"HS256", "key":"12345678901234567890123456789012"}
      - HASURA_GRAPHQL_ENABLE_CONSOLE=true
      - DISH_HOOKS_ENDPOINT=http://hooks:6154
      - GORSE_SYNC_HOOK=http://hooks:6154/gorse_sync
      - VIRTUAL_HOST=hasura-staging.dishapp.com
    depends_on:
      - 'postgres'
      - 'redis'
      - 'hooks'
  dish-app:
    image: registry.fly.io/dish-app${DISH_IMAGE_TAG}
    build:
      context: ./
      dockerfile: ./dish-app/Dockerfile
    environment:
      - SENDGRID_API_KEY=${TF_VAR_SENDGRID_API_KEY}
      - DO_SPACES_ID=${TF_VAR_DO_SPACES_ID}
      - DO_SPACES_SECRET=${TF_VAR_DO_SPACES_SECRET}
      - VIRTUAL_HOST=staging.dishapp.com
      - VIRTUAL_PORT=4444
      - HASURA_SECRET=${TF_VAR_HASURA_GRAPHQL_ADMIN_SECRET:-password}
      - HASURA_ENDPOINT=http://hasura:8080
      - SEARCH_ENDPOINT=http://search:10000
      - REDIS_HOST=redis
    ports:
      - 4444:4444
    depends_on:
      - 'hasura'
      - 'search'
      - 'worker'
  tileserver:
    image: registry.fly.io/dish-tileserver${DISH_IMAGE_TAG}
    build:
      context: ./services/tileserver
      dockerfile: ./Dockerfile
    ports:
      - 3005:3000
    environment:
      - WATCH_MODE=true
      - DATABASE_URL=postgres://postgres:postgres@postgres/${POSTGRES_DB:-dish}
      - VIRTUAL_HOST=martin-tiles-staging.dishapp.com
    depends_on:
      - 'postgres'
  search:
    image: registry.fly.io/dish/dish-search${DISH_IMAGE_TAG}
    build:
      context: ./services/search
      dockerfile: ./Dockerfile
    ports:
      - 10000:10000
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-dish}
      - VIRTUAL_HOST=search-staging.dishapp.com
      - POSTGRES_HOST=postgres
    depends_on:
      - 'postgres'
  gorse:
    image: registry.fly.io/dish-gorse${DISH_IMAGE_TAG}
    build:
      context: ./services/gorse
      dockerfile: ./Dockerfile
    volumes:
      - ${HOME}/.dish/gorse:/data
      - ./services/gorse/config.local.toml:/app/config.toml
    ports:
      - 9000:9000
  worker:
    image: registry.fly.io/dish-worker${DISH_IMAGE_TAG}
    build:
      context: .
      dockerfile: ./services/worker/Dockerfile
    environment:
      - DISH_ENV=staging
      - HASURA_ENDPOINT=http://hasura:8080
      - REDIS_HOST=redis
      - REDIS_PASSWORD=redis
      - PGHOST=postgres
      - PGPASSWORD=postgres
      - HASURA_SECRET=${TF_VAR_HASURA_GRAPHQL_ADMIN_SECRET:-password}
      - TIMESCALE_HOST=timescale
      - TIMESCALE_PASSWORD=postgres
      - TIMESCALE_PORT=5433
      - UBEREATS_PROXY=${TF_VAR_UBEREATS_PROXY}
      - HEREMAPS_API_TOKEN${TF_VAR_HEREMAPS_API_TOKEN}
      - INFATUATED_PROXY=${TF_VAR_INFATUATED_PROXY}
      - MICHELIN_PROXY=${TF_VAR_MICHELIN_PROXY}
      - YELP_AWS_PROXY=${TF_VAR_YELP_AWS_PROXY}
      - TRIPADVISOR_PROXY=${TF_VAR_TRIPADVISOR_PROXY}
      - GOOGLE_SEARCH_PROXY=${TF_VAR_GOOGLE_SEARCH_PROXY}
      - GOOGLE_AWS_PROXY=${TF_VAR_GOOGLE_AWS_PROXY}
      - GOOGLE_USERCONTENT_AWS_PROXY=${TF_VAR_GOOGLE_USERCONTENT_AWS_PROXY}
      - DOORDASH_GRAPHQL_AWS_PROXY=${TF_VAR_DOORDASH_GRAPHQL_AWS_PROXY}
      - GRUBHUB_AWS_PROXY=${TF_VAR_GRUBHUB_AWS_PROXY}
      - YELP_CDN_AWS_PROXY=${TF_VAR_YELP_CDN_AWS_PROXY}
      - LUMINATI_PROXY_HOST=${TF_VAR_LUMINATI_PROXY_HOST}
      - LUMINATI_PROXY_PORT=${TF_VAR_LUMINATI_PROXY_PORT}
      - LUMINATI_PROXY_DATACENTRE_USER=${TF_VAR_LUMINATI_PROXY_DATACENTRE_USER}
      - LUMINATI_PROXY_DATACENTRE_PASSWORD=${TF_VAR_LUMINATI_PROXY_DATACENTRE_PASSWORD}
      - LUMINATI_PROXY_RESIDENTIAL_USER=${TF_VAR_LUMINATI_PROXY_RESIDENTIAL_USER}
      - LUMINATI_PROXY_RESIDENTIAL_PASSWORD=${TF_VAR_LUMINATI_PROXY_RESIDENTIAL_PASSWORD}
      - DO_SPACES_ID=${TF_VAR_DO_SPACES_ID}
      - DO_SPACES_SECRET=${TF_VAR_DO_SPACES_SECRET}
      - GPT3_KEY=${TF_VAR_GPT3_KEY}
      - NODE_OPTIONS="--max_old_space_size=5120"
      - GORSE_ENDPOINT="http://gorse:9000"
      - DISH_DEBUG=1
  bert:
    image: registry.fly.io/dish-bert${DISH_IMAGE_TAG}
    build:
      context: ./services/bert
    ports:
      - 8888:8080
  image-quality:
    image: registry.fly.io/dish-image-quality${DISH_IMAGE_TAG}
    build:
      context: ./services/image-quality
    ports:
      - 8883:5005
    environment:
      - VIRTUAL_HOST=image-quality.dishapp.com
  image-proxy:
    image: registry.fly.io/dish-image-proxy${DISH_IMAGE_TAG}
    build:
      context: ./services/image-proxy
      dockerfile: ./Dockerfile
    ports:
      - 8881:9000
    environment:
      - VIRTUAL_HOST=images.dishapp.com
