version: '3.8'
services:
  base:
    image: 'gcr.io/dish-258800/base${DISH_BASE_VERSION}'
    build:
      context: .
      dockerfile: ./Dockerfile
  postgres:
    image: bitnami/postgresql:12.1.0-debian-9-r53 # See k8s/yaml/postgres.yaml
    volumes:
      - ${HOME}/.dish/postgres:/bitnami/postgresql
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 'postgres'
      POSTGRES_DB: dish
      BITNAMI_DEBUG: 'true'
    ports:
      - 5432:5432
  timescaledb:
    image: timescale/timescaledb-postgis:1.7.2-pg11
    volumes:
      - ${HOME}/.dish/timescaledb:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 'postgres'
      POSTGRES_DB: scrape_data
    ports:
      - 5433:5432
  redis:
    image: redis
    ports:
      - 6379:6379
  dish-hooks:
    image: gcr.io/dish-258800/dish-hooks${DISH_IMAGE_TAG}
    build:
      context: ./
      dockerfile: ./services/dish-hooks/Dockerfile
    ports:
      - 6154:6154
    environment:
      - DO_SPACES_ID=${TF_VAR_DO_SPACES_ID}
      - DO_SPACES_SECRET=${TF_VAR_DO_SPACES_SECRET}
      - GORSE_ENDPOINT=http://gorse:9000
      - DISH_ENV=production
    depends_on:
      - 'gorse'
  hasura:
    image: hasura/graphql-engine:v1.3.3
    ports:
      - 8080:8080
    environment:
      - HASURA_GRAPHQL_DATABASE_URL=postgres://postgres:postgres@postgres/dish
      - HASURA_GRAPHQL_ENABLED_LOG_TYPES=startup, http-log, webhook-log, websocket-log, query-log
      - HASURA_GRAPHQL_ENABLE_TELEMETRY=false
      - HASURA_GRAPHQL_ADMIN_SECRET=${TF_VAR_HASURA_GRAPHQL_ADMIN_SECRET:-password}
      - HASURA_GRAPHQL_UNAUTHORIZED_ROLE=anon
      - HASURA_GRAPHQL_JWT_SECRET={"type":"HS256", "key":"12345678901234567890123456789012"}
      - HASURA_GRAPHQL_ENABLE_CONSOLE=true
      - DISH_HOOKS_ENDPOINT=http://dish-hooks:6154
      - GORSE_SYNC_HOOK=http://dish-hooks:6154/gorse_sync
      - VIRTUAL_HOST=hasura-staging.dishapp.com
    depends_on:
      - 'postgres'
      - 'redis'
      - 'dish-hooks'
  dish-app-web:
    image: gcr.io/dish-258800/dish-app${DISH_IMAGE_TAG}
    build:
      context: ./
      dockerfile: ./dish-app/Dockerfile
    environment:
      - SENDGRID_API_KEY=${TF_VAR_SENDGRID_API_KEY}
      - DO_SPACES_ID=${TF_VAR_DO_SPACES_ID}
      - DO_SPACES_SECRET=${TF_VAR_DO_SPACES_SECRET}
      - VIRTUAL_HOST=staging.dishapp.com
      - VIRTUAL_PORT=4444
      - HASURA_ENDPOINT=http://hasura:8080
      - SEARCH_ENDPOINT=http://search:10000
    ports:
      - 4444:4444
    depends_on:
      - 'hasura'
      - 'search'
  tileserver:
    image: urbica/martin
    ports:
      - 3005:3000
    environment:
      - WATCH_MODE=true
      - DATABASE_URL=postgres://postgres:postgres@postgres/dish
      - VIRTUAL_HOST=martin-tiles-staging.dishapp.com
    depends_on:
      - 'postgres'
  search:
    image: gcr.io/dish-258800/dish/search${DISH_IMAGE_TAG}
    build:
      context: ./
      dockerfile: ./services/search/Dockerfile
    ports:
      - 10000:10000
    environment:
      - VIRTUAL_HOST=search-staging.dishapp.com
      - POSTGRES_HOST=postgres
    depends_on:
      - 'postgres'
  gorse:
    image: gcr.io/dish-258800/gorse
    volumes:
      - ${HOME}/.dish/gorse:/data
      - ./services/gorse/config.local.toml:/app/config.toml
    ports:
      - 9000:9000
  bert:
    image: gcr.io/dish-258800/bert
    ports:
      - 8888:8080
    environment:
      - VIRTUAL_HOST=bert-staging.dishapp.com
  image-quality-api:
    image: gcr.io/dish-258800/image-quality-server
    ports:
      - 8883:5005
    environment:
      - VIRTUAL_HOST=image-quality-staging.dishapp.com
  image-proxy:
    image: gcr.io/dish-258800/imageproxy
    ports:
      - 8881:8080
    command: '-addr 0.0.0.0:8080 -cache /image-cache'
    environment:
      - VIRTUAL_HOST=images-staging.dishapp.com
  nginx-web:
    image: nginx:stable-alpine
    labels:
      com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: 'true'
    container_name: ${NGINX_WEB:-nginx-web}
    restart: always
    ports:
      - '${IP:-0.0.0.0}:${DOCKER_HTTP:-80}:80'
      - '${IP:-0.0.0.0}:${DOCKER_HTTPS:-443}:443'
    volumes:
      - ${NGINX_FILES_PATH:-./data}/conf.d:/etc/nginx/conf.d
      - ${NGINX_FILES_PATH:-./data}/vhost.d:/etc/nginx/vhost.d
      - ${NGINX_FILES_PATH:-./data}/html:/usr/share/nginx/html
      - ${NGINX_FILES_PATH:-./data}/certs:/etc/nginx/certs:ro
      - ${NGINX_FILES_PATH:-./data}/htpasswd:/etc/nginx/htpasswd:ro
    logging:
      driver: ${NGINX_WEB_LOG_DRIVER:-json-file}
      options:
        max-size: ${NGINX_WEB_LOG_MAX_SIZE:-4m}
        max-file: ${NGINX_WEB_LOG_MAX_FILE:-10}
    depends_on:
      - 'hasura'
  nginx-gen:
    image: jwilder/docker-gen
    command: -notify-sighup ${NGINX_WEB:-nginx-web} -watch -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf
    container_name: ${DOCKER_GEN:-nginx-gen}
    restart: always
    environment:
      SSL_POLICY: ${SSL_POLICY:-Mozilla-Intermediate}
    volumes:
      - ${NGINX_FILES_PATH:-./data}/conf.d:/etc/nginx/conf.d
      - ${NGINX_FILES_PATH:-./data}/vhost.d:/etc/nginx/vhost.d
      - ${NGINX_FILES_PATH:-./data}/html:/usr/share/nginx/html
      - ${NGINX_FILES_PATH:-./data}/certs:/etc/nginx/certs:ro
      - ${NGINX_FILES_PATH:-./data}/htpasswd:/etc/nginx/htpasswd:ro
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro
    logging:
      driver: ${NGINX_GEN_LOG_DRIVER:-json-file}
      options:
        max-size: ${NGINX_GEN_LOG_MAX_SIZE:-2m}
        max-file: ${NGINX_GEN_LOG_MAX_FILE:-10}
    depends_on:
      - 'hasura'
