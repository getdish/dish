# could try this?
# https://json.schemastore.org/traefik-v2.json

version: '3.7'

services:
  app:
    image: registry.dishapp.com/app${DISH_IMAGE_TAG}
    networks:
      - default
      - traefik-public
    deploy:
      replicas: ${DOCKER_REPLICAS:-1}
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.dish-app-http.rule=Host(`${DOMAIN}`) || Host(`www.${DOMAIN}`)
        - traefik.http.routers.dish-app-http.entrypoints=http
        - traefik.http.routers.dish-app-http.middlewares=dish-https-redirect
        - traefik.http.routers.dish-app-https.rule=Host(`${DOMAIN}`) || Host(`www.${DOMAIN}`)
        - traefik.http.routers.dish-app-https.entrypoints=https
        - traefik.http.routers.dish-app-https.tls=true
        - traefik.http.routers.dish-app-https.tls.certresolver=le
        - traefik.http.services.dish-app.loadbalancer.server.port=4444
    build:
      context: ./
      dockerfile: ./app/Dockerfile
    environment:
      - MARTIN_ENDPOINT=https://martin-tiles.dishapp.com
      - HASURA_GRAPHQL_ADMIN_SECRET=${HASURA_GRAPHQL_ADMIN_SECRET:-password}
      - JWT_ADMIN_PASSWORD=${JWT_ADMIN_PASSWORD}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - DO_SPACES_ID=${DO_SPACES_ID}
      - DO_SPACES_SECRET=${DO_SPACES_SECRET}
      - HASURA_ENDPOINT=http://hasura:${HASURA_PORT_INTERNAL:-8080}
      - SEARCH_ENDPOINT=http://search:9999
      - REDIS_HOST=redis
      - DISH_ENV=${DISH_ENV:-production}
      - NODE_ENV=${NODE_ENV:-production}
    ports:
      - 4444:4444
    depends_on:
      - 'hasura'
      - 'redis'
      - 'tileserver'

  search:
    image: registry.dishapp.com/dish-search${DISH_IMAGE_TAG}
    build:
      context: ./services/search
      dockerfile: ./Dockerfile
    ports:
      - 9999:9999
    networks:
      - default
      - traefik-public
    deploy:
      replicas: ${DOCKER_REPLICAS:-1}
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.dish-search-http.rule=Host(`search.${DOMAIN}`)
        - traefik.http.routers.dish-search-http.entrypoints=http
        - traefik.http.routers.dish-search-http.middlewares=dish-https-redirect
        - traefik.http.routers.dish-search-https.rule=Host(`search.${DOMAIN}`)
        - traefik.http.routers.dish-search-https.entrypoints=https
        - traefik.http.routers.dish-search-https.tls=true
        - traefik.http.routers.dish-search-https.tls.certresolver=le
        - traefik.http.services.dish-search.loadbalancer.server.port=9999
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-dish}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_HOST=postgres
    depends_on:
      - 'postgres'

  tileserver:
    image: registry.dishapp.com/dish-tileserver${DISH_IMAGE_TAG}
    networks:
      - default
      - traefik-public
    deploy:
      replicas: ${DOCKER_REPLICAS:-1}
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.dish-tileserver-http.rule=Host(`tileserver.${DOMAIN}`)
        - traefik.http.routers.dish-tileserver-http.entrypoints=http
        - traefik.http.routers.dish-tileserver-http.middlewares=dish-https-redirect
        - traefik.http.routers.dish-tileserver-https.rule=Host(`tileserver.${DOMAIN}`)
        - traefik.http.routers.dish-tileserver-https.entrypoints=https
        - traefik.http.routers.dish-tileserver-https.tls=true
        - traefik.http.routers.dish-tileserver-https.tls.certresolver=le
        - traefik.http.services.dish-tileserver.loadbalancer.server.port=3000
    build:
      context: ./services/tileserver
      dockerfile: ./Dockerfile
    ports:
      - 3005:3000
    environment:
      - WATCH_MODE=true
      - DATABASE_URL=${POSTGRES_URL_INTERNAL:-postgres://postgres:postgres@postgres/dish}
    depends_on:
      - 'postgres'
    
  site:
    image: registry.dishapp.com/dish-site${DISH_IMAGE_TAG}
    build:
      context: .
      dockerfile: ./services/site/Dockerfile
    ports:
      - 3999:3999
    networks:
      - default
      - traefik-public
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.dish-site-http.rule=Host(`site.${DOMAIN}`)
        - traefik.http.routers.dish-site-http.entrypoints=http
        - traefik.http.routers.dish-site-http.middlewares=dish-https-redirect
        - traefik.http.routers.dish-site-https.rule=Host(`site.${DOMAIN}`)
        - traefik.http.routers.dish-site-https.entrypoints=https
        - traefik.http.routers.dish-site-https.tls=true
        - traefik.http.routers.dish-site-https.tls.certresolver=le
        - traefik.http.services.dish-site.loadbalancer.server.port=3999

  image-proxy:
    image: registry.dishapp.com/dish-image-proxy${DISH_IMAGE_TAG}
    build:
      context: ./services/image-proxy
    ports:
      - 8981:8981
    networks:
      - default
      - traefik-public
    deploy:
      replicas: ${DOCKER_REPLICAS:-1}
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.dish-image-proxy-http.rule=Host(`image-proxy.${DOMAIN}`)
        - traefik.http.routers.dish-image-proxy-http.entrypoints=http
        - traefik.http.routers.dish-image-proxy-http.middlewares=dish-https-redirect
        - traefik.http.routers.dish-image-proxy-https.rule=Host(`image-proxy.${DOMAIN}`)
        - traefik.http.routers.dish-image-proxy-https.entrypoints=https
        - traefik.http.routers.dish-image-proxy-https.tls=true
        - traefik.http.routers.dish-image-proxy-https.tls.certresolver=le
        - traefik.http.services.dish-image-proxy.loadbalancer.server.port=8981

  umami:
    image: ghcr.io/mikecao/umami:postgresql-latest
    networks:
      - default
      - traefik-public
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.dish-umami-http.rule=Host(`umami.${DOMAIN}`)
        - traefik.http.routers.dish-umami-http.entrypoints=http
        - traefik.http.routers.dish-umami-http.middlewares=dish-https-redirect
        - traefik.http.routers.dish-umami-https.rule=Host(`umami.${DOMAIN}`)
        - traefik.http.routers.dish-umami-https.entrypoints=https
        - traefik.http.routers.dish-umami-https.tls=true
        - traefik.http.routers.dish-umami-https.tls.certresolver=le
        - traefik.http.services.dish-umami.loadbalancer.server.port=3000
    ports:
      - "5555:3000"
    environment:
      DATABASE_URL: ${POSTGRES_URL_INTERNAL:-postgres://postgres:postgres@postgres/dish}
      DATABASE_TYPE: postgresql
      HASH_SALT: ${UMAMI_HASH_SALT}
    depends_on:
      - postgres

  registry:
    image: joxit/docker-registry-ui:latest
    restart: unless-stopped
    environment:
      - REGISTRY_URL=https://registry.dishapp.com
      - REGISTRY_TITLE=DishRegistry3
      - NGINX_PROXY_PASS_URL=http://dish_registry-proxy:5000
      - DELETE_IMAGES=true
      - SINGLE_REGISTRY=false
    networks:
      - default
      - traefik-public
    depends_on:
      - registry-proxy
    deploy:
      replicas: ${DOCKER_REPLICAS:-1}
      placement:
        constraints: [node.role == manager]
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.dish-registry-http.rule=Host(`registry.${DOMAIN}`)
        - traefik.http.routers.dish-registry-http.entrypoints=http
        - traefik.http.routers.dish-registry-http.middlewares=dish-https-redirect
        - traefik.http.routers.dish-registry-https.rule=Host(`registry.${DOMAIN}`)
        - traefik.http.routers.dish-registry-https.entrypoints=https
        - traefik.http.routers.dish-registry-https.tls=true
        - traefik.http.routers.dish-registry-https.tls.certresolver=le
        - traefik.http.routers.dish-registry-https.middlewares=admin-auth
        - traefik.http.services.dish-registry.loadbalancer.server.port=80

  # to allow push/pull of our own images
  registry-proxy:
    image: registry:2
    restart: always
    environment:
      - REGISTRY_HTTP_SECRET=${REGISTRY_HTTP_SECRET?:password}
      - REGISTRY_STORAGE_DELETE_ENABLED=true
    volumes:
      - /var/data/registry/registry-mirror-data:/var/lib/registry
      - ./etc/registry-mirror-config.yml:/etc/docker/registry/config.yml
    deploy:
      replicas: ${DOCKER_REPLICAS:-1}
      placement:
        constraints: [node.role == manager]

  pg-admin:
    image: registry.dishapp.com/pg-admin${DISH_IMAGE_TAG}
    build:
      context: ./services/timescale
    networks:
      - default
      - traefik-public
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.dish-pg-admin-http.rule=Host(`pg-admin.${DOMAIN}`)
        - traefik.http.routers.dish-pg-admin-http.entrypoints=http
        - traefik.http.routers.dish-pg-admin-http.middlewares=dish-https-redirect
        - traefik.http.routers.dish-pg-admin-https.rule=Host(`pg-admin.${DOMAIN}`)
        - traefik.http.routers.dish-pg-admin-https.entrypoints=https
        - traefik.http.routers.dish-pg-admin-https.tls=true
        - traefik.http.routers.dish-pg-admin-https.tls.certresolver=le
        - traefik.http.routers.dish-pg-admin-https.middlewares=admin-auth
        - traefik.http.services.dish-pg-admin.loadbalancer.server.port=80

  bert:
    image: registry.dishapp.com/dish-bert${DISH_IMAGE_TAG}
    networks:
      - default
      - traefik-public
    build:
      context: ./services/bert
    ports:
      - 8888:8080
    deploy:
      replicas: ${DOCKER_REPLICAS:-1}
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.dish-bert-http.rule=Host(`bert.${DOMAIN}`)
        - traefik.http.routers.dish-bert-http.entrypoints=http
        - traefik.http.services.dish-bert.loadbalancer.server.port=8080
  
  image-quality:
    image: registry.dishapp.com/dish-image-quality${DISH_IMAGE_TAG}
    networks:
      - default
    build:
      context: ./services/image-quality
    ports:
      - 8883:5005
    deploy:
      replicas: ${DOCKER_REPLICAS:-1}
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.dish-image-quality-http.rule=Host(`image-quality.${DOMAIN}`)
        - traefik.http.routers.dish-image-quality-http.entrypoints=http
        - traefik.http.services.dish-image-quality.loadbalancer.server.port=5005

  # non public facing

  postgres:
    image: registry.dishapp.com/dish-${POSTGRES_NAME:-postgres}${DISH_IMAGE_TAG}
    command: postgres -c config_file=/postgres/postgresql.conf
    networks:
      - default
    build:
      context: ./services/${POSTGRES_NAME:-postgres}
    volumes:
      - ${POSTGRES_DB_DIR}:/var/lib/postgresql/data
      - ./services/postgres:/postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-dish}
    ports:
      - 5432:5432
    # healthcheck:
    #   test: ["CMD-SHELL", "pg_isready -U postgres"]
    #   interval: 5s
    #   timeout: 5s
    #   retries: 5

  timescale:
    command: ["-c", "max_connections=300"]
    image: ${TIMESCALE_IMAGE:-registry.dishapp.com/dish-timescale:latest}
    networks:
      - traefik-public
      - default
    build:
      context: ./services/timescale
    volumes:
      - ${TIMESCALE_DB_DIR}:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${TIMESCALE_USER:-postgres}
      POSTGRES_PASSWORD: ${TIMESCALE_PASSWORD:-postgres}
      POSTGRES_DB: scrape_data
    ports:
      - ${TIMESCALE_PORT:-5433}:5432

  redis:
    image: redis
    networks:
      - traefik-public
      - default
    build:
      context: ./services/redis
      dockerfile: ./Dockerfile
    ports:
      - ${REDIS_PORT:-6379}:6379
    networks:
      default:

  summarizer:
    image: registry.dishapp.com/dish-summarizer${DISH_IMAGE_TAG}
    networks:
      - traefik-public
      - default
    build:
      context: ./services/summarizer
      dockerfile: ./Dockerfile
    ports:
      - 5002:5000

  worker-proxy:
    image: registry.dishapp.com/dish-proxy${DISH_IMAGE_TAG}
    networks:
      - default
    build:
      context: ./services/worker-proxy
      dockerfile: ./Dockerfile
    ports:
      - 3535:3535
    environment:
      - STORMPROXY_HOSTS=${STORMPROXY_HOSTS}
      - UBEREATS_PROXY=${UBEREATS_PROXY}
      - INFATUATED_PROXY=${INFATUATED_PROXY}
      - MICHELIN_PROXY=${MICHELIN_PROXY}
      - YELP_AWS_PROXY=${YELP_AWS_PROXY}
      - YELP_MOBILE_AWS_PROXY=${YELP_MOBILE_AWS_PROXY}
      - TRIPADVISOR_PROXY=${TRIPADVISOR_PROXY}
      - GOOGLE_SEARCH_PROXY=${GOOGLE_SEARCH_PROXY}
      - GOOGLE_AWS_PROXY=${GOOGLE_AWS_PROXY}
      - GOOGLE_USERCONTENT_AWS_PROXY=${GOOGLE_USERCONTENT_AWS_PROXY}
      - DOORDASH_GRAPHQL_AWS_PROXY=${DOORDASH_GRAPHQL_AWS_PROXY}
      - GRUBHUB_AWS_PROXY=${GRUBHUB_AWS_PROXY}
      - YELP_CDN_AWS_PROXY=${YELP_CDN_AWS_PROXY}
      - LUMINATI_PROXY_HOST=${LUMINATI_PROXY_HOST}
      - LUMINATI_PROXY_PORT=${LUMINATI_PROXY_PORT}
      - LUMINATI_PROXY_DATACENTRE_USER=${LUMINATI_PROXY_DATACENTRE_USER}
      - LUMINATI_PROXY_DATACENTRE_PASSWORD=${LUMINATI_PROXY_DATACENTRE_PASSWORD}
      - LUMINATI_PROXY_RESIDENTIAL_USER=${LUMINATI_PROXY_RESIDENTIAL_USER}
      - LUMINATI_PROXY_RESIDENTIAL_PASSWORD=${LUMINATI_PROXY_RESIDENTIAL_PASSWORD}

  hooks:
    image: registry.dishapp.com/dish-hooks${DISH_IMAGE_TAG}
    networks:
      - traefik-public
      - default
    build:
      context: ./
      dockerfile: ./services/hooks/Dockerfile
    ports:
      - ${HOOKS_PORT:-6154}:6154
    environment:
      - DO_SPACES_ID=${DO_SPACES_ID}
      - DO_SPACES_SECRET=${DO_SPACES_SECRET}
      - GORSE_ENDPOINT=http://gorse:9000
      - DISH_ENV=${DISH_ENV:-production}
      - NODE_ENV=${NODE_ENV:-production}

  hasura:
    image: ${DOCKER_HASURA_IMAGE:-registry.dishapp.com/dish-hasura:latest}
    networks:
      - traefik-public
      - default
    build:
      context: .
      dockerfile: ./services/hasura/Dockerfile
    ports:
      - ${HASURA_PORT:?no hasura port}:8080
    deploy:
      replicas: ${DOCKER_REPLICAS:-1}
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.dish-hasura-http.rule=Host(`hasura.${DOMAIN}`)
        - traefik.http.routers.dish-hasura-http.entrypoints=http
        - traefik.http.services.dish-hasura.loadbalancer.server.port=8080
    environment:
      - HASURA_GRAPHQL_NO_OF_RETRIES=50
      - HASURA_GRAPHQL_DATABASE_URL=${POSTGRES_URL_INTERNAL:-postgres://postgres:postgres@postgres/dish}
      - HASURA_GRAPHQL_ENABLED_LOG_TYPES=startup, http-log, webhook-log, websocket-log, query-log
      - HASURA_GRAPHQL_ENABLE_TELEMETRY=false
      - HASURA_GRAPHQL_ADMIN_SECRET=${HASURA_GRAPHQL_ADMIN_SECRET:-password}
      - HASURA_GRAPHQL_UNAUTHORIZED_ROLE=anon
      - HASURA_GRAPHQL_JWT_SECRET={"type":"HS256", "key":"12345678901234567890123456789012"}
      - HASURA_GRAPHQL_ENABLE_CONSOLE=true
      - DISH_HOOKS_ENDPOINT=http://hooks:${HOOKS_PORT:-6154}
      - GORSE_SYNC_HOOK=http://hooks:${HOOKS_PORT:-6154}/gorse_sync
    depends_on:
      - 'postgres'
      - 'redis'
      - 'hooks'

  gorse:
    image: registry.dishapp.com/dish-gorse${DISH_IMAGE_TAG}
    networks:
      - default
      - traefik-public
    build:
      context: ./services/gorse
      dockerfile: ./Dockerfile
    volumes:
      - /var/data/gorse/${DISH_ENV:-development}:/data
      - ./services/gorse/config.local.toml:/app/config.toml
    ports:
      - 9000:9000

  worker:
    image: registry.dishapp.com/dish-worker${DISH_IMAGE_TAG}
    networks:
      - default
    build:
      context: .
      dockerfile: ./services/worker/Dockerfile
    environment:
      - HASURA_ENDPOINT=http://hasura:${HASURA_PORT:-8080}
      - HASURA_GRAPHQL_ADMIN_SECRET=${HASURA_GRAPHQL_ADMIN_SECRET:-password}
      - REDIS_HOST=redis
      - PGHOST=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - TIMESCALE_HOST=timescale
      - TIMESCALE_PASSWORD=${TIMESCALE_PASSWORD:-postgres}
      - TIMESCALE_PORT=5433
      - STORMPROXY_HOSTS=${STORMPROXY_HOSTS}
      - UBEREATS_PROXY=${UBEREATS_PROXY}
      - HEREMAPS_API_TOKEN${HEREMAPS_API_TOKEN}
      - INFATUATED_PROXY=${INFATUATED_PROXY}
      - MICHELIN_PROXY=${MICHELIN_PROXY}
      - YELP_MOBILE_AWS_PROXY=${YELP_MOBILE_AWS_PROXY}
      - YELP_AWS_PROXY=${YELP_AWS_PROXY}
      - TRIPADVISOR_PROXY=${TRIPADVISOR_PROXY}
      - GOOGLE_SEARCH_PROXY=${GOOGLE_SEARCH_PROXY}
      - GOOGLE_AWS_PROXY=${GOOGLE_AWS_PROXY}
      - GOOGLE_USERCONTENT_AWS_PROXY=${GOOGLE_USERCONTENT_AWS_PROXY}
      - DOORDASH_GRAPHQL_AWS_PROXY=${DOORDASH_GRAPHQL_AWS_PROXY}
      - GRUBHUB_AWS_PROXY=${GRUBHUB_AWS_PROXY}
      - YELP_CDN_AWS_PROXY=${YELP_CDN_AWS_PROXY}
      - LUMINATI_PROXY_HOST=${LUMINATI_PROXY_HOST}
      - LUMINATI_PROXY_PORT=${LUMINATI_PROXY_PORT}
      - LUMINATI_PROXY_DATACENTRE_USER=${LUMINATI_PROXY_DATACENTRE_USER}
      - LUMINATI_PROXY_DATACENTRE_PASSWORD=${LUMINATI_PROXY_DATACENTRE_PASSWORD}
      - LUMINATI_PROXY_RESIDENTIAL_USER=${LUMINATI_PROXY_RESIDENTIAL_USER}
      - LUMINATI_PROXY_RESIDENTIAL_PASSWORD=${LUMINATI_PROXY_RESIDENTIAL_PASSWORD}
      - DO_SPACES_ID=${DO_SPACES_ID}
      - DO_SPACES_SECRET=${DO_SPACES_SECRET}
      - GPT3_KEY=${GPT3_KEY}
      - NODE_OPTIONS="--max_old_space_size=5120"
      - GORSE_ENDPOINT="http://gorse:9000"
      - DISH_DEBUG=1

  cron:
    image: registry.dishapp.com/dish-cron${DISH_IMAGE_TAG}
    networks:
      - default
      - traefik-public
    build:
      context: .
      dockerfile: ./services/cron/Dockerfile

volumes:
    conf:
    vhost:
    html:
    dhparam:
    certs:
    acme:

networks:
  traefik-public: 
    external: true
  