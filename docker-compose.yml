version: '3.7'

x-dish-env: &dish-env
  HASURA_ENDPOINT: ${HASURA_ENDPOINT?bad_env}
  SEARCH_ENDPOINT: ${SEARCH_ENDPOINT?bad_env}
  GORSE_ENDPOINT: ${GORSE_ENDPOINT?bad_env}
  APP_ENDPOINT: ${APP_ENDPOINT?bad_env}
  BERT_ENDPOINT: ${BERT_ENDPOINT?bad_env}
  TIMESCALE_ENDPOINT: ${TIMESCALE_ENDPOINT?bad_env}
  IMAGE_RECOGNIZE_ENDPOINT: ${IMAGE_RECOGNIZE_ENDPOINT?bad_env}
  IMAGE_QUALITY_ENDPOINT: ${IMAGE_QUALITY_ENDPOINT?bad_env}
  HOOKS_ENDPOINT: ${HOOKS_ENDPOINT?bad_env}
  SUMMARIZER_ENDPOINT: ${SUMMARIZER_ENDPOINT?bad_env}
  PUPPET_PROXY_ENDPOINT: ${PUPPET_PROXY_ENDPOINT?bad_env}
  REDIS_HOST: ${REDIS_HOST}
  REDIS_PORT: ${REDIS_PORT}
  DISH_ENV: ${DISH_ENV:-production}
  NODE_ENV: ${NODE_ENV:-production}
  SENDGRID_API_KEY: ${SENDGRID_API_KEY}
  JWT_ADMIN_PASSWORD: ${JWT_ADMIN_PASSWORD}
  HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET:-password}
  POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
  POSTGRES_DB: ${POSTGRES_DB:-dish}
  TIMESCALE_HOST: ${TIMESCALE_HOST:-timescale}
  TIMESCALE_PASSWORD: ${TIMESCALE_PASSWORD:-postgres}
  TIMESCALE_PORT: ${TIMESCALE_PORT:-5433}
  TIMESCALE_PORT_INTERNAL: ${TIMESCALE_PORT_INTERNAL:-5432}
  STORMPROXY_HOSTS: ${STORMPROXY_HOSTS}
  UBEREATS_PROXY: ${UBEREATS_PROXY}
  HEREMAPS_API_TOKEN: ${HEREMAPS_API_TOKEN}
  INFATUATED_PROXY: ${INFATUATED_PROXY}
  MICHELIN_PROXY: ${MICHELIN_PROXY}
  YELP_MOBILE_AWS_PROXY: ${YELP_MOBILE_AWS_PROXY}
  YELP_AWS_PROXY: ${YELP_AWS_PROXY}
  TRIPADVISOR_PROXY: ${TRIPADVISOR_PROXY}
  GOOGLE_SEARCH_PROXY: ${GOOGLE_SEARCH_PROXY}
  GOOGLE_AWS_PROXY: ${GOOGLE_AWS_PROXY}
  GOOGLE_USERCONTENT_AWS_PROXY: ${GOOGLE_USERCONTENT_AWS_PROXY}
  DOORDASH_GRAPHQL_AWS_PROXY: ${DOORDASH_GRAPHQL_AWS_PROXY}
  GRUBHUB_AWS_PROXY: ${GRUBHUB_AWS_PROXY}
  YELP_CDN_AWS_PROXY: ${YELP_CDN_AWS_PROXY}
  LUMINATI_PROXY_HOST: ${LUMINATI_PROXY_HOST}
  LUMINATI_PROXY_PORT: ${LUMINATI_PROXY_PORT}
  LUMINATI_PROXY_DATACENTRE_USER: ${LUMINATI_PROXY_DATACENTRE_USER}
  LUMINATI_PROXY_DATACENTRE_PASSWORD: ${LUMINATI_PROXY_DATACENTRE_PASSWORD}
  LUMINATI_PROXY_RESIDENTIAL_USER: ${LUMINATI_PROXY_RESIDENTIAL_USER}
  LUMINATI_PROXY_RESIDENTIAL_PASSWORD: ${LUMINATI_PROXY_RESIDENTIAL_PASSWORD}
  DO_SPACES_ID: ${DO_SPACES_ID}
  DO_SPACES_SECRET: ${DO_SPACES_SECRET}
  GPT3_KEY: ${GPT3_KEY}
  NODE_OPTIONS: --max_old_space_size=5120

services:
  app:
    image: registry.dishapp.com/dish-app${DISH_IMAGE_TAG}
    networks:
      - default
      - traefik-public
    deploy:
      replicas: ${DOCKER_REPLICAS:-1}
      update_config:
        order: start-first
        failure_action: rollback
        parallelism: 1
        delay: 5s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.app-http.rule=Host(`${DOMAIN}`) || Host(`www.${DOMAIN}`)
        - traefik.http.routers.app-http.entrypoints=http
        - traefik.http.routers.app-http.middlewares=dish-https-redirect
        - traefik.http.routers.app-https.rule=Host(`${DOMAIN}`) || Host(`www.${DOMAIN}`)
        - traefik.http.routers.app-https.entrypoints=https
        - traefik.http.routers.app-https.tls=true
        - traefik.http.routers.app-https.tls.certresolver=alt3
        - traefik.http.services.app.loadbalancer.server.port=4444
    build:
      context: ./
      dockerfile: ./app/Dockerfile
    environment:
      <<: *dish-env
      MARTIN_API_PATH: /api/tile
    ports:
      - 4444:4444
    depends_on:
      - 'hasura'
      - 'redis'
      - 'tileserver'

  postgres:
    image: registry.dishapp.com/dish-${POSTGRES_NAME:-postgres}${DISH_IMAGE_TAG}
    build:
      context: ./services/${POSTGRES_NAME:-postgres}
    command: postgres -c config_file=/postgres/postgresql.conf
    deploy:
      update_config:
        order: start-first
        failure_action: rollback
        parallelism: 1
        delay: 5s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
    networks:
      - default
    volumes:
      - ${POSTGRES_DB_DIR?err}:/var/lib/postgresql/data
      - ./services/postgres:/postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-dish}
    ports:
      - 5432:5432
    # healthcheck:
    #   test: ["CMD-SHELL", "pg_isready -U postgres"]
    #   interval: 5s
    #   timeout: 5s
    #   retries: 5

  hasura:
    image: ${DOCKER_HASURA_IMAGE:-hasura/graphql-engine:v2.1.0-beta.1.cli-migrations-v2}
    # build:
    #   context: ${DOCKER_HASURA_FOLDER:-./services/hasura}
    restart: on-failure:3
    networks:
      - traefik-public
      - default
    ports:
      - ${HASURA_PORT:?no hasura port}:8080
    deploy:
      replicas: ${DOCKER_REPLICAS:-1}
      update_config:
        order: start-first
        failure_action: rollback
        parallelism: 1
        delay: 5s
      restart_policy:
        condition: on-failure
        delay: 5s
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.hasura-http.rule=Host(`hasura.${DOMAIN}`)
        - traefik.http.routers.hasura-http.entrypoints=http
        - traefik.http.routers.hasura-http.middlewares=dish-https-redirect
        - traefik.http.routers.hasura-https.rule=Host(`hasura.${DOMAIN}`)
        - traefik.http.routers.hasura-https.entrypoints=https
        - traefik.http.routers.hasura-https.tls=true
        - traefik.http.routers.hasura-https.tls.certresolver=le
        - traefik.http.services.hasura.loadbalancer.server.port=8080
    environment:
      - HASURA_GRAPHQL_NO_OF_RETRIES=50
      - HASURA_GRAPHQL_DATABASE_URL=${POSTGRES_URL_INTERNAL:-postgres://postgres:postgres@postgres/dish}
      - HASURA_GRAPHQL_ENABLED_LOG_TYPES=startup, http-log, webhook-log, websocket-log, query-log
      - HASURA_GRAPHQL_ENABLE_TELEMETRY=false
      - HASURA_GRAPHQL_ADMIN_SECRET=${HASURA_GRAPHQL_ADMIN_SECRET:-password}
      - HASURA_GRAPHQL_UNAUTHORIZED_ROLE=anon
      - HASURA_GRAPHQL_JWT_SECRET={"type":"HS256", "key":"12345678901234567890123456789012"}
      - HASURA_GRAPHQL_ENABLE_CONSOLE=true
      - DISH_HOOKS_ENDPOINT=${HOOKS_ENDPOINT}
      - GORSE_SYNC_HOOK=${GORSE_ENDPOINT}/gorse_sync
      # - HASURA_GRAPHQL_DEV_MODE=true
    # depends_on:
    #   # - 'postgres'
    #   - 'redis'
    #   # - 'hooks'

  search:
    image: registry.dishapp.com/dish-search${DISH_IMAGE_TAG}
    build:
      context: ./services/search
      dockerfile: ./Dockerfile
    ports:
      - 9999:9999
    restart: on-failure:3
    networks:
      - default
      - traefik-public
    deploy:
      replicas: ${DOCKER_REPLICAS:-1}
      update_config:
        order: start-first
        failure_action: rollback
        parallelism: 1
        delay: 5s
      restart_policy:
        condition: on-failure
        delay: 5s
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.search-http.rule=Host(`search.${DOMAIN}`)
        - traefik.http.routers.search-http.entrypoints=http
        - traefik.http.routers.search-http.middlewares=dish-https-redirect
        - traefik.http.routers.search-https.rule=Host(`search.${DOMAIN}`)
        - traefik.http.routers.search-https.entrypoints=https
        - traefik.http.routers.search-https.tls=true
        - traefik.http.routers.search-https.tls.certresolver=le
        - traefik.http.services.search.loadbalancer.server.port=9999
    environment:
      <<: *dish-env
    # depends_on:
    #   - 'postgres'

  tileserver:
    image: registry.dishapp.com/dish-tileserver${DISH_IMAGE_TAG}
    networks:
      - default
      - traefik-public
    deploy:
      replicas: ${DOCKER_REPLICAS:-1}
      update_config:
        order: start-first
        failure_action: rollback
        parallelism: 1
        delay: 5s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.tileserver-http.rule=Host(`tileserver.${DOMAIN}`)
        - traefik.http.routers.tileserver-http.entrypoints=http
        - traefik.http.routers.tileserver-http.middlewares=cloudflare-headers
        # - traefik.http.routers.tileserver-http.middlewares=dish-https-redirect
        # - traefik.http.middlewares.https-redirect.headers.sslredirect=true
        # - traefik.http.routers.tileserver-https.rule=Host(`tileserver.${DOMAIN}`)
        # - traefik.http.routers.tileserver-https.entrypoints=https
        # - traefik.http.routers.tileserver-https.tls=true
        # - traefik.http.routers.tileserver-https.tls.certresolver=le
        - traefik.http.services.tileserver.loadbalancer.server.port=3000
    build:
      context: ./services/tileserver
      dockerfile: ./Dockerfile
    ports:
      - 3005:3000
    environment:
      - WATCH_MODE=true
      - DATABASE_URL=${POSTGRES_URL_INTERNAL:-postgres://postgres:postgres@postgres/dish}
    # depends_on:
    #   - 'postgres'

  site:
    image: registry.dishapp.com/dish-site${DISH_IMAGE_TAG}
    build:
      context: .
      dockerfile: ./services/site/Dockerfile
    ports:
      - 3999:3999
    networks:
      - default
      - traefik-public
    deploy:
      update_config:
        order: start-first
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.site-http.rule=Host(`site.${DOMAIN}`)
        - traefik.http.routers.site-http.entrypoints=http
        - traefik.http.routers.site-http.middlewares=dish-https-redirect
        - traefik.http.routers.site-https.rule=Host(`site.${DOMAIN}`)
        - traefik.http.routers.site-https.entrypoints=https
        - traefik.http.routers.site-https.tls=true
        - traefik.http.routers.site-https.tls.certresolver=le
        - traefik.http.services.site.loadbalancer.server.port=3999

  image-proxy:
    image: darthsim/imgproxy:v2
    ports:
      - 8981:8080
    networks:
      - default
      - traefik-public
    environment:
      IMGPROXY_ALLOW_ORIGIN: dishapp.com
      IMGPROXY_ALLOWED_SOURCES: https://dish-images.sfo2.digitaloceanspaces.com/,https://d3h1lg3ksw6i6b.cloudfront.net/
      # 10MB max
      IMGPROXY_MAX_SRC_FILE_SIZE: 10,485,760
    deploy:
      replicas: 1
      update_config:
        order: start-first
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.image-proxy-http.rule=Host(`image-proxy.${DOMAIN}`)
        - traefik.http.routers.image-proxy-http.entrypoints=http
        - traefik.http.routers.image-proxy-http.middlewares=dish-https-redirect
        - traefik.http.routers.image-proxy-https.rule=Host(`image-proxy.${DOMAIN}`)
        - traefik.http.routers.image-proxy-https.entrypoints=https
        - traefik.http.routers.image-proxy-https.tls=true
        - traefik.http.routers.image-proxy-https.tls.certresolver=le
        - traefik.http.services.image-proxy.loadbalancer.server.port=8080

  worker:
    image: registry.dishapp.com/dish-worker${DISH_IMAGE_TAG}
    restart: on-failure:3
    ports:
      - 3434:3434
    networks:
      - default
      - traefik-public
    build:
      context: .
      dockerfile: ./services/worker/Dockerfile
    deploy:
      replicas: 1
      update_config:
        order: start-first
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.worker-http.rule=Host(`worker.${DOMAIN}`)
        - traefik.http.routers.worker-http.entrypoints=http
        - traefik.http.routers.worker-http.middlewares=dish-https-redirect
        - traefik.http.routers.worker-https.rule=Host(`worker.${DOMAIN}`)
        - traefik.http.routers.worker-https.entrypoints=https
        - traefik.http.routers.worker-https.tls=true
        - traefik.http.routers.worker-https.tls.certresolver=le
        - traefik.http.services.worker.loadbalancer.server.port=3434
    environment:
      <<: *dish-env
      DISH_DEBUG: 2

  umami:
    image: ghcr.io/mikecao/umami:postgresql-latest
    networks:
      - default
      - traefik-public
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.umami-http.rule=Host(`umami.${DOMAIN}`)
        - traefik.http.routers.umami-http.entrypoints=http
        - traefik.http.routers.umami-http.middlewares=dish-https-redirect
        - traefik.http.routers.umami-https.rule=Host(`umami.${DOMAIN}`)
        - traefik.http.routers.umami-https.entrypoints=https
        - traefik.http.routers.umami-https.tls=true
        - traefik.http.routers.umami-https.tls.certresolver=alt3
        - traefik.http.services.umami.loadbalancer.server.port=3000
    ports:
      - "5555:3000"
    environment:
      DATABASE_URL: ${POSTGRES_URL_INTERNAL:-postgres://postgres:postgres@postgres/dish}
      DATABASE_TYPE: postgresql
      HASH_SALT: ${UMAMI_HASH_SALT}
    depends_on:
      - postgres

  pg-admin:
    image: registry.dishapp.com/pg-admin${DISH_IMAGE_TAG}
    build:
      context: ./services/timescale
    networks:
      - default
      - traefik-public
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.pg-admin-http.rule=Host(`pg-admin.${DOMAIN}`)
        - traefik.http.routers.pg-admin-http.entrypoints=http
        - traefik.http.routers.pg-admin-http.middlewares=dish-https-redirect
        - traefik.http.routers.pg-admin-https.rule=Host(`pg-admin.${DOMAIN}`)
        - traefik.http.routers.pg-admin-https.entrypoints=https
        - traefik.http.routers.pg-admin-https.tls=true
        - traefik.http.routers.pg-admin-https.tls.certresolver=le
        - traefik.http.routers.pg-admin-https.middlewares=admin-auth
        - traefik.http.services.pg-admin.loadbalancer.server.port=80

  # non public facing

  bert:
    image: registry.dishapp.com/dish-bert${DISH_IMAGE_TAG}
    networks:
      - default
      - traefik-public
    build:
      context: ./services/bert
    ports:
      - 8888:8080
    deploy:
      replicas: ${DOCKER_REPLICAS:-1}

  image-quality:
    image: registry.dishapp.com/dish-image-quality${DISH_IMAGE_TAG}
    networks:
      - default
    build:
      context: ./services/image-quality
    ports:
      - 5005:5005
    deploy:
      replicas: ${DOCKER_REPLICAS:-1}

  image-recognize:
    image: registry.dishapp.com/dish-image-recognize${DISH_IMAGE_TAG}
    networks:
      - default
    build:
      context: ./services/image-recognize
    ports:
      - 8884:8080

  timescale:
    command: ["-c", "max_connections=300"]
    restart: on-failure:5
    image: ${TIMESCALE_IMAGE:-registry.dishapp.com/dish-timescale:latest}
    networks:
      - default
    build:
      context: ./services/timescale
    volumes:
      - ${TIMESCALE_DB_DIR?err}:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${TIMESCALE_USER:-postgres}
      POSTGRES_PASSWORD: ${TIMESCALE_PASSWORD:-postgres}
    ports:
      - ${TIMESCALE_PORT:-5433}:5432
    # healthcheck:
    #   test: ["CMD-SHELL", "pg_isready -U postgres -p 5432"]
    #   interval: 5s
    #   timeout: 5s
    #   retries: 5

  migrate:
    image: registry.dishapp.com/dish-run-tests${DISH_IMAGE_TAG}
    command: bash -c 'sleep 5 && ./dsh migrate_all'
    networks:
      - default
    environment:
      <<: *dish-env
      KEEP_ALIVE: "true"
    depends_on:
      - timescale
      - hasura
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3

  redis:
    image: redis
    networks:
      - default
    build:
      context: ./services/redis
      dockerfile: ./Dockerfile
    volumes:
      - ${REDIS_DB_DIR?err}:/data
    ports:
      - ${REDIS_PORT:-6379}:6379

  summarizer:
    image: registry.dishapp.com/dish-summarizer${DISH_IMAGE_TAG}
    networks:
      - default
    build:
      context: ./services/summarizer
      dockerfile: ./Dockerfile
    ports:
      - 5002:8080

  puppet-proxy:
    image: registry.dishapp.com/dish-puppet-proxy${DISH_IMAGE_TAG}
    networks:
      - default
    build:
      context: ./services/puppet-proxy
      dockerfile: ./Dockerfile
    ports:
      - 3535:3535
    environment:
      <<: *dish-env

  hooks:
    image: registry.dishapp.com/dish-hooks${DISH_IMAGE_TAG}
    networks:
      - traefik-public
      - default
    build:
      context: ./
      dockerfile: ./services/hooks/Dockerfile
    ports:
      - ${HOOKS_PORT:-6154}:6154
    environment:
      <<: *dish-env

  # gorse:
  #   image: registry.dishapp.com/dish-gorse${DISH_IMAGE_TAG}
  #   networks:
  #     - default
  #   build:
  #     context: ./services/gorse
  #     dockerfile: ./Dockerfile
  #   volumes:
  #     - /var/data/gorse:/data
  #     - ./services/gorse/config.local.toml:/app/config.toml
  #   ports:
  #     - 9000:9000

  cron:
    image: registry.dishapp.com/dish-cron${DISH_IMAGE_TAG}
    networks:
      - default
    build:
      context: .
      dockerfile: ./services/cron/Dockerfile
    environment:
      <<: *dish-env

volumes:
    conf:
    vhost:
    html:
    dhparam:
    certs:
    acme:

networks:
  traefik-public:
    external: true
