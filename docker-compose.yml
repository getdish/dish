version: '3.2'
services:
  base:
    image: registry.fly.io/dish-base${DISH_IMAGE_TAG}
    build:
      context: .
      dockerfile: ./Dockerfile
  ci:
    privileged: true
    image: registry.fly.io/dish-ci${DISH_IMAGE_TAG}
    command: start --spawn 6 --token ${BUILDITE_AGENT_TOKEN}
    build:
      context: ./services/ci
    volumes:
      - /var/lib/buildkite/builds:/var/lib/buildkite/builds
      - /usr/local/bin/buildkite-agent:/usr/local/bin/buildkite-agent
      - ./etc/keys:/buildkite-secrets:ro
      - ./data:/data
    environment:
      DISH_KEYS_PATH: /buildkite-secrets
      BUILDKITE_BUILD_PATH: /var/lib/buildkite/builds
      BUILDITE_AGENT_TOKEN: ${BUILDITE_AGENT_TOKEN}
  run-tests:
    image: registry.fly.io/dish-run-tests${DISH_IMAGE_TAG}
    build:
      context: .
      dockerfile: ./services/run-tests/Dockerfile
  cron:
    image: registry.fly.io/dish-cron${DISH_IMAGE_TAG}
    build:
      context: .
      dockerfile: ./services/cron/Dockerfile
  postgres:
    image: registry.fly.io/dish-${POSTGRES_NAME:-postgres}${DISH_IMAGE_TAG}
    command: postgres -c config_file=/postgres/postgresql.conf
    build:
      context: ./services/${POSTGRES_NAME:-postgres}
    volumes:
      - ${DB_DATA_DIR:-~/.dish/postgresdb/}/${POSTGRES_DB:-dish}:/var/lib/postgresql/data
      - ./services/postgres:/postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-dish}
    ports:
      - 5432:5432
  timescale:
    command: ["-c", "max_connections=300"]
    image: registry.fly.io/dish-timescale${DISH_IMAGE_TAG}
    build:
      context: ./services/timescale
    volumes:
      - ${HOME}/.dish/timescaledb:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${TIMESCALE_USER:-postgres}
      POSTGRES_PASSWORD: ${TIMESCALE_PASSWORD:-postgres}
      POSTGRES_DB: scrape_data
    ports:
      - ${TIMESCALE_PORT:-5433}:5432
  pg-admin:
    image: registry.fly.io/pg-admin${DISH_IMAGE_TAG}
    build:
      context: ./services/timescale
  redis:
    image: redis
    build:
      context: ./services/redis
      dockerfile: ./Dockerfile
    ports:
      - ${REDIS_PORT:-6379}:6379
  worker-proxy:
    image: registry.fly.io/dish-proxy${DISH_IMAGE_TAG}
    build:
      context: ./services/worker-proxy
      dockerfile: ./Dockerfile
    ports:
      - 3535:3535
  hooks:
    image: registry.fly.io/dish-hooks${DISH_IMAGE_TAG}
    build:
      context: ./
      dockerfile: ./services/hooks/Dockerfile
    ports:
      - ${HOOKS_PORT:-6154}:6154
    environment:
      - DO_SPACES_ID=${DO_SPACES_ID}
      - DO_SPACES_SECRET=${DO_SPACES_SECRET}
      - GORSE_ENDPOINT=http://gorse:9000
      - DISH_ENV=${DISH_ENV:-production}
      - NODE_ENV=${NODE_ENV:-production}
  hasura:
    image: ${DOCKER_HASURA_IMAGE:-registry.fly.io/dish-hasura:latest}
    restart: on-failure:5
    build:
      context: .
      dockerfile: ./services/hasura/Dockerfile
    ports:
      - ${HASURA_PORT:-8080}:8080
    environment:
      - HASURA_GRAPHQL_NO_OF_RETRIES=50
      - HASURA_GRAPHQL_DATABASE_URL=${POSTGRES_URL_INTERNAL:-postgres://postgres:postgres@postgres/dish}
      - HASURA_GRAPHQL_ENABLED_LOG_TYPES=startup, http-log, webhook-log, websocket-log, query-log
      - HASURA_GRAPHQL_ENABLE_TELEMETRY=false
      - HASURA_GRAPHQL_ADMIN_SECRET=${HASURA_GRAPHQL_ADMIN_SECRET:-password}
      - HASURA_GRAPHQL_UNAUTHORIZED_ROLE=anon
      - HASURA_GRAPHQL_JWT_SECRET={"type":"HS256", "key":"12345678901234567890123456789012"}
      - HASURA_GRAPHQL_ENABLE_CONSOLE=true
      - DISH_HOOKS_ENDPOINT=http://hooks:${HOOKS_PORT:-6154}
      - GORSE_SYNC_HOOK=http://hooks:${HOOKS_PORT:-6154}/gorse_sync
      - VIRTUAL_HOST=hasura.dishapp.com
      - VIRTUAL_PORT=8080
    depends_on:
      - 'postgres'
      - 'redis'
      - 'hooks'
  dish-app:
    image: registry.fly.io/dish-app${DISH_IMAGE_TAG}
    build:
      context: ./
      dockerfile: ./dish-app/Dockerfile
    environment:
      - MARTIN_ENDPOINT=https://martin-tiles.dishapp.com
      - HASURA_GRAPHQL_ADMIN_SECRET=${HASURA_GRAPHQL_ADMIN_SECRET:-password}
      - JWT_ADMIN_PASSWORD=${JWT_ADMIN_PASSWORD}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - DO_SPACES_ID=${DO_SPACES_ID}
      - DO_SPACES_SECRET=${DO_SPACES_SECRET}
      - VIRTUAL_HOST=dishapp.com,www.dishapp.com
      - VIRTUAL_PORT=4444
      - HASURA_ENDPOINT=http://hasura:8080
      - SEARCH_ENDPOINT=http://search:9999
      - REDIS_HOST=redis
      - DISH_ENV=${DISH_ENV:-production}
      - NODE_ENV=${NODE_ENV:-production}
    ports:
      - 4444:4444
    depends_on:
      - 'hasura'
      - 'redis'
      - 'tileserver'
  tileserver:
    image: registry.fly.io/dish-tileserver${DISH_IMAGE_TAG}
    build:
      context: ./services/tileserver
      dockerfile: ./Dockerfile
    ports:
      - 3005:3000
    environment:
      - WATCH_MODE=true
      - DATABASE_URL=${POSTGRES_URL_INTERNAL:-postgres://postgres:postgres@postgres/dish}
      - VIRTUAL_HOST=martin-tiles.dishapp.com
      - VIRTUAL_PORT=3005
    depends_on:
      - 'postgres'
  search:
    image: registry.fly.io/dish-search${DISH_IMAGE_TAG}
    restart: on-failure:5
    build:
      context: ./services/search
      dockerfile: ./Dockerfile
    ports:
      - 9999:9999
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-dish}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_HOST=postgres
      - VIRTUAL_HOST=search.dishapp.com
      - VIRTUAL_PORT=9999
    depends_on:
      - 'postgres'
  gorse:
    image: registry.fly.io/dish-gorse${DISH_IMAGE_TAG}
    build:
      context: ./services/gorse
      dockerfile: ./Dockerfile
    volumes:
      - ${HOME}/.dish/gorse:/data
      - ./services/gorse/config.local.toml:/app/config.toml
    ports:
      - 9000:9000
  worker:
    image: registry.fly.io/dish-worker${DISH_IMAGE_TAG}
    build:
      context: .
      dockerfile: ./services/worker/Dockerfile
    environment:
      - VIRTUAL_HOST=worker.dishapp.com
      - VIRTUAL_PORT=9000
      - HASURA_ENDPOINT=http://hasura:8080
      - HASURA_GRAPHQL_ADMIN_SECRET=${HASURA_GRAPHQL_ADMIN_SECRET:-password}
      - REDIS_HOST=redis
      - PGHOST=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - TIMESCALE_HOST=timescale
      - TIMESCALE_PASSWORD=${TIMESCALE_PASSWORD:-postgres}
      - TIMESCALE_PORT=5433
      - UBEREATS_PROXY=${UBEREATS_PROXY}
      - HEREMAPS_API_TOKEN${HEREMAPS_API_TOKEN}
      - INFATUATED_PROXY=${INFATUATED_PROXY}
      - MICHELIN_PROXY=${MICHELIN_PROXY}
      - YELP_AWS_PROXY=${YELP_AWS_PROXY}
      - TRIPADVISOR_PROXY=${TRIPADVISOR_PROXY}
      - GOOGLE_SEARCH_PROXY=${GOOGLE_SEARCH_PROXY}
      - GOOGLE_AWS_PROXY=${GOOGLE_AWS_PROXY}
      - GOOGLE_USERCONTENT_AWS_PROXY=${GOOGLE_USERCONTENT_AWS_PROXY}
      - DOORDASH_GRAPHQL_AWS_PROXY=${DOORDASH_GRAPHQL_AWS_PROXY}
      - GRUBHUB_AWS_PROXY=${GRUBHUB_AWS_PROXY}
      - YELP_CDN_AWS_PROXY=${YELP_CDN_AWS_PROXY}
      - LUMINATI_PROXY_HOST=${LUMINATI_PROXY_HOST}
      - LUMINATI_PROXY_PORT=${LUMINATI_PROXY_PORT}
      - LUMINATI_PROXY_DATACENTRE_USER=${LUMINATI_PROXY_DATACENTRE_USER}
      - LUMINATI_PROXY_DATACENTRE_PASSWORD=${LUMINATI_PROXY_DATACENTRE_PASSWORD}
      - LUMINATI_PROXY_RESIDENTIAL_USER=${LUMINATI_PROXY_RESIDENTIAL_USER}
      - LUMINATI_PROXY_RESIDENTIAL_PASSWORD=${LUMINATI_PROXY_RESIDENTIAL_PASSWORD}
      - DO_SPACES_ID=${DO_SPACES_ID}
      - DO_SPACES_SECRET=${DO_SPACES_SECRET}
      - GPT3_KEY=${GPT3_KEY}
      - NODE_OPTIONS="--max_old_space_size=5120"
      - GORSE_ENDPOINT="http://gorse:9000"
      - DISH_DEBUG=1
  bert:
    image: registry.fly.io/dish-bert${DISH_IMAGE_TAG}
    build:
      context: ./services/bert
    ports:
      - 8888:8080
    environment:
      - VIRTUAL_HOST=bert.dishapp.com
      - VIRTUAL_PORT=8888
  site:
    image: registry.fly.io/dish-site${DISH_IMAGE_TAG}
    build:
      context: .
      dockerfile: ./services/site/Dockerfile
    ports:
      - 3999:3999
    environment:
      - VIRTUAL_HOST=site.dishapp.com
  image-quality:
    image: registry.fly.io/dish-image-quality${DISH_IMAGE_TAG}
    build:
      context: ./services/image-quality
    ports:
      - 8883:5005
    environment:
      - VIRTUAL_HOST=image-quality.dishapp.com
      - VIRTUAL_PORT=8883
  image-proxy:
    image: registry.fly.io/dish-image-proxy${DISH_IMAGE_TAG}
    build:
      context: ./services/image-proxy
    ports:
      - 8981:8981
    environment:
      - VIRTUAL_HOST=image-proxy.dishapp.com
      - VIRTUAL_PORT=8981
  nginx-proxy:
    image: jwilder/nginx-proxy
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - conf:/etc/nginx/conf.d
      - vhost:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - dhparam:/etc/nginx/dhparam
      - certs:/etc/nginx/certs:ro
      - /var/run/docker.sock:/tmp/docker.sock:ro
    labels:
      - "com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy"
    restart: always
  letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    container_name: nginx-proxy-le
    depends_on:
      - nginx-proxy
    volumes:
      - vhost:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - dhparam:/etc/nginx/dhparam:ro
      - certs:/etc/nginx/certs
      - acme:/etc/acme.sh
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: always
  umami:
    image: ghcr.io/mikecao/umami:postgresql-latest
    ports:
      - "5555:3000"
    environment:
      VIRTUAL_HOST: umami.dishapp.com
      VIRTUAL_PORT: 5555
      DATABASE_URL: ${POSTGRES_URL_INTERNAL:-postgres://postgres:postgres@postgres/dish}
      DATABASE_TYPE: postgresql
      HASH_SALT: ${UMAMI_HASH_SALT}
    depends_on:
      - postgres
volumes:
    conf:
    vhost:
    html:
    dhparam:
    certs:
    acme:
