// Generated by dts-bundle-generator v6.1.0

import { IsEqualOptions } from '@dish/fast-compare';

export declare type Selector<A = unknown, B = unknown> = (x: A) => B;
export declare type UseStoreSelector<Store, Res> = (store: Store) => Res;
export declare type UseStoreOptions<Store = any, SelectorRes = any> = {
	debug?: boolean;
	selector?: UseStoreSelector<Store, SelectorRes>;
	once?: boolean;
};
export declare type StoreInfo<A = any> = {
	keyComparators?: {
		[key: string]: (a: any, b: any) => boolean;
	};
	store: A;
	storeInstance: any;
	getters: {
		[key: string]: any;
	};
	actions: any;
	stateKeys: string[];
	gettersState: {
		getCache: Map<string, any>;
		depsToGetter: Map<string, Set<string>>;
		curGetKeys: Set<string>;
		isGetting: boolean;
	};
};
export declare type UseStoreConfig = {
	logLevel?: "debug" | "info" | "error";
};
export declare const TRIGGER_UPDATE: unique symbol;
export declare const ADD_TRACKER: unique symbol;
export declare const TRACK: unique symbol;
export declare const SHOULD_DEBUG: unique symbol;
export declare type StoreTracker = {
	isTracking: boolean;
	tracked: Set<string>;
	dispose: () => void;
	component?: any;
	firstRun: boolean;
	last?: any;
	lastKeys?: any;
};
export declare const disableTracking: WeakMap<object, any>;
export declare const setDisableStoreTracking: (storeInstance: any, val: boolean) => void;
export declare class Store<Props extends Object | null = null> {
	props: Props;
	private _listeners;
	private _trackers;
	_version: number;
	constructor(props: Props);
	subscribe(onChanged: Function): () => void;
	[TRIGGER_UPDATE](): void;
	[ADD_TRACKER](tracker: StoreTracker): () => void;
	[TRACK](key: string, debug?: boolean): void;
	[SHOULD_DEBUG](): boolean;
}
export declare function useStore<A extends Store<B>, B>(StoreKlass: (new (props: B) => A) | (new () => A), props?: B, options?: UseStoreOptions<A, any>): A;
export declare function useStoreDebug<A extends Store<B>, B>(StoreKlass: (new (props: B) => A) | (new () => A), props?: B, selector?: any): A;
export declare function createStore<A extends Store<B>, B>(StoreKlass: new (props: B) => A | (new () => A), props?: B): A;
export declare function useStoreInstance<A extends Store<B>, B>(instance: A, debug?: boolean): A;
export declare function useStoreInstanceSelector<A extends Store<B>, B, Selector extends (store: A) => any>(instance: A, selector: Selector, debug?: boolean): Selector extends (a: A) => infer C ? C : unknown;
export declare function createUseStore<Props, Store>(StoreKlass: (new (props: Props) => Store) | (new () => Store)): <Res, C extends Selector<Store, Res>>(props?: Props | undefined, options?: UseStoreOptions<any, any> | undefined) => C extends Selector<any, infer B> ? B extends Object ? B : Store : Store;
export declare function createUseStoreSelector<A extends Store<Props>, Props, Selected>(StoreKlass: (new (props: Props) => A) | (new () => A), selector: Selector<A, Selected>): (props?: Props) => Selected;
export declare function useStoreSelector<A extends Store<B>, B, S extends Selector<any, Selected>, Selected>(StoreKlass: (new (props: B) => A) | (new () => A), selector: S, props?: B): Selected;
export declare type StoreAccessTracker = (store: any) => void;
export declare function trackStoresAccess(cb: StoreAccessTracker): () => void;
export declare function useStoreOnce<A extends Store<B>, B>(StoreKlass: (new (props: B) => A) | (new () => A), props?: B, selector?: any): A;
export declare function getStore<A extends Store<B>, B>(StoreKlass: (new (props: B) => A) | (new () => A), props?: B): A;
export declare const allStores: {};
export declare const setIsInReaction: (val: boolean) => void;
export declare function configureUseStore(opts: UseStoreConfig): void;
export declare function selector(fn: () => any): () => void;
export declare function useSelector<A>(fn: () => A): A;
export declare function reaction<StoreInstance extends Store<any>, Selector extends (a: StoreInstance) => any>(store: StoreInstance, selector: Selector, receiver: Selector extends (a: StoreInstance) => infer Derived ? (a: Derived) => any : unknown, equalityFn?: (a: any, b: any) => boolean): () => void;
export declare const UNWRAP_PROXY: unique symbol;
export declare const isEqualSubsetShallow: (a: any, b: any, opts?: IsEqualOptions | undefined) => boolean;
export declare const isEqualStrict: (a: any, b: any) => boolean;
export declare type ComparisonFn = (a: any, b: any) => boolean;
export declare function compare(comparator: ComparisonFn): (target: any, propertyKey: string) => any;
export declare const compareStrict: (target: any, propertyKey: string) => any;
export declare const compareShallow: (target: any, propertyKey: string) => any;
export declare const compareDeep: (target: any, propertyKey: string) => any;

export {};
