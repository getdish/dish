// Generated by dts-bundle-generator v6.1.0

export declare type CancelFn = () => void;
export declare class CancellablePromise<T = any> extends Promise<T> {
	cancel: () => any;
	constructor(executor: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void);
}
export declare const createCancellablePromise: <A>(cb: (res: (value?: any) => any, rej: (value?: any) => any, onCancel: Function) => A) => CancellablePromise<A>;
export declare const cancelPromise: (promise: CancellablePromise<any> | Promise<any>) => void;
export declare function series(fns: (Function | ((x?: any) => any))[]): {
	(): void;
	value(): any;
};
export declare const sleep: (ms: number) => CancellablePromise;
export declare const requestIdle: () => CancellablePromise;
export declare type FullyIdleProps = {
	min?: number;
	max?: number;
	checks?: number;
};
export declare function fullyIdle({ min, checks, max }?: FullyIdleProps): CancellablePromise;
export declare const idle: (max: number) => Promise<void>;

export {};
