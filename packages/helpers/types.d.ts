// Generated by dts-bundle-generator v5.9.0

export declare const fetchRetry: (url: RequestInfo, { retry, retryDelay, backoff, ...opts }?: RequestInit & {
	retry?: number | undefined;
	backoff?: boolean | undefined;
	retryDelay?: number | undefined;
}) => any;
export declare const isNative: boolean;
export declare const defaultSmall: boolean;
export declare const supportsTouchWeb: boolean;
export declare const isSafari: boolean;
export declare class AssertionError extends Error {
}
export declare class AsserionNullError extends AssertionError {
}
export declare type NonNullish = string | number | boolean | symbol | bigint | object;
export declare type AssertOpts = {
	onAssertFail?: (why?: string) => any;
};
export declare function configureAssertHelpers(opts: AssertOpts): void;
export declare function assertPresent(value: any, why?: string): asserts value is NonNullish;
export declare function assertSame<T>(a: T, b: T): void;
export declare function assertIsString(val: unknown, why?: string): asserts val is string;
export declare function assertInstanceOf<T>(val: unknown, clazz: new (...args: any[]) => T, why?: string): asserts val is T;
export declare function assert(value: unknown, why?: string): asserts value;
export declare function assertNever(value: never, why?: string): void;
export declare function assertNonNull<T>(value: T, why?: string): NonNullable<T>;
export declare function handleAssertionError(err: any): void;
export declare function reduce<A extends {
	[key: string]: any;
}>(obj: A, transform: (key: keyof A, val: any) => any): {
	[key in keyof A]: any;
};
export declare type Sentiment = {
	positive: boolean;
};
export declare function fetchBertSentiment(sentence: string): Promise<Sentiment>;
export declare function bertResultToNumber({ positive }: Sentiment): 1 | -1;
export declare function fetchBertSentimentNumber(text: string): Promise<1 | -1>;
export declare function doesStringContainTag(text: string, tag: any): boolean;
export declare const stringify: (a: any) => string;
export declare const timer: () => (name: string, min?: number | undefined) => number | undefined;
export declare const allSettledFirstFulfilled: <A, B extends Promise<A> = Promise<A>>(args: B[]) => Promise<A | undefined>;
export declare const log: (val: any) => any;
export declare function ellipseText(str: string, { maxLength, ellipse }?: {
	maxLength?: number;
	ellipse?: string;
}): string;
export declare function hasProperty<X extends {}, Y extends PropertyKey>(obj: X, prop: Y): obj is X & Record<Y, unknown>;
export declare function isPresent<T extends Object>(input: null | undefined | T): input is T;
export declare function breakIntoSentences(text: string): string[];

export {};
