diff --git a/node_modules/gqless/dist/Type.d.ts b/node_modules/gqless/dist/Type.d.ts
index 27c8f79..379ee7f 100644
--- a/node_modules/gqless/dist/Type.d.ts
+++ b/node_modules/gqless/dist/Type.d.ts
@@ -50,5 +50,12 @@ declare type ArrayData<TArray extends ValidType[], TExtensions extends Tuple> =
 } : never);
 declare type ScalarData<TScalar extends ScalarType | EnumType, TExtensions extends Tuple> = LastTupleValue<TExtensions> extends never ? TScalar['data'] : LastTupleValue<TExtensions>;
 declare type UnshiftExtension<TExtensions, TType extends ValidType> = keyof TypeExtension<TType> extends never ? TExtensions : UnshiftTuple<TExtensions, TypeExtension<TType>>;
-export declare type TypeData<TType extends ValidType, TExtensions extends Tuple = {}> = TType extends Array<any> ? ArrayData<TType, UnshiftExtension<TExtensions, TType>> : TType extends ScalarType | EnumType ? ScalarData<TType, UnshiftExtension<TExtensions, TType>> : TType extends FieldsType ? FieldsData<TType, UnshiftExtension<TExtensions, TType>> : null;
+
+export declare type TypeData<TType extends ValidType, TExtensions extends Tuple = {}> =
+    TType extends Array<any> ? ArrayData<TType, UnshiftExtension<TExtensions, TType>> :
+        TType extends ScalarType | EnumType ? ScalarData<TType, UnshiftExtension<TExtensions, TType>> :
+            TType extends FieldsType ? FieldsData<TType, UnshiftExtension<TExtensions, TType>> :
+                TType extends FieldsTypeArg<any, infer X> ? X extends Type<any, infer Z> ? Z : X : null;
+
+
 export {};
diff --git a/node_modules/gqless/dist/gqless.cjs.development.js b/node_modules/gqless/dist/gqless.cjs.development.js
index 12268bf..147ae68 100644
--- a/node_modules/gqless/dist/gqless.cjs.development.js
+++ b/node_modules/gqless/dist/gqless.cjs.development.js
@@ -135,7 +135,7 @@ const deepReference = rootValue => {
       onUnreference.filter(v => v === value).then(dispose);
     }; // Handle references created, before watchAndEmit called
 
-
+    if (!parentValue.references) return () => {}
     for (const ref of parentValue.references.keys()) {
       handleReference(ref);
     }
@@ -416,6 +416,7 @@ const buildArguments = ({
 
       if (context) {
         const field = context.node.inputs[key];
+        if (!field) return
         keyContext = {
           node: field.ofNode,
           nullable: field.nullable
@@ -451,7 +452,12 @@ const buildArguments = ({
     if ((context === null || context === void 0 ? void 0 : context.node) instanceof ScalarNode) {
       // Object / Array passed as scalar
       // serialize as a JSON-string
-      return JSON.stringify(JSON.stringify(arg));
+      const json = JSON.stringify(arg)
+      if (json) {
+        return json.replace(/"([^"]+)":/g, '$1:');
+      } else {
+        return
+      }
     }
 
     if (Array.isArray(arg)) {
diff --git a/node_modules/gqless/dist/gqless.esm.js b/node_modules/gqless/dist/gqless.esm.js
index cc6eb3f..fe8be07 100644
--- a/node_modules/gqless/dist/gqless.esm.js
+++ b/node_modules/gqless/dist/gqless.esm.js
@@ -482,6 +482,8 @@ const buildSelections = ({
   const includeTypename = // When no selections or not on ObjectNode
   (!tree.children.length || !(innerNode instanceof ObjectNode)) && // fragments should never need __typename
   !(tree.selection instanceof Fragment);
+  // super fucking weird patch fixes firefox...
+  if (innerNode) innerNode.constructor.name;
   const selections = [includeTypename && '__typename', ...tree.children.map(tree => buildSelectionTree(formatter, tree, variables))].filter(Boolean);
   if (!selections.length) return '';
   return selections.join(LINE_SEPARATOR);
@@ -559,17 +561,27 @@ const memoized =
 createMemo();
 const getAlias = tree => {
   if (!tree.parent) return;
-  const fieldAliases = memoized(() => {
-    const aliases = new Map();
-    let id = 0;
-    tree.parent.children.forEach(siblingTree => {
-      if (!(siblingTree.selection instanceof FieldSelection)) return;
-      if (tree.selection === siblingTree.selection || tree.selection.field !== siblingTree.selection.field) return;
-      aliases.set(tree.selection, `${tree.selection.field.name}__${++id}`);
-    });
-    return aliases;
-  }, [tree.parent, tree.selection.field]);
-  return fieldAliases.get(tree.selection);
+  // const fieldAliases = memoized(() => {
+  //   const aliases = new Map();
+  //   let id = 0;
+  //   tree.parent.children.forEach(siblingTree => {
+  //     if (!(siblingTree.selection instanceof FieldSelection)) return;
+  //     if (tree.selection === siblingTree.selection || tree.selection.field !== siblingTree.selection.field) return;
+  //     aliases.set(tree.selection, `${tree.selection.field.name}__${++id}`);
+  //   });
+  //   return aliases;
+  // }, [tree.parent, tree.selection.field]);
+  // return fieldAliases.get(tree.selection);
+  let id
+  for (const siblingTree of tree.parent.children) {
+    if (!(siblingTree.selection instanceof FieldSelection)) continue;
+    if (tree.selection === siblingTree.selection) continue
+    if (tree.selection.field.name !== siblingTree.selection.field.name) continue;
+    const thisIndex = tree.parent.children.indexOf(tree)
+    id = `${tree.selection.field.name}__${thisIndex}`
+    break
+  }
+  return id
 };
 
 /**
