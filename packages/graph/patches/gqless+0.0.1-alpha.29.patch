diff --git a/node_modules/gqless/dist/Type.d.ts b/node_modules/gqless/dist/Type.d.ts
index 27c8f79..85114f5 100644
--- a/node_modules/gqless/dist/Type.d.ts
+++ b/node_modules/gqless/dist/Type.d.ts
@@ -50,5 +50,12 @@ declare type ArrayData<TArray extends ValidType[], TExtensions extends Tuple> =
 } : never);
 declare type ScalarData<TScalar extends ScalarType | EnumType, TExtensions extends Tuple> = LastTupleValue<TExtensions> extends never ? TScalar['data'] : LastTupleValue<TExtensions>;
 declare type UnshiftExtension<TExtensions, TType extends ValidType> = keyof TypeExtension<TType> extends never ? TExtensions : UnshiftTuple<TExtensions, TypeExtension<TType>>;
-export declare type TypeData<TType extends ValidType, TExtensions extends Tuple = {}> = TType extends Array<any> ? ArrayData<TType, UnshiftExtension<TExtensions, TType>> : TType extends ScalarType | EnumType ? ScalarData<TType, UnshiftExtension<TExtensions, TType>> : TType extends FieldsType ? FieldsData<TType, UnshiftExtension<TExtensions, TType>> : null;
+
+export declare type TypeData<TType extends ValidType, TExtensions extends Tuple = {}> =
+    TType extends Array<any> ? ArrayData<TType, UnshiftExtension<TExtensions, TType>> :
+        TType extends ScalarType | EnumType ? ScalarData<TType, UnshiftExtension<TExtensions, TType>> :
+            TType extends FieldsType ? FieldsData<TType, UnshiftExtension<TExtensions, TType>> :
+                TType extends FieldsTypeArg<any, infer X> ? X extends Type<any, infer Z> ? Z : X : null;
+
+
 export {};
diff --git a/node_modules/gqless/dist/gqless.cjs.development.js b/node_modules/gqless/dist/gqless.cjs.development.js
index 12268bf..16ad852 100644
--- a/node_modules/gqless/dist/gqless.cjs.development.js
+++ b/node_modules/gqless/dist/gqless.cjs.development.js
@@ -451,7 +451,12 @@ const buildArguments = ({
     if ((context === null || context === void 0 ? void 0 : context.node) instanceof ScalarNode) {
       // Object / Array passed as scalar
       // serialize as a JSON-string
-      return JSON.stringify(arg).replace(/"([^"]+)":/g, '$1:');
+      const json = JSON.stringify(arg)
+      if (json) {
+        return json.replace(/"([^"]+)":/g, '$1:');
+      } else {
+        return
+      }
     }

     if (Array.isArray(arg)) {
diff --git a/node_modules/gqless/dist/gqless.esm.js b/node_modules/gqless/dist/gqless.esm.js
index cc6eb3f..70528be 100644
--- a/node_modules/gqless/dist/gqless.esm.js
+++ b/node_modules/gqless/dist/gqless.esm.js
@@ -482,6 +482,8 @@ const buildSelections = ({
   const includeTypename = // When no selections or not on ObjectNode
   (!tree.children.length || !(innerNode instanceof ObjectNode)) && // fragments should never need __typename
   !(tree.selection instanceof Fragment);
+  // super fucking weird patch fixes firefox...
+  if (innerNode) innerNode.constructor.name;
   const selections = [includeTypename && '__typename', ...tree.children.map(tree => buildSelectionTree(formatter, tree, variables))].filter(Boolean);
   if (!selections.length) return '';
   return selections.join(LINE_SEPARATOR);
