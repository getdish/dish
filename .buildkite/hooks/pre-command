#!/bin/bash

set -eo pipefail

if [ "$DISABLE_SETUP" == "true" ]; then
  exit 0
fi

PATH=$PATH:$HOME/bin
mkdir -p $HOME/bin

if ($(which psql > /dev/null)); then
  echo "psql installed"
else
  apt-get update
  apt-get install -y postgresql
fi

if ($(which npm > /dev/null)); then
  echo "node/docker/npm installed"
else
  apt-get update
  apt-get install -y docker docker-compose nodejs npm
  curl -o- -L https://yarnpkg.com/install.sh | bash
fi

if [ ! -f /usr/local/bin/hasura ]; then
  curl -L https://github.com/hasura/graphql-engine/raw/stable/cli/get.sh | bash
fi

docker system prune --force

if ($(which git-crypt > /dev/null)); then
  echo "git-crypt installed"
else
  echo "Decrypting Dish secrets..."
  KEY_PATH=/tmp/gitcrypt-key
  apt-get install -y git-crypt
  echo "$GPG_KEY" > key
  gpg --import key
  gpg --list-keys
  git reset --hard
fi

git-crypt unlock

export PATH=$PATH:"$HOME/bin/google-cloud-sdk/bin"

if ($(which gcloud > /dev/null)); then
  echo "gcloud installed"
  ./dishctl.sh gcloud_init
else
  ./dishctl.sh install_gcloud_sdk
fi

./dishctl.sh dish_docker_login

PWD=$(pwd)
export GOOGLE_APPLICATION_CREDENTIALS="$PWD/k8s/etc/dish-gcloud.enc.json"

# export env
eval $(./dishctl.sh yaml_to_env)
export TF_VAR_DO_SPACES_ID
export TF_VAR_DO_SPACES_SECRET
export TF_VAR_HASURA_GRAPHQL_ADMIN_SECRET
export TF_VAR_SENDGRID_API_KEY
export TF_VAR_UBEREATS_PROXY
export TF_VAR_HEREMAPS_API_TOKEN
export TF_VAR_INFATUATED_PROXY
export TF_VAR_MICHELIN_PROXY
export TF_VAR_YELP_AWS_PROXY
export TF_VAR_TRIPADVISOR_PROXY
export TF_VAR_GOOGLE_SEARCH_PROXY
export TF_VAR_GOOGLE_AWS_PROXY
export TF_VAR_GOOGLE_USERCONTENT_AWS_PROXY
export TF_VAR_DOORDASH_GRAPHQL_AWS_PROXY
export TF_VAR_GRUBHUB_AWS_PROXY
export TF_VAR_YELP_CDN_AWS_PROXY
export TF_VAR_LUMINATI_PROXY_HOST
export TF_VAR_LUMINATI_PROXY_PORT
export TF_VAR_LUMINATI_PROXY_DATACENTRE_USER
export TF_VAR_LUMINATI_PROXY_DATACENTRE_PASSWORD
export TF_VAR_LUMINATI_PROXY_RESIDENTIAL_USER
export TF_VAR_LUMINATI_PROXY_RESIDENTIAL_PASSWORD
export TF_VAR_GPT3_KEY
export SLACK_MONITORING_HOOK

export AWS_ACCESS_KEY_ID=$TF_VAR_DO_SPACES_ID
export AWS_SECRET_ACCESS_KEY=$TF_VAR_DO_SPACES_SECRET

export HASURA_ADMIN_SECRET="$TF_VAR_HASURA_GRAPHQL_ADMIN_SECRET"
