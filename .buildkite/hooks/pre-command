#!/bin/bash

set -eo pipefail

echo "HOME = $HOME"

if [ "$FIRST_STEP" == "true" ]; then
  rm -f exit_this_build || true

  # remove old data cache which can mess up tests db, recreate
  rm -r "$HOME/.dish" || true
  mkdir -p "$HOME/.dish"
  mkdir -p "$HOME/bin"
  mkdir -p /data
else
  if [[ -f "exit_this_build" ]]; then
      SKIP_STEPS=$(cat exit_this_build)
      export SKIP_STEPS
      echo "skipped due to: $SKIP_STEPS"
      exit 1
  fi
fi

if [ "$SHOW_DOCKER_IMAGES" == "true" ]; then
  docker images | head -n 30 || true
  echo "done"
fi

gpg --import "$DISH_KEYS_PATH/teamdish_gpg"
echo "unlocking"
git-crypt unlock

# environment

export PATH=$PATH:$HOME/bin
export FLYCTL_INSTALL="/root/.fly"
export PATH="$FLYCTL_INSTALL/bin:$PATH"

set -a
source .env
set +a

export AWS_ACCESS_KEY_ID=$DO_SPACES_ID
export AWS_SECRET_ACCESS_KEY=$DO_SPACES_SECRET

if [[ "$BUILDKITE_BRANCH" == "nate/dev" || "$BUILDKITE_BRANCH" == "production" ]]; then
  export SHOULD_DEPLOY="1"
fi

# install

if ! [ -x "$(command -v netstat)" ]; then
  apt-get update && apt-get install -y net-tools
fi
echo "netstat installed"

if ! [ -x "$(command -v flyctl)" ]; then
  curl -L https://fly.io/install.sh | sh
fi
echo "flyctl installed"

if ! [ -x "$(command -v psql)" ]; then
  apt-get update && apt-get install -y postgresql-client
fi
echo "psql installed"

if ! [ -x "$(command -v npm)" ]; then
  dpkg --configure -a
  apt-get update && apt-get install -y nodejs npm
  curl -o- -L https://yarnpkg.com/install.sh | bash
fi
echo "npm installed"

if ! [ -x "$(command -v docker)" ]; then
  apt-get update && apt-get install -y docker docker-compose
  echo "docker installed"
fi

if ! [ -x "$(command -v hasura)" ]; then
  curl -L https://github.com/hasura/graphql-engine/raw/stable/cli/get.sh | bash
fi

if [ "$DOCKER_CLEAN_BEFORE" == "true" ]; then
  ./dsh clean_docker_if_disk_full &
fi

if [ ! -f "$HOME/.aws/credentials" ]; then
  echo "setting up aws credentials for space $DO_SPACES_ID"
  mkdir -p "$HOME/.aws"
  cat <<EOF > "$HOME/.aws/credentials"
[default]
aws_access_key_id=$DO_SPACES_ID
aws_secret_access_key=$DO_SPACES_SECRET
EOF
fi

if [ "$FIRST_STEP" == "true" ]; then
  echo "updating fly"
  (flyctl version update || true) && flyctl version &
fi

./dsh dish_registry_auth &

echo "wait for background jobs to finish..."
wait

echo "done"
