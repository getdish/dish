#!/bin/bash
set -eo pipefail

echo "HOME = $HOME"

if [ "$FIRST_STEP" == "true" ]; then
  rm -f exit_this_build || true

  # remove old data cache which can mess up tests db, recreate
  # only do on failure, this is also likely out of date directories
  # rm -r "$HOME/.dish" || true
  # mkdir -p "$HOME/.dish"
  # mkdir -p "$HOME/bin"
  # mkdir -p /data
else
  if [[ -f "exit_this_build" ]]; then
      SKIP_STEPS=$(cat exit_this_build)
      export SKIP_STEPS
      echo "skipped due to: $SKIP_STEPS"
      exit 1
  fi
fi

if [ "$SHOW_DOCKER_IMAGES" == "true" ]; then
  echo "docker images"
  docker images | head -n 30 || true &
  echo "docker ps"
  docker ps &
  echo "done"
fi

./dsh docker_login &

if [ "$DOCKER_CLEAN_BEFORE" == "true" ]; then
  ./dsh clean_docker_if_disk_full &
fi

# if env encrypted, unlock
source .env &> /dev/null || echo "unlocking" \
  && gpg --import "/buildkite-secrets/teamdish_gpg" \
  && git-crypt unlock

# environment

export PATH=$PATH:$HOME/bin

source .env
source .env.test

export AWS_ACCESS_KEY_ID=$DO_SPACES_ID
export AWS_SECRET_ACCESS_KEY=$DO_SPACES_SECRET

if [ ! -f "$HOME/.aws/credentials" ]; then
  echo "setting up aws credentials for space $DO_SPACES_ID"
  mkdir -p "$HOME/.aws"
  cat <<EOF > "$HOME/.aws/credentials"
[default]
aws_access_key_id=$DO_SPACES_ID
aws_secret_access_key=$DO_SPACES_SECRET
EOF
fi

wait

echo "done"
