#!/bin/bash

set -eo pipefail

# env first
# ensure data dir for caches
mkdir -p /data
mkdir -p $HOME/data
PWD=$(pwd)
export PATH=$PATH:$HOME/bin
export FLYCTL_INSTALL="/root/.fly"
export PATH="$FLYCTL_INSTALL/bin:$PATH"

# install second
# bail early on fail
if [ "$FIRST_STEP" == "true" ]; then
  echo $(date -u) "git-crypt..."
  echo "$GPG_KEY" > key
  gpg --import key > gpg-import.log
  git-crypt unlock > gpg-crypt.log
  rm -f exit_this_build || true
else
  if [[ -f "exit_this_build" ]]; then
      SKIP_STEPS=$(cat exit_this_build)
      export SKIP_STEPS
      echo SKIP_STEPS: "$SKIP_STEPS"
      exit 1
  fi
fi

if [ ! -f $(which netstat) ]; then
  apt-get update && apt-get install -y net-tools
fi
echo $(date -u) "netstat installed"

if [ ! -f $(which flyctl) ]; then
  curl -L https://fly.io/install.sh | sh
fi
echo $(date -u) "flyctl installed"

if [ ! -f $(which psql) ]; then
  apt-get update && apt-get install -y postgresql-client
fi
echo $(date -u) "psql installed"

if [ ! -f $(which node) ]; then
  apt-get update && apt-get install -y nodejs
fi
echo $(date -u) "node installed"

if [ ! -f $(which npm) ]; then
  apt-get update && apt-get install -y npm
fi
echo $(date -u) "npm installed"

if [ ! -f $(which docker) ]; then
  apt-get update
  apt-get install -y docker docker-compose nodejs npm
  curl -o- -L https://yarnpkg.com/install.sh | bash
  echo $(date -u) "docker/npm installed"
fi

if [ ! -f /usr/local/bin/hasura ]; then
  curl -L https://github.com/hasura/graphql-engine/raw/stable/cli/get.sh | bash
fi

if [ "$DOCKER_CLEAN_BEFORE" == "true" ]; then
  ./dishctl.sh clean_docker_if_disk_full
fi


mkdir -p $HOME/bin

./dishctl.sh dish_docker_login
echo $(date -u) "docker logged in"

# export env
if [ "$ENV_SET" != "true" ]; then
  eval $(./dishctl.sh yaml_to_env)
  export DO_SPACES_ID
  export DO_SPACES_SECRET
  export HASURA_GRAPHQL_ADMIN_SECRET
  export SENDGRID_API_KEY
  export UBEREATS_PROXY
  export HEREMAPS_API_TOKEN
  export INFATUATED_PROXY
  export MICHELIN_PROXY
  export YELP_AWS_PROXY
  export TRIPADVISOR_PROXY
  export GOOGLE_SEARCH_PROXY
  export GOOGLE_AWS_PROXY
  export GOOGLE_USERCONTENT_AWS_PROXY
  export DOORDASH_GRAPHQL_AWS_PROXY
  export GRUBHUB_AWS_PROXY
  export YELP_CDN_AWS_PROXY
  export LUMINATI_PROXY_HOST
  export LUMINATI_PROXY_PORT
  export LUMINATI_PROXY_DATACENTRE_USER
  export LUMINATI_PROXY_DATACENTRE_PASSWORD
  export LUMINATI_PROXY_RESIDENTIAL_USER
  export LUMINATI_PROXY_RESIDENTIAL_PASSWORD
  export GPT3_KEY
  export SLACK_MONITORING_HOOK
  export AWS_ACCESS_KEY_ID=$DO_SPACES_ID
  export AWS_SECRET_ACCESS_KEY=$DO_SPACES_SECRET
  # i set this up like this for tests, so now keeping it as is
  export USE_PROD_HASURA_PASSWORD=true
  export ENV_SET="true"
fi

echo $(date -u) "done"
