#!/bin/bash

set -eo pipefail

if [ "$FIRST_STEP" == "true" ]; then
  rm -f exit_this_build || true
  # remove dangling images which can mess up pull/push
  docker rmi --force $(docker images --filter "dangling=true" -q --no-trunc) || true
else
  if [[ -f "exit_this_build" ]]; then
      SKIP_STEPS=$(cat exit_this_build)
      export SKIP_STEPS
      echo "skipped due to: $SKIP_STEPS"
      exit 1
  fi
fi

gpg_file="$HOME/.gpg-key"
if [ ! -f "$gpg_file" ]; then
  echo "$GPG_KEY" > /root/.gpg-key
  gpg --import /root/.gpg-key > gpg-import.log
fi

git-crypt unlock > git-crypt.log

# ensure dirs

mkdir -p "$HOME/data"
mkdir -p "$HOME/bin"

# environment

mkdir -p /data

export PATH=$PATH:$HOME/bin
export FLYCTL_INSTALL="/root/.fly"
export PATH="$FLYCTL_INSTALL/bin:$PATH"

set -a
source .env
source .env.production
set +a

export AWS_ACCESS_KEY_ID=$DO_SPACES_ID
export AWS_SECRET_ACCESS_KEY=$DO_SPACES_SECRET
export HASURA_GRAPHQL_ADMIN_SECRET="password"
export USE_PROD_HASURA_PASSWORD=false

# install

if ! [ -x "$(command -v netstat)" ]; then
  apt-get update && apt-get install -y net-tools
fi
echo "netstat installed"

if ! [ -x "$(command -v flyctl)" ]; then
  curl -L https://fly.io/install.sh | sh
fi
echo "flyctl installed"

if ! [ -x "$(command -v psql)" ]; then
  apt-get update && apt-get install -y postgresql-client
fi
echo "psql installed"

if ! [ -x "$(command -v npm)" ]; then
  apt-get update && apt-get install -y nodejs npm
  curl -o- -L https://yarnpkg.com/install.sh | bash
fi
echo "npm installed"

if ! [ -x "$(command -v docker)" ]; then
  apt-get update && apt-get install -y docker docker-compose
  echo "docker installed"
fi

if ! [ -x "$(command -v hasura)" ]; then
  curl -L https://github.com/hasura/graphql-engine/raw/stable/cli/get.sh | bash
fi

if [ "$DOCKER_CLEAN_BEFORE" == "true" ]; then
  ./dishctl.sh clean_docker_if_disk_full
fi

if [ ! -f "$HOME/.aws/credentials" ]; then
  echo "setting up aws credentials for space $DO_SPACES_ID"
  mkdir -p "$HOME/.aws"
  cat <<EOF > "$HOME/.aws/credentials"
[default]
aws_access_key_id=$DO_SPACES_ID
aws_secret_access_key=$DO_SPACES_SECRET
EOF
fi

./dishctl.sh dish_registry_auth

echo "done"
