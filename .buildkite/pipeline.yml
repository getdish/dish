env:
  BUILDKITE_TIMEOUT: "40"
  DISH_ENV: 'test'
  DOCKER_BUILDKIT: 0
  COMPOSE_DOCKER_CLI_BUILD: 0
  DOCKER_CLIENT_TIMEOUT: 360
  COMPOSE_HTTP_TIMEOUT: 360

steps:
  # images that tests need

  - label: ":docker: build base"
    key: base
    command: ./dsh compose_build base

  - label: ":docker: build app"
    key: app
    depends_on: base
    command: ./dsh compose_build app

  # otherwise base can get slowed down, clogging the rest
  - wait

  - label: ":docker: build worker"
    key: worker
    depends_on: base
    command: ./dsh compose_build worker

  - label: ":docker: build run-tests"
    key: run-tests
    depends_on: worker
    command: ./dsh compose_build run-tests

  - label: ":docker: build hooks"
    key: hooks
    depends_on: base
    command: ./dsh compose_build hooks

  - label: ":docker: build site"
    key: site
    depends_on: base
    command: ./dsh compose_build site

  - label: ":docker: build puppet-proxy"
    key: puppet-proxy
    depends_on: base
    command: ./dsh compose_build puppet-proxy

  - label: ":docker: build search"
    key: search
    command: ./dsh compose_build_and_push search

  - label: ":docker: build hasura"
    key: hasura
    command: ./dsh compose_build_and_push hasura

  - label: ":docker: build timescale"
    key: timescale
    command: ./dsh compose_build_and_push timescale

  - label: ":docker: build tileserver"
    key: tileserver
    command: ./dsh compose_build_and_push tileserver

  - label: ":docker: build postgres"
    key: postgres
    command: ./dsh compose_build_and_push postgres

  - label: ":docker: build image-quality"
    key: image-quality
    command: ./dsh compose_build_and_push image-quality

  - label: ":docker: build bert"
    key: bert
    depends_on: base
    command: ./dsh compose_build_and_push bert

  - label: ":docker: build gorse"
    key: gorse
    command: ./dsh compose_build_and_push gorse

  - label: "done with test images"
    command: "true"
    key: test-images
    depends_on:
      - app
      - hooks
      - search
      - hasura
      - bert
      - gorse
      - timescale
      - image-quality
      - tileserver
      - run-tests
      - postgres
      - worker
      - puppet-proxy

  # non test images

  - label: ":docker: build cron"
    key: cron
    depends_on: base
    command: ./dsh compose_build_and_push cron

  - label: ":docker: build summarizer"
    key: summarizer
    command: ./dsh compose_build_and_push summarizer

  # tests

  - label: "setup services for tests"
    key: test-setup
    command: "./dsh setup_test_services"
    timeout_in_minutes: 10
    depends_on:
      - test-images
    retry:
      automatic: true
    env:
      LOG_DOCKER: true
      IS_COMPOSE_RUNNER: true
      DOCKER_CLEAN_ON_FAIL: true
      SHOW_DOCKER_IMAGES: true
      DATA_CLEAR_ON_FAIL: true

  - label: "run tests"
    key: tests
    timeout_in_minutes: 10
    command: "./dsh run_all_tests_in_compose_retry"
    depends_on: test-setup
    env:
      LOG_DOCKER: true
      SHOW_DOCKER_IMAGES: true
      DOCKER_COMPOSE_DOWN: true
      DOCKER_CLEAN: true

  # - label: "run integration test"
  #   command: "./dsh run_integration_tests"

  - wait

  - label: "prepush images to registry"
    if: build.branch == "production" || build.branch == "nate/dev"
    key: push-images
    # note this trick means it runs before the wait
    depends_on: test-images
    command: ./dsh docker_compose_push_core

  - label: "deploy"
    if: build.branch == "production" || build.branch == "nate/dev"
    timeout_in_minutes: 10
    depends_on:
      - tests
      - push-images
    command: "./dsh deploy all"
    artifact_paths:
      - "*.log"

  - wait

  - label: "done"
    if: build.branch == "production" || build.branch == "nate/dev"
    command: "./dsh deploy_done_notify"
    env:
      DOCKER_CLEAN: true
