{
  "version": 3,
  "sources": ["src/index.ts", "src/browser.ts"],
  "sourcesContent": ["import express from 'express'\n\nimport { fetchBrowser } from './browser'\n\nconst queue = new Set<Function>()\nconst app = express()\n\nfunction runInQueue(fn: Function) {\n  return new Promise((res) => {\n    queue.add(async () => {\n      res(await fn())\n    })\n  })\n}\n\nasync function main() {\n  startServer()\n  while (true) {\n    if (queue.size) {\n      const first = [...queue][0]\n      queue.delete(first)\n      await first()\n    } else {\n      await new Promise((res) => setTimeout(res, 100))\n    }\n  }\n}\n\nconst types = {\n  html: 'html',\n  json: 'json',\n  'script-data': 'script-data',\n} as const\n\nfunction startServer() {\n  app.use(async (req, res) => {\n    try {\n      const headers = req.headers ?? {}\n      const url = `${headers['url'] || ''}`\n      console.log('url', url)\n      if (!url) {\n        res.json({ empty: true })\n        return\n      }\n      const type = types[`${headers['parse'] ?? 'html'}`]\n      const options = {\n        selectors: JSON.parse(`${headers['selectors'] || ''}` || 'null'),\n        headers: JSON.parse(`${headers['headers'] || ''}` || 'null'),\n      }\n      console.log(`worker processing ${JSON.stringify({ url, type, options })}`)\n      return res.json(await runInQueue(() => fetchBrowser(url, type, options)))\n    } catch (err) {\n      console.log('error handling request', err.message, err.stack)\n      return res.status(500).json(null)\n    }\n  })\n  console.log('Listening on', 3535)\n  app.listen(3535)\n}\n\nmain()\nconsole.log('start')\n", "import { ChromiumBrowser, Page, chromium, devices } from 'playwright'\n\nif (!process.env.LUMINATI_PROXY_HOST) {\n  throw new Error(`No proxy config`)\n}\n\nconst awsProxies = {\n  'https://ubereats.com/': process.env.UBEREATS_PROXY,\n  'https://yelp.com/': process.env.YELP_AWS_PROXY,\n  'https://m.yelp.com/': process.env.YELP_MOBILE_AWS_PROXY,\n  'https://infatuation.com/': process.env.INFATUATION_PROXY,\n  'https://michelin.com/': process.env.MICHELIN_PROXY,\n  'https://tripadvisor.com/': process.env.TRIPADVISOR_PROXY,\n  'https://google.com/': process.env.GOOGLE_AWS_PROXY,\n  'https://doordash_graphql.com/': process.env.DOORDASH_GRAPHQL_AWS_PROXY,\n  'https://grubhub.com/': process.env.GRUBHUB_AWS_PROXY,\n}\n\nconst baseProxy = {\n  server: `${process.env.LUMINATI_PROXY_HOST}:${process.env.LUMINATI_PROXY_PORT}`,\n  username: process.env.LUMINATI_PROXY_RESIDENTIAL_USER,\n  password: process.env.LUMINATI_PROXY_RESIDENTIAL_USER,\n}\n\nconst instances: {\n  [key: string]: {\n    browser: ChromiumBrowser | null\n    page: Page | null\n    tries: number\n    proxy: null | string | typeof baseProxy\n  }\n} = {}\n\nfunction getProxyURL(full: string, useAWS = false) {\n  let uri = full\n  const proxy = (() => {\n    if (useAWS) {\n      const proxyURI = uri.replace('//www.', '//')\n      for (const key in awsProxies) {\n        if (proxyURI.startsWith(key)) {\n          console.log('Using AWS proxy', key, uri)\n          uri = proxyURI.replace(key, awsProxies[key])\n          return null\n        }\n      }\n      console.error(`No aws proxy found`)\n      return null\n    } else {\n      return baseProxy\n    }\n  })()\n  return {\n    uri,\n    isMobile: full.includes('//m.'),\n    origin: new URL(uri).origin,\n    proxy,\n  }\n}\n\ntype CreateBrowserOpts = { recreate?: boolean; useAWS?: boolean }\n\nasync function ensureInstance(\n  fullURL: string,\n  { recreate = false, useAWS = false }: CreateBrowserOpts = {}\n) {\n  try {\n    const url = getProxyURL(fullURL, useAWS)\n    const instance = instances[url.origin]\n    if (!instance || recreate) {\n      if (instance) {\n        console.log('closing existing...')\n        await instance.browser?.close()\n      }\n      console.log('start browser with', { recreate, useAWS }, url)\n      const browser = await chromium.launch({\n        headless: true,\n        args: ['--no-sandbox', '--disable-dev-shm-usage'],\n        ...(url.proxy && {\n          proxy: url.proxy,\n        }),\n      })\n      const contextConfig = url.isMobile\n        ? {\n            ...devices['iPhone 11 Pro'],\n          }\n        : {}\n      console.log('using context', contextConfig)\n      const context = await browser.newContext(contextConfig)\n      const page = await context.newPage()\n      if (process.env.NODE_ENV === 'production') {\n        console.log('loading origin once first', url.origin)\n        await page.goto(url.origin)\n      }\n      console.log('creating page')\n      instances[url.origin] = {\n        proxy: url.proxy,\n        tries: instance?.tries ?? 0,\n        browser,\n        page,\n      }\n    }\n    return instances[url.origin]!\n  } catch (err: any) {\n    console.log(`Error creating browser instance`, err.message, err.stack)\n    throw err\n  }\n}\n\nasync function getBrowserAndURL(uri: string, retry = 0, userOpts?: CreateBrowserOpts) {\n  const opts = {\n    useAWS: retry > 1 ? true : false,\n    recreate: retry < 1,\n    ...userOpts,\n  }\n  const instance = await ensureInstance(uri, opts)\n  const url = getProxyURL(uri, opts.useAWS)\n  return {\n    instance,\n    url,\n  }\n}\n\nexport async function fetchBrowser(\n  uri: string,\n  type: 'html' | 'json' | 'script-data',\n  {\n    headers,\n    retry = 3,\n    selectors,\n  }: {\n    retry?: number\n    headers?: Object\n    selectors?: string[] | null\n  } = {}\n) {\n  try {\n    if (type === 'script-data') {\n      return await fetchBrowserScriptData(uri, selectors ?? [], retry)\n    }\n    if (type === 'html') {\n      return await fetchBrowserHTML(uri, retry)\n    }\n    return await fetchBrowserJSON(uri, headers, retry)\n  } catch (err: any) {\n    if (retry > 0) {\n      console.log('error fetching', err)\n      console.log(`Trying again (retry ${retry})`)\n      return await fetchBrowser(uri, type, { headers, selectors, retry: retry - 1 })\n    } else {\n      console.error(`Failed: ${err.message}`)\n    }\n  }\n}\n\nexport async function fetchBrowserJSON(uri: string, headers?: { [key: string]: any }, retry = 0) {\n  const { instance, url } = await getBrowserAndURL(uri, retry)\n  if (!instance || !instance.page) throw new Error(`No browser instance`)\n  try {\n    // all except last two attempts, do it inline for less resource usage\n    if (retry > 1) {\n      try {\n        console.log('inline fetch', url)\n        return await timeout(\n          instance.page.evaluate(\n            ({ uri, headers }) => {\n              const allHeaders = Object.assign(\n                {\n                  'content-type': 'application/json',\n                  accept: 'application/json',\n                  'Accept-Encoding': 'br;q=1.0, gzip;q=0.8, *;q=0.1',\n                },\n                headers\n              )\n              return fetch(uri, {\n                headers: allHeaders,\n              }).then((res) => res.json())\n            },\n            {\n              uri: url.uri,\n              headers,\n            }\n          ),\n          10_000\n        )\n      } catch (err: any) {\n        console.error(`Error inline fetching, will try navigating: ${err.message}`)\n        // allow to continue\n      }\n    }\n    console.log('goto url', url.uri)\n    await instance.page.goto(url.uri, {\n      waitUntil: 'domcontentloaded',\n      timeout: 10_000,\n    })\n    console.log('get text content')\n    const out = await instance.page.textContent('body', {\n      timeout: 10_000,\n    })\n    if (out) {\n      console.log('got body', typeof out, out.slice(0, 1000))\n      return JSON.parse(out) as { [key: string]: any }\n    }\n    console.log('got no out')\n  } catch (err) {\n    console.error(`Error: ${err.message}`)\n    if (retry < 2) {\n      console.log('err retry', retry)\n      return await fetchBrowserJSON(uri, headers, retry + 1)\n    }\n    throw err\n  }\n  return null\n}\n\nexport async function fetchBrowserHTML(uri: string, retry = 0) {\n  try {\n    const {\n      instance: { page },\n      url,\n    } = await getBrowserAndURL(uri, retry)\n    if (!page) throw new Error(`No browser instance`)\n    console.log('fetch browser html', uri, retry)\n    await page.goto(url.uri, {\n      timeout: 60_000,\n    })\n    const content = await page.content()\n    console.log('returning html content', content.slice(0, 50) + '...')\n    return content\n  } catch (err) {\n    console.error(`Error: ${err.message}`)\n    throw err\n  }\n}\n\nexport async function fetchBrowserScriptData(uri: string, selectors: string[], retry = 0) {\n  const {\n    instance: { page },\n    url,\n  } = await getBrowserAndURL(uri, retry)\n  if (!page) throw new Error(`No browser instance`)\n  console.log('fetch browser hyperscript', uri, retry)\n  await page.goto(url.uri, {\n    waitUntil: 'domcontentloaded',\n    timeout: 60_000,\n  })\n\n  let results: any[] = []\n\n  console.log('script selectors', selectors)\n  if (!selectors) {\n    console.log('error no selectors')\n    return\n  }\n\n  for (const selector of selectors) {\n    const handles = await page.$$(selector)\n    if (handles) {\n      results.push(\n        await Promise.all(\n          handles.map(async (handle) => {\n            try {\n              const isHyperscript = !!(await handle.getAttribute('data-hypernova-key'))\n              if (isHyperscript) {\n                const textContent = await handle.textContent()\n                if (!textContent) {\n                  return null\n                }\n                console.log('got hyperscript, parsing..', textContent.slice(0, 50) + '...')\n                return hyperDecode(textContent)\n              }\n              const isLDJSON = (await handle.getAttribute('type')) == 'application/ld+json'\n              if (isLDJSON) {\n                const textContent = await handle.textContent()\n                if (!textContent) {\n                  return null\n                }\n                console.log('got ldjson')\n                return JSON.parse(textContent)\n              }\n              return await handle.innerHTML()\n            } catch (err) {\n              console.log('error processing handle', err.message, err.stack)\n              return null\n            }\n          })\n        )\n      )\n    }\n  }\n\n  return results\n}\n\nfunction hyperDecode(jsonPayload: string) {\n  return decode(jsonPayload.slice(LEFT.length, jsonPayload.length - RIGHT.length))\n}\nconst LEFT = '<!--'\nconst RIGHT = '-->'\nconst ENCODE = [\n  ['&', '&amp;'],\n  ['>', '&gt;'],\n]\nfunction decode(res) {\n  const jsonPayload = ENCODE.reduceRight((str, coding) => {\n    const [encodeChar, htmlEntity] = coding\n    return str.replace(new RegExp(htmlEntity, 'g'), encodeChar)\n  }, res)\n\n  return JSON.parse(jsonPayload)\n}\n\nasync function timeout<A extends Promise<any>>(promise: A, time = 0): Promise<any> {\n  const failed = Symbol()\n  let tm\n  // @ts-ignore\n  const res = await Promise.race([\n    promise,\n    new Promise((res) => {\n      tm = setTimeout(() => res(failed), time)\n    }),\n  ])\n  if (res === failed) {\n    throw new Error(`Timed out in ${time}ms`)\n  }\n  clearTimeout(tm)\n  return res\n}\n"],
  "mappings": "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",
  "names": []
}
