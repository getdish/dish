diff --git a/b/javascript/components/AbstractLayer.js b/b/javascript/components/AbstractLayer.js
new file mode 100644
index 0000000000000000000000000000000000000000..51b1d4f579e2b30b2e3336b7f7a6ab7d8a8bf8a1
--- /dev/null
+++ b/b/javascript/components/AbstractLayer.js
@@ -0,0 +1,28 @@
+/* eslint react/prop-types:0  */
+import React from 'react';
+import { processColor } from 'react-native';
+import { getFilter } from '../utils/filterUtils';
+import { transformStyle } from '../utils/StyleValue';
+class AbstractLayer extends React.PureComponent {
+    get baseProps() {
+        return Object.assign(Object.assign({}, this.props), { id: this.props.id, sourceID: this.props.sourceID, reactStyle: this.getStyle(), minZoomLevel: this.props.minZoomLevel, maxZoomLevel: this.props.maxZoomLevel, aboveLayerID: this.props.aboveLayerID, belowLayerID: this.props.belowLayerID, layerIndex: this.props.layerIndex, filter: getFilter(this.props.filter), style: undefined });
+    }
+    getStyleTypeFormatter(styleType) {
+        if (styleType === 'color') {
+            return processColor;
+        }
+    }
+    getStyle() {
+        return transformStyle(this.props.style);
+    }
+    setNativeProps(props) {
+        if (this.refs.nativeLayer) {
+            let propsToPass = props;
+            if (props.style) {
+                propsToPass = Object.assign(Object.assign({}, props), { reactStyle: this.getStyle(props.style) });
+            }
+            this.refs.nativeLayer.setNativeProps(propsToPass);
+        }
+    }
+}
+export default AbstractLayer;
diff --git a/b/javascript/components/AbstractSource.js b/b/javascript/components/AbstractSource.js
new file mode 100644
index 0000000000000000000000000000000000000000..4ed16eb2644be9386119e2406dafce6722a96133
--- /dev/null
+++ b/b/javascript/components/AbstractSource.js
@@ -0,0 +1,14 @@
+import React from 'react';
+class AbstractSource extends React.PureComponent {
+    setNativeProps(props) {
+        if (this._nativeRef) {
+            this._nativeRef.setNativeProps(props);
+        }
+        else {
+            if (this.refs.nativeSource) {
+                this.refs.nativeSource.setNativeProps(props);
+            }
+        }
+    }
+}
+export default AbstractSource;
diff --git a/b/javascript/components/Atmosphere.js b/b/javascript/components/Atmosphere.js
new file mode 100644
index 0000000000000000000000000000000000000000..f554016ee9bd92395c327495ed6d0a650df38707
--- /dev/null
+++ b/b/javascript/components/Atmosphere.js
@@ -0,0 +1,11 @@
+import React, { memo, useMemo } from 'react';
+import { requireNativeComponent } from 'react-native';
+import { transformStyle } from '../utils/StyleValue';
+export const NATIVE_MODULE_NAME = 'RCTMGLAtmosphere';
+export const Atmosphere = memo((props) => {
+    const baseProps = useMemo(() => {
+        return Object.assign(Object.assign({}, props), { reactStyle: transformStyle(props.style), style: undefined });
+    }, [props]);
+    return <RCTMGLAtmosphere {...baseProps}/>;
+});
+const RCTMGLAtmosphere = requireNativeComponent(NATIVE_MODULE_NAME);
diff --git a/b/javascript/components/BackgroundLayer.js b/b/javascript/components/BackgroundLayer.js
new file mode 100644
index 0000000000000000000000000000000000000000..7ea3a6f59043f7e12712c737377402c6dde0c45a
--- /dev/null
+++ b/b/javascript/components/BackgroundLayer.js
@@ -0,0 +1,66 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import { NativeModules, requireNativeComponent } from 'react-native';
+import { viewPropTypes } from '../utils';
+import { BackgroundLayerStyleProp } from '../utils/styleMap';
+import AbstractLayer from './AbstractLayer';
+const MapboxGL = NativeModules.MGLModule;
+export const NATIVE_MODULE_NAME = 'RCTMGLBackgroundLayer';
+class BackgroundLayer extends AbstractLayer {
+    render() {
+        return (<RCTMGLBackgroundLayer testID="rctmglBackgroundLayer" ref="nativeLayer" {...this.baseProps}/>);
+    }
+}
+BackgroundLayer.propTypes = Object.assign(Object.assign({}, viewPropTypes), { 
+    /**
+     * A string that uniquely identifies the source in the style to which it is added.
+     */
+    id: PropTypes.string.isRequired, 
+    /**
+     * The source from which to obtain the data to style.
+     * If the source has not yet been added to the current style, the behavior is undefined.
+     * Inferred from parent source only if the layer is a direct child to it.
+     */
+    sourceID: PropTypes.string, 
+    /**
+     * Identifier of the layer within the source identified by the sourceID property from which the receiver obtains the data to style.
+     */
+    sourceLayerID: PropTypes.string, 
+    /**
+     * Inserts a layer above aboveLayerID.
+     */
+    aboveLayerID: PropTypes.string, 
+    /**
+     * Inserts a layer below belowLayerID
+     */
+    belowLayerID: PropTypes.string, 
+    /**
+     * Inserts a layer at a specified index
+     */
+    layerIndex: PropTypes.number, 
+    /**
+     *  Filter only the features in the source layer that satisfy a condition that you define
+     */
+    filter: PropTypes.array, 
+    /**
+     * The minimum zoom level at which the layer gets parsed and appears.
+     */
+    minZoomLevel: PropTypes.number, 
+    /**
+     * The maximum zoom level at which the layer gets parsed and appears.
+     */
+    maxZoomLevel: PropTypes.number, 
+    /**
+     * Customizable style attributes
+     */
+    style: PropTypes.oneOfType([
+        BackgroundLayerStyleProp,
+        PropTypes.arrayOf(BackgroundLayerStyleProp),
+    ]) });
+BackgroundLayer.defaultProps = {
+    sourceID: MapboxGL.StyleSource.DefaultSourceID,
+};
+const RCTMGLBackgroundLayer = requireNativeComponent(NATIVE_MODULE_NAME, BackgroundLayer, {
+    nativeOnly: { reactStyle: true },
+});
+export default BackgroundLayer;
diff --git a/b/javascript/components/Callout.js b/b/javascript/components/Callout.js
new file mode 100644
index 0000000000000000000000000000000000000000..d0bb00a404f699d5d53343e78c81966af673b860
--- /dev/null
+++ b/b/javascript/components/Callout.js
@@ -0,0 +1,108 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import { View, Text, Animated, requireNativeComponent, StyleSheet, } from 'react-native';
+import { viewPropTypes } from '../utils';
+export const NATIVE_MODULE_NAME = 'RCTMGLCallout';
+const styles = StyleSheet.create({
+    container: {
+        alignItems: 'center',
+        justifyContent: 'center',
+        width: 180,
+        zIndex: 9999999,
+    },
+    tip: {
+        zIndex: 1000,
+        marginTop: -2,
+        elevation: 0,
+        backgroundColor: 'transparent',
+        borderTopWidth: 16,
+        borderRightWidth: 8,
+        borderBottomWidth: 0,
+        borderLeftWidth: 8,
+        borderTopColor: 'white',
+        borderRightColor: 'transparent',
+        borderBottomColor: 'transparent',
+        borderLeftColor: 'transparent',
+    },
+    content: {
+        position: 'relative',
+        padding: 8,
+        flex: 1,
+        borderRadius: 3,
+        borderWidth: 1,
+        borderColor: 'rgba(0, 0, 0, 0.2)',
+        backgroundColor: 'white',
+    },
+    title: {
+        color: 'black',
+        textAlign: 'center',
+    },
+});
+/**
+ *  Callout that displays information about a selected annotation near the annotation.
+ */
+class Callout extends React.PureComponent {
+    get _containerStyle() {
+        return [
+            {
+                position: 'absolute',
+                zIndex: 999,
+                backgroundColor: 'transparent',
+            },
+            this.props.containerStyle,
+        ];
+    }
+    get _hasChildren() {
+        return React.Children.count(this.props.children) > 0;
+    }
+    _renderDefaultCallout() {
+        return (<Animated.View style={[styles.container, this.props.style]}>
+        <View style={[styles.content, this.props.contentStyle]}>
+          <Text style={[styles.title, this.props.textStyle]}>
+            {this.props.title}
+          </Text>
+        </View>
+        <View style={[styles.tip, this.props.tipStyle]}/>
+      </Animated.View>);
+    }
+    _renderCustomCallout() {
+        return (<Animated.View {...this.props} style={this.props.style}>
+        {this.props.children}
+      </Animated.View>);
+    }
+    render() {
+        const calloutContent = this._hasChildren
+            ? this._renderCustomCallout()
+            : this._renderDefaultCallout();
+        return (<RCTMGLCallout style={this._containerStyle}>
+        {calloutContent}
+      </RCTMGLCallout>);
+    }
+}
+Callout.propTypes = Object.assign(Object.assign({}, viewPropTypes), { 
+    /**
+     * String that get's displayed in the default callout.
+     */
+    title: PropTypes.string, 
+    /**
+     * Style property for the Animated.View wrapper, apply animations to this
+     */
+    style: PropTypes.any, 
+    /**
+     * Style property for the native RCTMGLCallout container, set at your own risk.
+     */
+    containerStyle: PropTypes.any, 
+    /**
+     * Style property for the content bubble.
+     */
+    contentStyle: PropTypes.any, 
+    /**
+     * Style property for the triangle tip under the content.
+     */
+    tipStyle: PropTypes.any, 
+    /**
+     * Style property for the title in the content bubble.
+     */
+    textStyle: PropTypes.any });
+const RCTMGLCallout = requireNativeComponent(NATIVE_MODULE_NAME, Callout);
+export default Callout;
diff --git a/b/javascript/components/Camera.js b/b/javascript/components/Camera.js
new file mode 100644
index 0000000000000000000000000000000000000000..04952b60bb3dbe25c7246131d1752a4d8844f830
--- /dev/null
+++ b/b/javascript/components/Camera.js
@@ -0,0 +1,286 @@
+import React, { forwardRef, memo, useCallback, useImperativeHandle, useMemo, useRef, } from 'react';
+import { NativeModules, requireNativeComponent } from 'react-native';
+import { makeLatLngBounds, makePoint } from '../utils/geoUtils';
+const NativeModule = NativeModules.MGLModule;
+/**
+ * Converts the provided React Native animation mode into the corresponding native enum value.
+ */
+const nativeAnimationMode = (mode) => {
+    const NativeCameraModes = NativeModule.CameraModes;
+    switch (mode) {
+        case 'flyTo':
+            return NativeCameraModes.Flight;
+        case 'easeTo':
+            return NativeCameraModes.Ease;
+        case 'linearTo':
+            return NativeCameraModes.Linear;
+        case 'moveTo':
+            return NativeCameraModes.Move;
+        case 'none':
+            return NativeCameraModes.None;
+        default:
+            return NativeCameraModes.Ease;
+    }
+};
+export const NATIVE_MODULE_NAME = 'RCTMGLCamera';
+/**
+ * Controls the perspective from which the user sees the map.
+ *
+ * To use imperative methods, pass in a ref object:
+ *
+ * ```
+ * const camera = useRef<Camera>(null);
+ *
+ * useEffect(() => {
+ *   camera.current?.setCamera({
+ *     centerCoordinate: [lon, lat],
+ *   });
+ * }, []);
+ *
+ * return (
+ *   <Camera ref={camera} />
+ * );
+ * ```
+ */
+export const Camera = memo(forwardRef((props, ref) => {
+    const { centerCoordinate, bounds, heading, pitch, zoomLevel, padding, animationDuration, animationMode, minZoomLevel, maxZoomLevel, maxBounds, followUserLocation, followUserMode, followZoomLevel, followPitch, followHeading, defaultSettings, allowUpdates = true, triggerKey, onUserTrackingModeChange, } = props;
+    // @ts-expect-error This avoids a type/value mismatch.
+    const nativeCamera = useRef(null);
+    const buildNativeStop = useCallback((stop, ignoreFollowUserLocation = false) => {
+        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
+        stop = Object.assign(Object.assign({}, stop), { type: 'CameraStop' });
+        if (props.followUserLocation && !ignoreFollowUserLocation) {
+            return null;
+        }
+        const _nativeStop = {};
+        if (stop.pitch !== undefined)
+            _nativeStop.pitch = stop.pitch;
+        if (stop.heading !== undefined)
+            _nativeStop.heading = stop.heading;
+        if (stop.zoomLevel !== undefined)
+            _nativeStop.zoom = stop.zoomLevel;
+        if (stop.animationMode !== undefined)
+            _nativeStop.mode = nativeAnimationMode(stop.animationMode);
+        if (stop.animationDuration !== undefined)
+            _nativeStop.duration = stop.animationDuration;
+        if (stop.centerCoordinate) {
+            _nativeStop.centerCoordinate = JSON.stringify(makePoint(stop.centerCoordinate));
+        }
+        if (stop.bounds && stop.bounds.ne && stop.bounds.sw) {
+            const { ne, sw } = stop.bounds;
+            _nativeStop.bounds = JSON.stringify(makeLatLngBounds(ne, sw));
+        }
+        _nativeStop.paddingTop =
+            (_d = (_b = (_a = stop.padding) === null || _a === void 0 ? void 0 : _a.paddingTop) !== null && _b !== void 0 ? _b : (_c = stop.bounds) === null || _c === void 0 ? void 0 : _c.paddingTop) !== null && _d !== void 0 ? _d : 0;
+        _nativeStop.paddingRight =
+            (_h = (_f = (_e = stop.padding) === null || _e === void 0 ? void 0 : _e.paddingRight) !== null && _f !== void 0 ? _f : (_g = stop.bounds) === null || _g === void 0 ? void 0 : _g.paddingRight) !== null && _h !== void 0 ? _h : 0;
+        _nativeStop.paddingBottom =
+            (_m = (_k = (_j = stop.padding) === null || _j === void 0 ? void 0 : _j.paddingBottom) !== null && _k !== void 0 ? _k : (_l = stop.bounds) === null || _l === void 0 ? void 0 : _l.paddingBottom) !== null && _m !== void 0 ? _m : 0;
+        _nativeStop.paddingLeft =
+            (_r = (_p = (_o = stop.padding) === null || _o === void 0 ? void 0 : _o.paddingLeft) !== null && _p !== void 0 ? _p : (_q = stop.bounds) === null || _q === void 0 ? void 0 : _q.paddingLeft) !== null && _r !== void 0 ? _r : 0;
+        return _nativeStop;
+    }, [props.followUserLocation]);
+    const nativeDefaultStop = useMemo(() => {
+        if (!defaultSettings) {
+            return null;
+        }
+        return buildNativeStop(defaultSettings);
+    }, [defaultSettings, buildNativeStop]);
+    const nativeStop = useMemo(() => {
+        return buildNativeStop({
+            type: 'CameraStop',
+            centerCoordinate,
+            bounds,
+            heading,
+            pitch,
+            zoomLevel,
+            padding,
+            animationDuration,
+            animationMode,
+        });
+    }, [
+        centerCoordinate,
+        bounds,
+        heading,
+        pitch,
+        zoomLevel,
+        padding,
+        animationDuration,
+        animationMode,
+        buildNativeStop,
+    ]);
+    const nativeMaxBounds = useMemo(() => {
+        if (!(maxBounds === null || maxBounds === void 0 ? void 0 : maxBounds.ne) || !(maxBounds === null || maxBounds === void 0 ? void 0 : maxBounds.sw)) {
+            return null;
+        }
+        return JSON.stringify(makeLatLngBounds(maxBounds.ne, maxBounds.sw));
+    }, [maxBounds]);
+    const _setCamera = (config) => {
+        if (!allowUpdates) {
+            return;
+        }
+        if (!config.type)
+            // @ts-expect-error The compiler doesn't understand that the `config` union type is guaranteed
+            // to be an object type.
+            config = Object.assign(Object.assign({}, config), { 
+                // @ts-expect-error Allows JS files to pass in an invalid config (lacking the `type` property),
+                // which would raise a compilation error in TS files.
+                type: config.stops ? 'CameraStops' : 'CameraStop' });
+        if (config.type === 'CameraStops') {
+            for (const _stop of config.stops) {
+                let _nativeStops = [];
+                const _nativeStop = buildNativeStop(_stop);
+                if (_nativeStop) {
+                    _nativeStops = [..._nativeStops, _nativeStop];
+                }
+                nativeCamera.current.setNativeProps({
+                    stop: { stops: _nativeStops },
+                });
+            }
+        }
+        else if (config.type === 'CameraStop') {
+            const _nativeStop = buildNativeStop(config);
+            if (_nativeStop) {
+                nativeCamera.current.setNativeProps({ stop: _nativeStop });
+            }
+        }
+    };
+    const setCamera = useCallback(_setCamera, [
+        allowUpdates,
+        buildNativeStop,
+    ]);
+    const _fitBounds = (ne, sw, paddingConfig = 0, _animationDuration = 0) => {
+        let _padding = {
+            paddingTop: 0,
+            paddingBottom: 0,
+            paddingLeft: 0,
+            paddingRight: 0,
+        };
+        if (typeof paddingConfig === 'object') {
+            if (paddingConfig.length === 2) {
+                _padding = {
+                    paddingTop: paddingConfig[0],
+                    paddingBottom: paddingConfig[0],
+                    paddingLeft: paddingConfig[1],
+                    paddingRight: paddingConfig[1],
+                };
+            }
+            else if (paddingConfig.length === 4) {
+                _padding = {
+                    paddingTop: paddingConfig[0],
+                    paddingBottom: paddingConfig[2],
+                    paddingLeft: paddingConfig[3],
+                    paddingRight: paddingConfig[1],
+                };
+            }
+        }
+        else if (typeof paddingConfig === 'number') {
+            _padding = {
+                paddingTop: paddingConfig,
+                paddingBottom: paddingConfig,
+                paddingLeft: paddingConfig,
+                paddingRight: paddingConfig,
+            };
+        }
+        setCamera({
+            type: 'CameraStop',
+            bounds: {
+                ne,
+                sw,
+            },
+            padding: _padding,
+            animationDuration: _animationDuration,
+            animationMode: 'easeTo',
+        });
+    };
+    const fitBounds = useCallback(_fitBounds, [setCamera]);
+    const _flyTo = (_centerCoordinate, _animationDuration = 2000) => {
+        setCamera({
+            type: 'CameraStop',
+            centerCoordinate: _centerCoordinate,
+            animationDuration: _animationDuration,
+        });
+    };
+    const flyTo = useCallback(_flyTo, [setCamera]);
+    const _moveTo = (_centerCoordinate, _animationDuration = 0) => {
+        setCamera({
+            type: 'CameraStop',
+            centerCoordinate: _centerCoordinate,
+            animationDuration: _animationDuration,
+            animationMode: 'easeTo',
+        });
+    };
+    const moveTo = useCallback(_moveTo, [setCamera]);
+    const _zoomTo = (_zoomLevel, _animationDuration = 2000) => {
+        setCamera({
+            type: 'CameraStop',
+            zoomLevel: _zoomLevel,
+            animationDuration: _animationDuration,
+            animationMode: 'flyTo',
+        });
+    };
+    const zoomTo = useCallback(_zoomTo, [setCamera]);
+    useImperativeHandle(ref, () => ({
+        /**
+         * Sets any camera properties, with default fallbacks if unspecified.
+         *
+         * @example
+         * camera.current?.setCamera({
+         *   centerCoordinate: [lon, lat],
+         * });
+         *
+         * @param {CameraStop | CameraStops} config
+         */
+        setCamera,
+        /**
+         * Set the camera position to enclose the provided bounds, with optional
+         * padding and duration.
+         *
+         * @example
+         * camera.fitBounds([lon, lat], [lon, lat]);
+         * camera.fitBounds([lon, lat], [lon, lat], [20, 0], 1000);
+         *
+         * @param {Position} ne Northeast coordinate of bounding box
+         * @param {Position} sw Southwest coordinate of bounding box
+         * @param {number | number[]} paddingConfig The viewport padding, specified as a number (all sides equal), a 2-item array ([vertical, horizontal]), or a 4-item array ([top, right, bottom, left])
+         * @param {number} animationDuration The transition duration
+         */
+        fitBounds,
+        /**
+         * Sets the camera to center around the provided coordinate using a realistic 'travel'
+         * animation, with optional duration.
+         *
+         * @example
+         * camera.flyTo([lon, lat]);
+         * camera.flyTo([lon, lat], 12000);
+         *
+         *  @param {Position} centerCoordinate The coordinate to center in the view
+         *  @param {number} animationDuration The transition duration
+         */
+        flyTo,
+        /**
+         * Sets the camera to center around the provided coordinate, with optional duration.
+         *
+         * @example
+         * camera.moveTo([lon, lat], 200);
+         * camera.moveTo([lon, lat]);
+         *
+         *  @param {Position} centerCoordinate The coordinate to center in the view
+         *  @param {number} animationDuration The transition duration
+         */
+        moveTo,
+        /**
+         * Zooms the camera to the provided level, with optional duration.
+         *
+         * @example
+         * camera.zoomTo(16);
+         * camera.zoomTo(16, 100);
+         *
+         * @param {number} zoomLevel The target zoom
+         * @param {number} animationDuration The transition duration
+         */
+        zoomTo,
+    }));
+    return (<RCTMGLCamera testID={'Camera'} ref={nativeCamera} stop={nativeStop} animationDuration={animationDuration} animationMode={animationMode} defaultStop={nativeDefaultStop} followUserLocation={followUserLocation} followUserMode={followUserMode} followPitch={followPitch} followHeading={followHeading} followZoomLevel={followZoomLevel} minZoomLevel={minZoomLevel} maxZoomLevel={maxZoomLevel} maxBounds={nativeMaxBounds} onUserTrackingModeChange={onUserTrackingModeChange}/>);
+}));
+const RCTMGLCamera = requireNativeComponent(NATIVE_MODULE_NAME);
diff --git a/b/javascript/components/CircleLayer.js b/b/javascript/components/CircleLayer.js
new file mode 100644
index 0000000000000000000000000000000000000000..8372ac0a77a2b1e37639d14646ed29dd198085da
--- /dev/null
+++ b/b/javascript/components/CircleLayer.js
@@ -0,0 +1,70 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import { NativeModules, requireNativeComponent } from 'react-native';
+import { viewPropTypes } from '../utils';
+import { CircleLayerStyleProp } from '../utils/styleMap';
+import AbstractLayer from './AbstractLayer';
+const MapboxGL = NativeModules.MGLModule;
+export const NATIVE_MODULE_NAME = 'RCTMGLCircleLayer';
+/**
+ * CircleLayer is a style layer that renders one or more filled circles on the map.
+ */
+class CircleLayer extends AbstractLayer {
+    render() {
+        return (<RCTMGLCircleLayer testID="rctmglCircleLayer" ref="nativeLayer" {...this.baseProps}/>);
+    }
+}
+CircleLayer.propTypes = Object.assign(Object.assign({}, viewPropTypes), { 
+    /**
+     * A string that uniquely identifies the source in the style to which it is added.
+     */
+    id: PropTypes.string.isRequired, 
+    /**
+     * The source from which to obtain the data to style.
+     * If the source has not yet been added to the current style, the behavior is undefined.
+     * Inferred from parent source only if the layer is a direct child to it.
+     */
+    sourceID: PropTypes.string, 
+    /**
+     * Identifier of the layer within the source identified by the sourceID property
+     * from which the receiver obtains the data to style.
+     */
+    sourceLayerID: PropTypes.string, 
+    /**
+     * Inserts a layer above aboveLayerID.
+     */
+    aboveLayerID: PropTypes.string, 
+    /**
+     * Inserts a layer below belowLayerID
+     */
+    belowLayerID: PropTypes.string, 
+    /**
+     * Inserts a layer at a specified index
+     */
+    layerIndex: PropTypes.number, 
+    /**
+     *  Filter only the features in the source layer that satisfy a condition that you define
+     */
+    filter: PropTypes.array, 
+    /**
+     * The minimum zoom level at which the layer gets parsed and appears.
+     */
+    minZoomLevel: PropTypes.number, 
+    /**
+     * The maximum zoom level at which the layer gets parsed and appears.
+     */
+    maxZoomLevel: PropTypes.number, 
+    /**
+     * Customizable style attributes
+     */
+    style: PropTypes.oneOfType([
+        CircleLayerStyleProp,
+        PropTypes.arrayOf(CircleLayerStyleProp),
+    ]) });
+CircleLayer.defaultProps = {
+    sourceID: MapboxGL.StyleSource.DefaultSourceID,
+};
+const RCTMGLCircleLayer = requireNativeComponent(NATIVE_MODULE_NAME, CircleLayer, {
+    nativeOnly: { reactStyle: true },
+});
+export default CircleLayer;
diff --git a/b/javascript/components/FillExtrusionLayer.js b/b/javascript/components/FillExtrusionLayer.js
new file mode 100644
index 0000000000000000000000000000000000000000..a01400ca6a15ab761ff43cd53e89ed3997b35649
--- /dev/null
+++ b/b/javascript/components/FillExtrusionLayer.js
@@ -0,0 +1,70 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import { NativeModules, requireNativeComponent } from 'react-native';
+import { viewPropTypes } from '../utils';
+import { FillExtrusionLayerStyleProp } from '../utils/styleMap';
+import AbstractLayer from './AbstractLayer';
+const MapboxGL = NativeModules.MGLModule;
+export const NATIVE_MODULE_NAME = 'RCTMGLFillExtrusionLayer';
+/**
+ * FillExtrusionLayer is a style layer that renders one or more 3D extruded polygons on the map.
+ */
+class FillExtrusionLayer extends AbstractLayer {
+    render() {
+        const props = Object.assign(Object.assign({}, this.baseProps), { sourceLayerID: this.props.sourceLayerID });
+        return <RCTMGLFillExtrusionLayer ref="nativeLayer" {...props}/>;
+    }
+}
+FillExtrusionLayer.propTypes = Object.assign(Object.assign({}, viewPropTypes), { 
+    /**
+     * A string that uniquely identifies the source in the style to which it is added.
+     */
+    id: PropTypes.string.isRequired, 
+    /**
+     * The source from which to obtain the data to style.
+     * If the source has not yet been added to the current style, the behavior is undefined.
+     * Inferred from parent source only if the layer is a direct child to it.
+     */
+    sourceID: PropTypes.string, 
+    /**
+     * Identifier of the layer within the source identified by the sourceID property from which the receiver obtains the data to style.
+     */
+    sourceLayerID: PropTypes.string, 
+    /**
+     * Inserts a layer above aboveLayerID.
+     */
+    aboveLayerID: PropTypes.string, 
+    /**
+     * Inserts a layer below belowLayerID
+     */
+    belowLayerID: PropTypes.string, 
+    /**
+     * Inserts a layer at a specified index
+     */
+    layerIndex: PropTypes.number, 
+    /**
+     *  Filter only the features in the source layer that satisfy a condition that you define
+     */
+    filter: PropTypes.array, 
+    /**
+     * The minimum zoom level at which the layer gets parsed and appears.
+     */
+    minZoomLevel: PropTypes.number, 
+    /**
+     * The maximum zoom level at which the layer gets parsed and appears.
+     */
+    maxZoomLevel: PropTypes.number, 
+    /**
+     * Customizable style attributes
+     */
+    style: PropTypes.oneOfType([
+        FillExtrusionLayerStyleProp,
+        PropTypes.arrayOf(FillExtrusionLayerStyleProp),
+    ]) });
+FillExtrusionLayer.defaultProps = {
+    sourceID: MapboxGL.StyleSource.DefaultSourceID,
+};
+const RCTMGLFillExtrusionLayer = requireNativeComponent(NATIVE_MODULE_NAME, FillExtrusionLayer, {
+    nativeOnly: { reactStyle: true },
+});
+export default FillExtrusionLayer;
diff --git a/b/javascript/components/FillLayer.js b/b/javascript/components/FillLayer.js
new file mode 100644
index 0000000000000000000000000000000000000000..567fe82538a0241ddb2d89ac7c0374d2b1697ba0
--- /dev/null
+++ b/b/javascript/components/FillLayer.js
@@ -0,0 +1,70 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import { NativeModules, requireNativeComponent } from 'react-native';
+import { viewPropTypes } from '../utils';
+import { FillLayerStyleProp } from '../utils/styleMap';
+import AbstractLayer from './AbstractLayer';
+const MapboxGL = NativeModules.MGLModule;
+export const NATIVE_MODULE_NAME = 'RCTMGLFillLayer';
+/**
+ * FillLayer is a style layer that renders one or more filled (and optionally stroked) polygons on the map.
+ */
+class FillLayer extends AbstractLayer {
+    render() {
+        const props = Object.assign(Object.assign({}, this.baseProps), { sourceLayerID: this.props.sourceLayerID });
+        return <RCTMGLFillLayer ref="nativeLayer" {...props}/>;
+    }
+}
+FillLayer.propTypes = Object.assign(Object.assign({}, viewPropTypes), { 
+    /**
+     * A string that uniquely identifies the source in the style to which it is added.
+     */
+    id: PropTypes.string.isRequired, 
+    /**
+     * The source from which to obtain the data to style.
+     * If the source has not yet been added to the current style, the behavior is undefined.
+     * Inferred from parent source only if the layer is a direct child to it.
+     */
+    sourceID: PropTypes.string, 
+    /**
+     * Identifier of the layer within the source identified by the sourceID property from which the receiver obtains the data to style.
+     */
+    sourceLayerID: PropTypes.string, 
+    /**
+     * Inserts a layer above aboveLayerID.
+     */
+    aboveLayerID: PropTypes.string, 
+    /**
+     * Inserts a layer below belowLayerID
+     */
+    belowLayerID: PropTypes.string, 
+    /**
+     * Inserts a layer at a specified index
+     */
+    layerIndex: PropTypes.number, 
+    /**
+     *  Filter only the features in the source layer that satisfy a condition that you define
+     */
+    filter: PropTypes.array, 
+    /**
+     * The minimum zoom level at which the layer gets parsed and appears.
+     */
+    minZoomLevel: PropTypes.number, 
+    /**
+     * The maximum zoom level at which the layer gets parsed and appears.
+     */
+    maxZoomLevel: PropTypes.number, 
+    /**
+     * Customizable style attributes
+     */
+    style: PropTypes.oneOfType([
+        FillLayerStyleProp,
+        PropTypes.arrayOf(FillLayerStyleProp),
+    ]) });
+FillLayer.defaultProps = {
+    sourceID: MapboxGL.StyleSource.DefaultSourceID,
+};
+const RCTMGLFillLayer = requireNativeComponent(NATIVE_MODULE_NAME, FillLayer, {
+    nativeOnly: { reactStyle: true },
+});
+export default FillLayer;
diff --git a/b/javascript/components/HeadingIndicator.js b/b/javascript/components/HeadingIndicator.js
new file mode 100644
index 0000000000000000000000000000000000000000..a7ee8aaf1c69f9f07c34cc2cb20df9e6c3d2c02f
--- /dev/null
+++ b/b/javascript/components/HeadingIndicator.js
@@ -0,0 +1,15 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import headingIcon from '../../assets/heading.png';
+import SymbolLayer from './SymbolLayer';
+const style = {
+    iconImage: headingIcon,
+    iconAllowOverlap: true,
+    iconPitchAlignment: 'map',
+    iconRotationAlignment: 'map',
+};
+const HeadingIndicator = (heading) => (<SymbolLayer key="mapboxUserLocationHeadingIndicator" id="mapboxUserLocationHeadingIndicator" belowLayerID="mapboxUserLocationWhiteCircle" style={Object.assign({ iconRotate: heading }, style)}/>);
+HeadingIndicator.propTypes = {
+    heading: PropTypes.number,
+};
+export default HeadingIndicator;
diff --git a/b/javascript/components/HeatmapLayer.js b/b/javascript/components/HeatmapLayer.js
new file mode 100644
index 0000000000000000000000000000000000000000..3be798a67308d62e0f44451839253c10bac365a2
--- /dev/null
+++ b/b/javascript/components/HeatmapLayer.js
@@ -0,0 +1,71 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import { NativeModules, requireNativeComponent } from 'react-native';
+import { viewPropTypes } from '../utils';
+import { HeatmapLayerStyleProp } from '../utils/styleMap';
+import AbstractLayer from './AbstractLayer';
+const MapboxGL = NativeModules.MGLModule;
+export const NATIVE_MODULE_NAME = 'RCTMGLHeatmapLayer';
+/**
+ * HeatmapLayer is a style layer that renders one or more filled circles on the map.
+ */
+class HeatmapLayer extends AbstractLayer {
+    render() {
+        const props = Object.assign(Object.assign({}, this.baseProps), { sourceLayerID: this.props.sourceLayerID });
+        return <RCTMGLHeatmapLayer ref="nativeLayer" {...props}/>;
+    }
+}
+HeatmapLayer.propTypes = Object.assign(Object.assign({}, viewPropTypes), { 
+    /**
+     * A string that uniquely identifies the source in the style to which it is added.
+     */
+    id: PropTypes.string.isRequired, 
+    /**
+     * The source from which to obtain the data to style.
+     * If the source has not yet been added to the current style, the behavior is undefined.
+     * Inferred from parent source only if the layer is a direct child to it.
+     */
+    sourceID: PropTypes.string, 
+    /**
+     * Identifier of the layer within the source identified by the sourceID property
+     * from which the receiver obtains the data to style.
+     */
+    sourceLayerID: PropTypes.string, 
+    /**
+     * Inserts a layer above aboveLayerID.
+     */
+    aboveLayerID: PropTypes.string, 
+    /**
+     * Inserts a layer below belowLayerID
+     */
+    belowLayerID: PropTypes.string, 
+    /**
+     * Inserts a layer at a specified index
+     */
+    layerIndex: PropTypes.number, 
+    /**
+     *  Filter only the features in the source layer that satisfy a condition that you define
+     */
+    filter: PropTypes.array, 
+    /**
+     * The minimum zoom level at which the layer gets parsed and appears.
+     */
+    minZoomLevel: PropTypes.number, 
+    /**
+     * The maximum zoom level at which the layer gets parsed and appears.
+     */
+    maxZoomLevel: PropTypes.number, 
+    /**
+     * Customizable style attributes
+     */
+    style: PropTypes.oneOfType([
+        HeatmapLayerStyleProp,
+        PropTypes.arrayOf(HeatmapLayerStyleProp),
+    ]) });
+HeatmapLayer.defaultProps = {
+    sourceID: MapboxGL.StyleSource.DefaultSourceID,
+};
+const RCTMGLHeatmapLayer = requireNativeComponent(NATIVE_MODULE_NAME, HeatmapLayer, {
+    nativeOnly: { reactStyle: true },
+});
+export default HeatmapLayer;
diff --git a/b/javascript/components/ImageSource.js b/b/javascript/components/ImageSource.js
new file mode 100644
index 0000000000000000000000000000000000000000..ad047d7d54f71f182e3a57f427dba80a8a9dc9f5
--- /dev/null
+++ b/b/javascript/components/ImageSource.js
@@ -0,0 +1,48 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import { requireNativeComponent } from 'react-native';
+import { cloneReactChildrenWithProps, viewPropTypes, isNumber, resolveImagePath, } from '../utils';
+import AbstractSource from './AbstractSource';
+export const NATIVE_MODULE_NAME = 'RCTMGLImageSource';
+/**
+ * ImageSource is a content source that is used for a georeferenced raster image to be shown on the map.
+ * The georeferenced image scales and rotates as the user zooms and rotates the map
+ */
+class ImageSource extends AbstractSource {
+    _getURL() {
+        let { url } = this.props;
+        if (isNumber(this.props.url)) {
+            url = resolveImagePath(this.props.url);
+        }
+        return url;
+    }
+    render() {
+        if (!this.props.url ||
+            !this.props.coordinates ||
+            !this.props.coordinates.length) {
+            return null;
+        }
+        const props = Object.assign(Object.assign({}, this.props), { url: this._getURL() });
+        return (<RCTMGLImageSource ref="nativeSource" {...props}>
+        {cloneReactChildrenWithProps(this.props.children, {
+                sourceID: this.props.id,
+            })}
+      </RCTMGLImageSource>);
+    }
+}
+ImageSource.propTypes = Object.assign(Object.assign({}, viewPropTypes), { 
+    /**
+     * A string that uniquely identifies the source.
+     */
+    id: PropTypes.string.isRequired, 
+    /**
+     * An HTTP(S) URL, absolute file URL, or local file URL to the source image.
+     * Gifs are currently not supported.
+     */
+    url: PropTypes.oneOfType([PropTypes.number, PropTypes.string]), 
+    /**
+     * The top left, top right, bottom right, and bottom left coordinates for the image.
+     */
+    coordinates: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number).isRequired).isRequired });
+const RCTMGLImageSource = requireNativeComponent(NATIVE_MODULE_NAME, ImageSource);
+export default ImageSource;
diff --git a/b/javascript/components/Images.js b/b/javascript/components/Images.js
new file mode 100644
index 0000000000000000000000000000000000000000..662a1e3411ef998cf0c60bc0371f02b0a47470af
--- /dev/null
+++ b/b/javascript/components/Images.js
@@ -0,0 +1,88 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import { requireNativeComponent, Image } from 'react-native';
+import { viewPropTypes } from '../utils';
+import ShapeSource from './ShapeSource';
+export const NATIVE_MODULE_NAME = 'RCTMGLImages';
+function _isUrlOrPath(value) {
+    return ((typeof value === 'string' || value instanceof String) &&
+        (value.startsWith('file://') ||
+            value.startsWith('http://') ||
+            value.startsWith('https://') ||
+            value.startsWith('data:') ||
+            value.startsWith('asset://') ||
+            value.startsWith('/')));
+}
+/**
+ * Images defines the images used in Symbol etc layers
+ */
+class Images extends React.Component {
+    _getImages() {
+        if (!this.props.images && !this.props.nativeAssetImages) {
+            return {};
+        }
+        const images = {};
+        let nativeImages = [];
+        if (this.props.images) {
+            const imageNames = Object.keys(this.props.images);
+            for (const imageName of imageNames) {
+                const value = this.props.images[imageName];
+                if (imageName === ShapeSource.NATIVE_ASSETS_KEY &&
+                    Array.isArray(value)) {
+                    console.warn(`Use of ${ShapeSource.NATIVE_ASSETS_KEY} in Images#images is deprecated please use Images#nativeAssetImages`);
+                    nativeImages = value;
+                }
+                else if (_isUrlOrPath(value)) {
+                    images[imageName] = value;
+                }
+                else {
+                    const res = Image.resolveAssetSource(value);
+                    if (res && res.uri) {
+                        images[imageName] = res;
+                    }
+                }
+            }
+        }
+        if (this.props.nativeAssetImages) {
+            nativeImages = this.props.nativeAssetImages;
+        }
+        return {
+            images,
+            nativeImages,
+        };
+    }
+    _onImageMissing(event) {
+        if (this.props.onImageMissing) {
+            this.props.onImageMissing(event.nativeEvent.payload.imageKey);
+        }
+    }
+    render() {
+        const props = Object.assign({ id: this.props.id, hasOnImageMissing: !!this.props.onImageMissing, onImageMissing: this._onImageMissing.bind(this) }, this._getImages());
+        return <RCTMGLImages {...props}>{this.props.children}</RCTMGLImages>;
+    }
+}
+Images.NATIVE_ASSETS_KEY = 'assets';
+Images.propTypes = Object.assign(Object.assign({}, viewPropTypes), { 
+    /**
+     * Specifies the external images in key-value pairs required for the shape source.
+     * Keys are names - see iconImage expressions, values can be either urls-s objects
+     * with format {uri: 'http://...'}` or `require('image.png')` or `import 'image.png'`
+     */
+    images: PropTypes.object, 
+    /**
+     * If you have an asset under Image.xcassets on iOS and the drawables directory on android
+     * you can specify an array of string names with assets as the key `['pin']`.
+     */
+    nativeAssetImages: PropTypes.arrayOf(PropTypes.string), 
+    /**
+     * Gets called when a Layer is trying to render an image whose key is not present in
+     * any of the `Images` component of the Map.
+     */
+    onImageMissing: PropTypes.func });
+const RCTMGLImages = requireNativeComponent(NATIVE_MODULE_NAME, Images, {
+    nativeOnly: {
+        nativeImages: true,
+        onImageMissing: true,
+    },
+});
+export default Images;
diff --git a/b/javascript/components/Light.js b/b/javascript/components/Light.js
new file mode 100644
index 0000000000000000000000000000000000000000..378590b0dfc585abd956979958945cbe315fd506
--- /dev/null
+++ b/b/javascript/components/Light.js
@@ -0,0 +1,28 @@
+import React from 'react';
+import { requireNativeComponent } from 'react-native';
+import { viewPropTypes } from '../utils';
+import { LightLayerStyleProp } from '../utils/styleMap';
+import AbstractLayer from './AbstractLayer';
+export const NATIVE_MODULE_NAME = 'RCTMGLLight';
+/**
+ * Light represents the light source for extruded geometries
+ */
+class Light extends AbstractLayer {
+    setNativeProps(props) {
+        if (this.refs.nativeLight) {
+            this.refs.nativeLight.setNativeProps(props);
+        }
+    }
+    render() {
+        return (<RCTMGLLight ref="nativeLight" testID="rctmglLight" {...this.props} style={undefined} reactStyle={this.getStyle()}/>);
+    }
+}
+Light.propTypes = Object.assign(Object.assign({}, viewPropTypes), { 
+    /**
+     * Customizable style attributes
+     */
+    style: LightLayerStyleProp });
+const RCTMGLLight = requireNativeComponent(NATIVE_MODULE_NAME, Light, {
+    nativeOnly: { reactStyle: true },
+});
+export default Light;
diff --git a/b/javascript/components/LineLayer.js b/b/javascript/components/LineLayer.js
new file mode 100644
index 0000000000000000000000000000000000000000..b38dc433f382222619426ebf1ca2225eef6459ff
--- /dev/null
+++ b/b/javascript/components/LineLayer.js
@@ -0,0 +1,70 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import { NativeModules, requireNativeComponent } from 'react-native';
+import { viewPropTypes } from '../utils';
+import { LineLayerStyleProp } from '../utils/styleMap';
+import AbstractLayer from './AbstractLayer';
+const MapboxGL = NativeModules.MGLModule;
+export const NATIVE_MODULE_NAME = 'RCTMGLLineLayer';
+/**
+ * LineLayer is a style layer that renders one or more stroked polylines on the map.
+ */
+class LineLayer extends AbstractLayer {
+    render() {
+        const props = Object.assign(Object.assign({}, this.baseProps), { sourceLayerID: this.props.sourceLayerID });
+        return <RCTMGLLineLayer ref="nativeLayer" {...props}/>;
+    }
+}
+LineLayer.propTypes = Object.assign(Object.assign({}, viewPropTypes), { 
+    /**
+     * A string that uniquely identifies the source in the style to which it is added.
+     */
+    id: PropTypes.string.isRequired, 
+    /**
+     * The source from which to obtain the data to style.
+     * If the source has not yet been added to the current style, the behavior is undefined.
+     * Inferred from parent source only if the layer is a direct child to it.
+     */
+    sourceID: PropTypes.string, 
+    /**
+     * Identifier of the layer within the source identified by the sourceID property from which the receiver obtains the data to style.
+     */
+    sourceLayerID: PropTypes.string, 
+    /**
+     * Inserts a layer above aboveLayerID.
+     */
+    aboveLayerID: PropTypes.string, 
+    /**
+     * Inserts a layer below belowLayerID
+     */
+    belowLayerID: PropTypes.string, 
+    /**
+     * Inserts a layer at a specified index
+     */
+    layerIndex: PropTypes.number, 
+    /**
+     *  Filter only the features in the source layer that satisfy a condition that you define
+     */
+    filter: PropTypes.array, 
+    /**
+     * The minimum zoom level at which the layer gets parsed and appears.
+     */
+    minZoomLevel: PropTypes.number, 
+    /**
+     * The maximum zoom level at which the layer gets parsed and appears.
+     */
+    maxZoomLevel: PropTypes.number, 
+    /**
+     * Customizable style attributes
+     */
+    style: PropTypes.oneOfType([
+        LineLayerStyleProp,
+        PropTypes.arrayOf(LineLayerStyleProp),
+    ]) });
+LineLayer.defaultProps = {
+    sourceID: MapboxGL.StyleSource.DefaultSourceID,
+};
+const RCTMGLLineLayer = requireNativeComponent(NATIVE_MODULE_NAME, LineLayer, {
+    nativeOnly: { reactStyle: true },
+});
+export default LineLayer;
diff --git a/b/javascript/components/MapView.js b/b/javascript/components/MapView.js
new file mode 100644
index 0000000000000000000000000000000000000000..7ef39a74aab6f9c21042cae4010eda4216735974
--- /dev/null
+++ b/b/javascript/components/MapView.js
@@ -0,0 +1,717 @@
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+import React from 'react';
+import PropTypes from 'prop-types';
+import { View, StyleSheet, NativeModules, requireNativeComponent, } from 'react-native';
+import { debounce } from 'debounce';
+import { makePoint, makeLatLngBounds } from '../utils/geoUtils';
+import { isFunction, isNumber, toJSONString, isAndroid, viewPropTypes, ornamentPositionPropType, } from '../utils';
+import { getFilter } from '../utils/filterUtils';
+import Logger from '../utils/Logger';
+import NativeBridgeComponent from './NativeBridgeComponent';
+const MapboxGL = NativeModules.MGLModule;
+if (MapboxGL == null) {
+    console.error('Native part of Mapbox React Native libraries were not registered properly, double check our native installation guides.');
+}
+export const NATIVE_MODULE_NAME = 'RCTMGLMapView';
+export const ANDROID_TEXTURE_NATIVE_MODULE_NAME = 'RCTMGLAndroidTextureMapView';
+const styles = StyleSheet.create({
+    matchParent: { flex: 1 },
+});
+const defaultStyleURL = MapboxGL.StyleURL.Street;
+/**
+ * MapView backed by Mapbox Native GL
+ */
+class MapView extends NativeBridgeComponent(React.Component) {
+    constructor(props) {
+        super(props, NATIVE_MODULE_NAME);
+        this.logger = Logger.sharedInstance();
+        this.logger.start();
+        this.state = {
+            isReady: null,
+            region: null,
+            width: 0,
+            height: 0,
+            isUserInteraction: false,
+        };
+        this._onPress = this._onPress.bind(this);
+        this._onLongPress = this._onLongPress.bind(this);
+        this._onChange = this._onChange.bind(this);
+        this._onLayout = this._onLayout.bind(this);
+        // debounced map change methods
+        this._onDebouncedRegionWillChange = debounce(this._onRegionWillChange.bind(this), props.regionWillChangeDebounceTime, true);
+        this._onDebouncedRegionDidChange = debounce(this._onRegionDidChange.bind(this), props.regionDidChangeDebounceTime);
+    }
+    componentDidMount() {
+        this._setHandledMapChangedEvents(this.props);
+    }
+    componentWillUnmount() {
+        this._onDebouncedRegionWillChange.clear();
+        this._onDebouncedRegionDidChange.clear();
+        this.logger.stop();
+    }
+    UNSAFE_componentWillReceiveProps(nextProps) {
+        this._setHandledMapChangedEvents(nextProps);
+    }
+    _setHandledMapChangedEvents(props) {
+        if (isAndroid() || MapboxGL.MapboxV10) {
+            const events = [];
+            function addIfHasHandler(name) {
+                if (props[`on${name}`] != null) {
+                    /* eslint-disable fp/no-mutating-methods */
+                    if (MapboxGL.EventTypes[name] == null) {
+                        console.warn(`rnmapbox maps: ${name} is not supported`);
+                    }
+                    else {
+                        events.push(MapboxGL.EventTypes[name]);
+                        return true;
+                    }
+                }
+                return false;
+            }
+            addIfHasHandler('RegionWillChange');
+            addIfHasHandler('RegionIsChanging');
+            addIfHasHandler('RegionDidChange');
+            addIfHasHandler('UserLocationUpdate');
+            addIfHasHandler('WillStartLoadingMap');
+            addIfHasHandler('DidFinishLoadingMap');
+            addIfHasHandler('DidFailLoadingMap');
+            addIfHasHandler('WillStartRenderingFrame');
+            addIfHasHandler('DidFinishRenderingFrame');
+            addIfHasHandler('DidFinishRenderingFrameFully');
+            addIfHasHandler('WillStartRenderingMap');
+            addIfHasHandler('DidFinishRenderingMap');
+            addIfHasHandler('DidFinishRenderingMapFully');
+            addIfHasHandler('DidFinishLoadingStyle');
+            if (addIfHasHandler('MapIdle')) {
+                if (props.onRegionDidChange) {
+                    console.warn('rnmapbox/maps: only one of  MapView.onRegionDidChange or onMapIdle is supported');
+                }
+            }
+            if (addIfHasHandler('CameraChanged')) {
+                if (props.onRegionWillChange) {
+                    console.warn('rnmapbox/maps: only one of MapView.onRegionWillChange or onCameraChanged is supported');
+                }
+            }
+            this._runNativeCommand('setHandledMapChangedEvents', this._nativeRef, [
+                events,
+            ]);
+        }
+    }
+    /**
+     * Converts a geographic coordinate to a point in the given view’s coordinate system.
+     *
+     * @example
+     * const pointInView = await this._map.getPointInView([-37.817070, 144.949901]);
+     *
+     * @param {Array<Number>} coordinate - A point expressed in the map view's coordinate system.
+     * @return {Array}
+     */
+    getPointInView(coordinate) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const res = yield this._runNativeCommand('getPointInView', this._nativeRef, [coordinate]);
+            return res.pointInView;
+        });
+    }
+    /**
+     * Converts a point in the given view’s coordinate system to a geographic coordinate.
+     *
+     * @example
+     * const coordinate = await this._map.getCoordinateFromView([100, 100]);
+     *
+     * @param {Array<Number>} point - A point expressed in the given view’s coordinate system.
+     * @return {Array}
+     */
+    getCoordinateFromView(point) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const res = yield this._runNativeCommand('getCoordinateFromView', this._nativeRef, [point]);
+            return res.coordinateFromView;
+        });
+    }
+    /**
+     * The coordinate bounds(ne, sw) visible in the users’s viewport.
+     *
+     * @example
+     * const visibleBounds = await this._map.getVisibleBounds();
+     *
+     * @return {Array}
+     */
+    getVisibleBounds() {
+        return __awaiter(this, void 0, void 0, function* () {
+            const res = yield this._runNativeCommand('getVisibleBounds', this._nativeRef);
+            return res.visibleBounds;
+        });
+    }
+    /**
+     * Returns an array of rendered map features that intersect with a given point.
+     *
+     * @example
+     * this._map.queryRenderedFeaturesAtPoint([30, 40], ['==', 'type', 'Point'], ['id1', 'id2'])
+     *
+     * @param  {Array<Number>} coordinate - A point expressed in the map view’s coordinate system.
+     * @param  {Array=} filter - A set of strings that correspond to the names of layers defined in the current style. Only the features contained in these layers are included in the returned array.
+     * @param  {Array=} layerIDs - A array of layer id's to filter the features by
+     * @return {FeatureCollection}
+     */
+    queryRenderedFeaturesAtPoint(coordinate, filter = [], layerIDs = []) {
+        return __awaiter(this, void 0, void 0, function* () {
+            if (!coordinate || coordinate.length < 2) {
+                throw new Error('Must pass in valid coordinate[lng, lat]');
+            }
+            const res = yield this._runNativeCommand('queryRenderedFeaturesAtPoint', this._nativeRef, [coordinate, getFilter(filter), layerIDs]);
+            if (isAndroid()) {
+                return JSON.parse(res.data);
+            }
+            return res.data;
+        });
+    }
+    /**
+     * Returns an array of rendered map features that intersect with the given rectangle,
+     * restricted to the given style layers and filtered by the given predicate.
+     *
+     * @example
+     * this._map.queryRenderedFeaturesInRect([30, 40, 20, 10], ['==', 'type', 'Point'], ['id1', 'id2'])
+     *
+     * @param  {Array<Number>} bbox - A rectangle expressed in the map view’s coordinate system.
+     * @param  {Array=} filter - A set of strings that correspond to the names of layers defined in the current style. Only the features contained in these layers are included in the returned array.
+     * @param  {Array=} layerIDs -  A array of layer id's to filter the features by
+     * @return {FeatureCollection}
+     */
+    queryRenderedFeaturesInRect(bbox, filter = [], layerIDs = []) {
+        return __awaiter(this, void 0, void 0, function* () {
+            if (!bbox || bbox.length !== 4) {
+                throw new Error('Must pass in a valid bounding box[top, right, bottom, left]');
+            }
+            const res = yield this._runNativeCommand('queryRenderedFeaturesInRect', this._nativeRef, [bbox, getFilter(filter), layerIDs]);
+            if (isAndroid()) {
+                return JSON.parse(res.data);
+            }
+            return res.data;
+        });
+    }
+    /**
+     * Map camera will perform updates based on provided config. Deprecated use Camera#setCamera.
+     */
+    setCamera() {
+        console.warn('MapView.setCamera is deprecated - please use Camera#setCamera');
+    }
+    /**
+     * Takes snapshot of map with current tiles and returns a URI to the image
+     * @param  {Boolean} writeToDisk If true will create a temp file, otherwise it is in base64
+     * @return {String}
+     */
+    takeSnap(writeToDisk = false) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const res = yield this._runNativeCommand('takeSnap', this._nativeRef, [
+                writeToDisk,
+            ]);
+            return res.uri;
+        });
+    }
+    /**
+     * Returns the current zoom of the map view.
+     *
+     * @example
+     * const zoom = await this._map.getZoom();
+     *
+     * @return {Number}
+     */
+    getZoom() {
+        return __awaiter(this, void 0, void 0, function* () {
+            const res = yield this._runNativeCommand('getZoom', this._nativeRef);
+            return res.zoom;
+        });
+    }
+    /**
+     * Returns the map's geographical centerpoint
+     *
+     * @example
+     * const center = await this._map.getCenter();
+     *
+     * @return {Array<Number>} Coordinates
+     */
+    getCenter() {
+        return __awaiter(this, void 0, void 0, function* () {
+            const res = yield this._runNativeCommand('getCenter', this._nativeRef);
+            return res.center;
+        });
+    }
+    /**
+     * Queries the currently loaded data for elevation at a geographical location.
+     * The elevation is returned in meters relative to mean sea-level.
+     * Returns null if terrain is disabled or if terrain data for the location hasn't been loaded yet.
+     *
+     * @param {Array<Number>} coordinate - the coordinates to query elevation at
+     * @return {Number}
+     */
+    queryTerrainElevation(coordinate) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const res = yield this._runNativeCommand('queryTerrainElevation', this._nativeRef, [coordinate]);
+            return res.data;
+        });
+    }
+    /**
+     * Sets the visibility of all the layers referencing the specified `sourceLayerId` and/or `sourceId`
+     *
+     * @example
+     * await this._map.setSourceVisibility(false, 'composite', 'building')
+     *
+     * @param {boolean} visible - Visibility of the layers
+     * @param {String} sourceId - Identifier of the target source (e.g. 'composite')
+     * @param {String=} sourceLayerId - Identifier of the target source-layer (e.g. 'building')
+     */
+    setSourceVisibility(visible, sourceId, sourceLayerId = undefined) {
+        this._runNativeCommand('setSourceVisibility', this._nativeRef, [
+            visible,
+            sourceId,
+            sourceLayerId,
+        ]);
+    }
+    /**
+     * Show the attribution and telemetry action sheet.
+     * If you implement a custom attribution button, you should add this action to the button.
+     */
+    showAttribution() {
+        return this._runNativeCommand('showAttribution', this._nativeRef);
+    }
+    _createStopConfig(config = {}) {
+        const stopConfig = {
+            mode: isNumber(config.mode) ? config.mode : MapboxGL.CameraModes.Ease,
+            pitch: config.pitch,
+            heading: config.heading,
+            duration: config.duration || 2000,
+            zoom: config.zoom,
+        };
+        if (config.centerCoordinate) {
+            stopConfig.centerCoordinate = toJSONString(makePoint(config.centerCoordinate));
+        }
+        if (config.bounds && config.bounds.ne && config.bounds.sw) {
+            const { ne, sw, paddingLeft, paddingRight, paddingTop, paddingBottom } = config.bounds;
+            stopConfig.bounds = toJSONString(makeLatLngBounds(ne, sw));
+            stopConfig.boundsPaddingTop = paddingTop || 0;
+            stopConfig.boundsPaddingRight = paddingRight || 0;
+            stopConfig.boundsPaddingBottom = paddingBottom || 0;
+            stopConfig.boundsPaddingLeft = paddingLeft || 0;
+        }
+        return stopConfig;
+    }
+    _onPress(e) {
+        if (isFunction(this.props.onPress)) {
+            this.props.onPress(e.nativeEvent.payload);
+        }
+    }
+    _onLongPress(e) {
+        if (isFunction(this.props.onLongPress)) {
+            this.props.onLongPress(e.nativeEvent.payload);
+        }
+    }
+    _onRegionWillChange(payload) {
+        if (isFunction(this.props.onRegionWillChange)) {
+            this.props.onRegionWillChange(payload);
+        }
+        this.setState({
+            isUserInteraction: payload.properties.isUserInteraction,
+            isAnimatingFromUserInteraction: payload.properties.isAnimatingFromUserInteraction,
+        });
+    }
+    _onRegionDidChange(payload) {
+        if (isFunction(this.props.onRegionDidChange)) {
+            this.props.onRegionDidChange(payload);
+        }
+        this.setState({ region: payload });
+    }
+    _onChange(e) {
+        const { regionWillChangeDebounceTime, regionDidChangeDebounceTime } = this.props;
+        const { type, payload } = e.nativeEvent;
+        let propName = '';
+        switch (type) {
+            case MapboxGL.EventTypes.RegionWillChange:
+                if (regionWillChangeDebounceTime > 0) {
+                    this._onDebouncedRegionWillChange(payload);
+                }
+                else {
+                    propName = 'onRegionWillChange';
+                }
+                break;
+            case MapboxGL.EventTypes.RegionIsChanging:
+                propName = 'onRegionIsChanging';
+                break;
+            case MapboxGL.EventTypes.RegionDidChange:
+                if (regionDidChangeDebounceTime > 0) {
+                    this._onDebouncedRegionDidChange(payload);
+                }
+                else {
+                    propName = 'onRegionDidChange';
+                }
+                break;
+            case MapboxGL.EventTypes.CameraChanged:
+                propName = 'onCameraChanged';
+                break;
+            case MapboxGL.EventTypes.MapIdle:
+                propName = 'onMapIdle';
+                break;
+            case MapboxGL.EventTypes.UserLocationUpdated:
+                propName = 'onUserLocationUpdate';
+                break;
+            case MapboxGL.EventTypes.WillStartLoadingMap:
+                propName = 'onWillStartLoadingMap';
+                break;
+            case MapboxGL.EventTypes.DidFinishLoadingMap:
+                propName = 'onDidFinishLoadingMap';
+                break;
+            case MapboxGL.EventTypes.DidFailLoadingMap:
+                propName = 'onDidFailLoadingMap';
+                break;
+            case MapboxGL.EventTypes.WillStartRenderingFrame:
+                propName = 'onWillStartRenderingFrame';
+                break;
+            case MapboxGL.EventTypes.DidFinishRenderingFrame:
+                propName = 'onDidFinishRenderingFrame';
+                break;
+            case MapboxGL.EventTypes.DidFinishRenderingFrameFully:
+                propName = 'onDidFinishRenderingFrameFully';
+                break;
+            case MapboxGL.EventTypes.WillStartRenderingMap:
+                propName = 'onWillStartRenderingMap';
+                break;
+            case MapboxGL.EventTypes.DidFinishRenderingMap:
+                propName = 'onDidFinishRenderingMap';
+                break;
+            case MapboxGL.EventTypes.DidFinishRenderingMapFully:
+                propName = 'onDidFinishRenderingMapFully';
+                break;
+            case MapboxGL.EventTypes.DidFinishLoadingStyle:
+                propName = 'onDidFinishLoadingStyle';
+                break;
+            default:
+                console.warn('Unhandled event callback type', type);
+        }
+        if (propName.length) {
+            this._handleOnChange(propName, payload);
+        }
+    }
+    _onLayout(e) {
+        this.setState({
+            isReady: true,
+            width: e.nativeEvent.layout.width,
+            height: e.nativeEvent.layout.height,
+        });
+    }
+    _handleOnChange(propName, payload) {
+        if (isFunction(this.props[propName])) {
+            this.props[propName](payload);
+        }
+    }
+    _getCenterCoordinate() {
+        if (!this.props.centerCoordinate) {
+            return;
+        }
+        return toJSONString(makePoint(this.props.centerCoordinate));
+    }
+    _getVisibleCoordinateBounds() {
+        if (!this.props.visibleCoordinateBounds) {
+            return;
+        }
+        return toJSONString(makeLatLngBounds(this.props.visibleCoordinateBounds[0], this.props.visibleCoordinateBounds[1]));
+    }
+    _getContentInset() {
+        if (!this.props.contentInset) {
+            return;
+        }
+        if (!Array.isArray(this.props.contentInset)) {
+            return [this.props.contentInset];
+        }
+        return this.props.contentInset;
+    }
+    _setNativeRef(nativeRef) {
+        this._nativeRef = nativeRef;
+        super._runPendingNativeCommands(nativeRef);
+    }
+    setNativeProps(props) {
+        if (this._nativeRef) {
+            this._nativeRef.setNativeProps(props);
+        }
+    }
+    _setStyleURL(props) {
+        // user set a styleURL, no need to alter props
+        if (props.styleURL) {
+            return;
+        }
+        // user set styleJSON pass it to styleURL
+        if (props.styleJSON && !props.styleURL) {
+            props.styleURL = props.styleJSON;
+        }
+        // user neither set styleJSON nor styleURL
+        // set defaultStyleUrl
+        if (!props.styleJSON || !props.styleURL) {
+            props.styleURL = defaultStyleURL;
+        }
+    }
+    render() {
+        const props = Object.assign(Object.assign({}, this.props), { contentInset: this._getContentInset(), style: styles.matchParent });
+        this._setStyleURL(props);
+        const callbacks = {
+            ref: (nativeRef) => this._setNativeRef(nativeRef),
+            onPress: this._onPress,
+            onLongPress: this._onLongPress,
+            onMapChange: this._onChange,
+            onAndroidCallback: isAndroid() ? this._onAndroidCallback : undefined,
+        };
+        let mapView = null;
+        if (isAndroid() && !this.props.surfaceView && this.state.isReady) {
+            mapView = (<RCTMGLAndroidTextureMapView {...props} {...callbacks}>
+          {this.props.children}
+        </RCTMGLAndroidTextureMapView>);
+        }
+        else if (this.state.isReady) {
+            mapView = (<RCTMGLMapView {...props} {...callbacks}>
+          {this.props.children}
+        </RCTMGLMapView>);
+        }
+        return (<View onLayout={this._onLayout} style={this.props.style} testID={mapView ? null : this.props.testID}>
+        {mapView}
+      </View>);
+    }
+}
+MapView.propTypes = Object.assign(Object.assign({}, viewPropTypes), { 
+    /**
+     * The distance from the edges of the map view’s frame to the edges of the map view’s logical viewport.
+     */
+    contentInset: PropTypes.oneOfType([
+        PropTypes.arrayOf(PropTypes.number),
+        PropTypes.number,
+    ]), 
+    /**
+     * Style for wrapping React Native View
+     */
+    style: PropTypes.any, 
+    /**
+     * Style URL for map - notice, if non is set it _will_ default to `MapboxGL.StyleURL.Street`
+     */
+    styleURL: PropTypes.string, 
+    /**
+     * StyleJSON for map - according to TileJSON specs: https://github.com/mapbox/tilejson-spec
+     */
+    styleJSON: PropTypes.string, 
+    /**
+     * iOS: The preferred frame rate at which the map view is rendered.
+     * The default value for this property is MGLMapViewPreferredFramesPerSecondDefault,
+     * which will adaptively set the preferred frame rate based on the capability of
+     * the user’s device to maintain a smooth experience. This property can be set to arbitrary integer values.
+     *
+     * Android: The maximum frame rate at which the map view is rendered, but it can't excess the ability of device hardware.
+     * This property can be set to arbitrary integer values.
+     */
+    preferredFramesPerSecond: PropTypes.number, 
+    /**
+     * Automatically change the language of the map labels to the system’s preferred language,
+     * this is not something that can be toggled on/off
+     */
+    localizeLabels: PropTypes.bool, 
+    /**
+     * Enable/Disable zoom on the map
+     */
+    zoomEnabled: PropTypes.bool, 
+    /**
+     * Enable/Disable scroll on the map
+     */
+    scrollEnabled: PropTypes.bool, 
+    /**
+     * Enable/Disable pitch on map
+     */
+    pitchEnabled: PropTypes.bool, 
+    /**
+     * Enable/Disable rotation on map
+     */
+    rotateEnabled: PropTypes.bool, 
+    /**
+     * The Mapbox terms of service, which governs the use of Mapbox-hosted vector tiles and styles,
+     * [requires](https://www.mapbox.com/help/how-attribution-works/) these copyright notices to accompany any map that features Mapbox-designed styles, OpenStreetMap data, or other Mapbox data such as satellite or terrain data.
+     * If that applies to this map view, do not hide this view or remove any notices from it.
+     *
+     * You are additionally [required](https://www.mapbox.com/help/how-mobile-apps-work/#telemetry) to provide users with the option to disable anonymous usage and location sharing (telemetry).
+     * If this view is hidden, you must implement this setting elsewhere in your app. See our website for [Android](https://www.mapbox.com/android-docs/map-sdk/overview/#telemetry-opt-out) and [iOS](https://www.mapbox.com/ios-sdk/#telemetry_opt_out) for implementation details.
+     *
+     * Enable/Disable attribution on map. For iOS you need to add MGLMapboxMetricsEnabledSettingShownInApp=YES
+     * to your Info.plist
+     */
+    attributionEnabled: PropTypes.bool, 
+    /**
+     * Adds attribution offset, e.g. `{top: 8, left: 8}` will put attribution button in top-left corner of the map. By default on Android, the attribution with information icon (i) will be on the bottom left, while on iOS the mapbox logo will be on bottom left with information icon (i) on bottom right. Read more about mapbox attribution [here](https://docs.mapbox.com/help/getting-started/attribution/)
+     */
+    attributionPosition: ornamentPositionPropType, 
+    /**
+     * MapView's tintColor
+     */
+    tintColor: PropTypes.oneOfType([PropTypes.string, PropTypes.array]), 
+    /**
+     * Enable/Disable the logo on the map.
+     */
+    logoEnabled: PropTypes.bool, 
+    /**
+     * Adds logo offset, e.g. `{top: 8, left: 8}` will put the logo in top-left corner of the map
+     */
+    logoPosition: ornamentPositionPropType, 
+    /**
+     * Enable/Disable the compass from appearing on the map
+     */
+    compassEnabled: PropTypes.bool, 
+    /**
+     * [`mapbox` (v10) implementation only] Enable/Disable if the compass should fade out when the map is pointing north
+     */
+    compassFadeWhenNorth: PropTypes.bool, 
+    /**
+     * [`mapbox` (v10) implementation only] Adds compass offset, e.g. `{top: 8, left: 8}` will put the compass in top-left corner of the map
+     */
+    compassPosition: ornamentPositionPropType, 
+    /**
+     * Change corner of map the compass starts at. 0: TopLeft, 1: TopRight, 2: BottomLeft, 3: BottomRight
+     */
+    compassViewPosition: PropTypes.number, 
+    /**
+     * Add margins to the compass with x and y values
+     */
+    compassViewMargins: PropTypes.object, 
+    /**
+     * [`mapbox` (v10) implementation only] Enable/Disable the scale bar from appearing on the map
+     */
+    scaleBarEnabled: PropTypes.bool, 
+    /**
+     * [`mapbox` (v10) implementation only] Adds scale bar offset, e.g. `{top: 8, left: 8}` will put the scale bar in top-left corner of the map
+     */
+    scaleBarPosition: ornamentPositionPropType, 
+    /**
+     * [Android only] Enable/Disable use of GLSurfaceView insted of TextureView.
+     */
+    surfaceView: PropTypes.bool, 
+    /**
+     * Map press listener, gets called when a user presses the map
+     */
+    onPress: PropTypes.func, 
+    /**
+     * Map long press listener, gets called when a user long presses the map
+     */
+    onLongPress: PropTypes.func, 
+    /**
+     * <v10 only
+     *
+     * This event is triggered whenever the currently displayed map region is about to change.
+     *
+     * @param {PointFeature} feature - The geojson point feature at the camera center, properties contains zoomLevel, visibleBounds
+     */
+    onRegionWillChange: PropTypes.func, 
+    /**
+     *
+     * This event is triggered whenever the currently displayed map region is changing.
+     *
+     * @param {PointFeature} feature - The geojson point feature at the camera center, properties contains zoomLevel, visibleBounds
+     */
+    onRegionIsChanging: PropTypes.func, 
+    /**
+     *
+     * This event is triggered whenever the currently displayed map region finished changing.
+     *
+     * @param {PointFeature} feature - The geojson point feature at the camera center, properties contains zoomLevel, visibleBounds
+     */
+    onRegionDidChange: PropTypes.func, 
+    /**
+     * iOS, v10 only, experimental.
+     *
+     * Called when the currently displayed map area changes.
+     * Replaces onRegionIsChanging, so can't set both
+     *
+     * @param {MapState} region - A payload containing the map center, bounds, and other properties.
+     */
+    onCameraChanged: PropTypes.func, 
+    /**
+     * iOS, v10 only, experimental
+     *
+     * Called when the currently displayed map area stops changing.
+     * Replaces onRegionDidChange, so can't set both
+     *
+     * @param {MapState} region - A payload containing the map center, bounds, and other properties.
+     */
+    onMapIdle: PropTypes.func, 
+    /**
+     * This event is triggered when the map is about to start loading a new map style.
+     */
+    onWillStartLoadingMap: PropTypes.func, 
+    /**
+     * This is triggered when the map has successfully loaded a new map style.
+     */
+    onDidFinishLoadingMap: PropTypes.func, 
+    /**
+     * This event is triggered when the map has failed to load a new map style.
+     */
+    onDidFailLoadingMap: PropTypes.func, 
+    /**
+     * This event is triggered when the map will start rendering a frame.
+     */
+    onWillStartRenderingFrame: PropTypes.func, 
+    /**
+     * This event is triggered when the map finished rendering a frame.
+     */
+    onDidFinishRenderingFrame: PropTypes.func, 
+    /**
+     * This event is triggered when the map fully finished rendering a frame.
+     */
+    onDidFinishRenderingFrameFully: PropTypes.func, 
+    /**
+     * This event is triggered when the map will start rendering the map.
+     */
+    onWillStartRenderingMap: PropTypes.func, 
+    /**
+     * This event is triggered when the map finished rendering the map.
+     */
+    onDidFinishRenderingMap: PropTypes.func, 
+    /**
+     * This event is triggered when the map fully finished rendering the map.
+     */
+    onDidFinishRenderingMapFully: PropTypes.func, 
+    /**
+     * This event is triggered when the user location is updated.
+     */
+    onUserLocationUpdate: PropTypes.func, 
+    /**
+     * This event is triggered when a style has finished loading.
+     */
+    onDidFinishLoadingStyle: PropTypes.func, 
+    /**
+     * The emitted frequency of regionwillchange events
+     */
+    regionWillChangeDebounceTime: PropTypes.number, 
+    /**
+     * The emitted frequency of regiondidchange events
+     */
+    regionDidChangeDebounceTime: PropTypes.number });
+MapView.defaultProps = {
+    localizeLabels: false,
+    scrollEnabled: true,
+    pitchEnabled: true,
+    rotateEnabled: true,
+    attributionEnabled: true,
+    compassEnabled: false,
+    compassFadeWhenNorth: false,
+    logoEnabled: true,
+    scaleBarEnabled: true,
+    surfaceView: false,
+    regionWillChangeDebounceTime: 10,
+    regionDidChangeDebounceTime: 500,
+};
+const RCTMGLMapView = requireNativeComponent(NATIVE_MODULE_NAME, MapView, {
+    nativeOnly: { onMapChange: true, onAndroidCallback: true },
+});
+let RCTMGLAndroidTextureMapView;
+if (isAndroid()) {
+    RCTMGLAndroidTextureMapView = requireNativeComponent(ANDROID_TEXTURE_NATIVE_MODULE_NAME, MapView, {
+        nativeOnly: { onMapChange: true, onAndroidCallback: true },
+    });
+}
+export default MapView;
diff --git a/b/javascript/components/MarkerView.js b/b/javascript/components/MarkerView.js
new file mode 100644
index 0000000000000000000000000000000000000000..cf53293f6953cb5fab13c546042e7c312cd247c6
--- /dev/null
+++ b/b/javascript/components/MarkerView.js
@@ -0,0 +1,67 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import { Platform, NativeModules, requireNativeComponent } from 'react-native';
+import { toJSONString, viewPropTypes } from '../utils';
+import { makePoint } from '../utils/geoUtils';
+import PointAnnotation from './PointAnnotation';
+const MapboxGL = NativeModules.MGLModule;
+export const NATIVE_MODULE_NAME = 'RCTMGLMarkerView';
+/**
+ * MarkerView allows you to place a interactive react native marker to the map.
+ *
+ * If you have static view consider using PointAnnotation or SymbolLayer they'll offer much better performance
+ * .
+ * This is based on [MakerView plugin](https://docs.mapbox.com/android/plugins/overview/markerview/) on Android
+ * and PointAnnotation on iOS.
+ */
+class MarkerView extends React.PureComponent {
+    _getCoordinate() {
+        if (!this.props.coordinate) {
+            return undefined;
+        }
+        return toJSONString(makePoint(this.props.coordinate));
+    }
+    render() {
+        if (Platform.OS === 'ios' && !MapboxGL.MapboxV10) {
+            return <PointAnnotation {...this.props}/>;
+        }
+        const props = Object.assign(Object.assign({}, this.props), { anchor: this.props.anchor, coordinate: this._getCoordinate() });
+        return (<RCTMGLMarkerView {...props}>{this.props.children}</RCTMGLMarkerView>);
+    }
+}
+MarkerView.propTypes = Object.assign(Object.assign({}, viewPropTypes), { 
+    /**
+     * The center point (specified as a map coordinate) of the marker.
+     * See also #anchor.
+     */
+    coordinate: PropTypes.arrayOf(PropTypes.number).isRequired, 
+    /**
+     * Specifies the anchor being set on a particular point of the annotation.
+     * The anchor point is specified in the continuous space [0.0, 1.0] x [0.0, 1.0],
+     * where (0, 0) is the top-left corner of the image, and (1, 1) is the bottom-right corner.
+     * Note this is only for custom annotations not the default pin view.
+     * Defaults to the center of the view.
+     */
+    anchor: PropTypes.shape({
+        /**
+         * `x` of anchor
+         */
+        x: PropTypes.number.isRequired,
+        /**
+         * `y` of anchor
+         */
+        y: PropTypes.number.isRequired,
+    }), 
+    /**
+     * Expects one child - can be container with multiple elements
+     */
+    children: PropTypes.element.isRequired });
+MarkerView.defaultProps = {
+    anchor: { x: 0.5, y: 0.5 },
+};
+const RCTMGLMarkerView = Platform.OS === 'android'
+    ? requireNativeComponent(NATIVE_MODULE_NAME, MarkerView, {})
+    : MapboxGL.MapboxV10
+        ? requireNativeComponent(NATIVE_MODULE_NAME, MarkerView, {})
+        : undefined;
+export default MarkerView;
diff --git a/b/javascript/components/NativeBridgeComponent.js b/b/javascript/components/NativeBridgeComponent.js
new file mode 100644
index 0000000000000000000000000000000000000000..0c11212d9edb54c5489732f8b8e11220da5d538f
--- /dev/null
+++ b/b/javascript/components/NativeBridgeComponent.js
@@ -0,0 +1,75 @@
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+import { runNativeCommand, isAndroid } from '../utils';
+let callbackIncrement = 0;
+const NativeBridgeComponent = (B) => class extends B {
+    constructor(props, nativeModuleName) {
+        super(props);
+        this._nativeModuleName = nativeModuleName;
+        this._onAndroidCallback = this._onAndroidCallback.bind(this);
+        this._callbackMap = new Map();
+        this._preRefMapMethodQueue = [];
+    }
+    _addAddAndroidCallback(id, resolve, reject) {
+        this._callbackMap.set(id, { resolve, reject });
+    }
+    _removeAndroidCallback(id) {
+        this._callbackMap.remove(id);
+    }
+    _onAndroidCallback(e) {
+        const callbackID = e.nativeEvent.type;
+        const callback = this._callbackMap.get(callbackID);
+        if (!callback) {
+            return;
+        }
+        this._callbackMap.delete(callbackID);
+        let { payload } = e.nativeEvent;
+        if (payload.error) {
+            callback.reject.call(null, new Error(payload.error));
+        }
+        else {
+            callback.resolve.call(null, payload);
+        }
+    }
+    _runPendingNativeCommands(nativeRef) {
+        return __awaiter(this, void 0, void 0, function* () {
+            if (nativeRef) {
+                while (this._preRefMapMethodQueue.length > 0) {
+                    const item = this._preRefMapMethodQueue.pop();
+                    if (item && item.method && item.resolver) {
+                        const res = yield this._runNativeCommand(item.method.name, nativeRef, item.method.args);
+                        item.resolver(res);
+                    }
+                }
+            }
+        });
+    }
+    _runNativeCommand(methodName, nativeRef, args = []) {
+        if (!nativeRef) {
+            return new Promise((resolve) => {
+                this._preRefMapMethodQueue.push({
+                    method: { name: methodName, args },
+                    resolver: resolve,
+                });
+            });
+        }
+        if (isAndroid()) {
+            return new Promise((resolve, reject) => {
+                callbackIncrement += 1;
+                const callbackID = `${methodName}_${callbackIncrement}`;
+                this._addAddAndroidCallback(callbackID, resolve, reject);
+                args.unshift(callbackID);
+                runNativeCommand(this._nativeModuleName, methodName, nativeRef, args);
+            });
+        }
+        return runNativeCommand(this._nativeModuleName, methodName, nativeRef, args);
+    }
+};
+export default NativeBridgeComponent;
diff --git a/b/javascript/components/NativeUserLocation.js b/b/javascript/components/NativeUserLocation.js
new file mode 100644
index 0000000000000000000000000000000000000000..88376730bc340c9fbc4c23dd3a119f87d3cb02cd
--- /dev/null
+++ b/b/javascript/components/NativeUserLocation.js
@@ -0,0 +1,31 @@
+import React from 'react';
+import { requireNativeComponent } from 'react-native';
+import PropTypes from 'prop-types';
+const NATIVE_MODULE_NAME = 'RCTMGLNativeUserLocation';
+class NativeUserLocation extends React.Component {
+    render() {
+        return <RCTMGLNativeUserLocation {...this.props}/>;
+    }
+}
+NativeUserLocation.propTypes = {
+    /**
+     * Android render mode.
+     *
+     *  - normal: just a circle
+     *  - compass: triangle with heading
+     *  - gps: large arrow
+     *
+     * @platform android
+     */
+    androidRenderMode: PropTypes.oneOf(['normal', 'compass', 'gps']),
+    /**
+     * iOS only. A Boolean value indicating whether the user location annotation may display a permanent heading indicator.
+     *
+     * @platform ios
+     */
+    iosShowsUserHeadingIndicator: PropTypes.bool,
+};
+const RCTMGLNativeUserLocation = requireNativeComponent(NATIVE_MODULE_NAME, NativeUserLocation, {
+    nativeOnly: {},
+});
+export default NativeUserLocation;
diff --git a/b/javascript/components/PointAnnotation.js b/b/javascript/components/PointAnnotation.js
new file mode 100644
index 0000000000000000000000000000000000000000..79a84b1b03589a375e69d8891bc7c29a0bc5a9ff
--- /dev/null
+++ b/b/javascript/components/PointAnnotation.js
@@ -0,0 +1,164 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import { requireNativeComponent, StyleSheet, Platform } from 'react-native';
+import { toJSONString, isFunction, viewPropTypes } from '../utils';
+import { makePoint } from '../utils/geoUtils';
+import NativeBridgeComponent from './NativeBridgeComponent';
+export const NATIVE_MODULE_NAME = 'RCTMGLPointAnnotation';
+const styles = StyleSheet.create({
+    container: {
+        alignItems: 'center',
+        justifyContent: 'center',
+        position: 'absolute',
+    },
+});
+/**
+ * PointAnnotation represents a one-dimensional shape located at a single geographical coordinate.
+ *
+ * Consider using ShapeSource and SymbolLayer instead, if you have many points and you have static images,
+ * they'll offer much better performance.
+ *
+ * If you need interactive views please use MarkerView,
+ * as with PointAnnotation on Android child views are rendered onto a bitmap for better performance.
+ */
+class PointAnnotation extends NativeBridgeComponent(React.PureComponent) {
+    constructor(props) {
+        super(props, NATIVE_MODULE_NAME);
+        this._onSelected = this._onSelected.bind(this);
+        this._onDeselected = this._onDeselected.bind(this);
+        this._onDragStart = this._onDragStart.bind(this);
+        this._onDrag = this._onDrag.bind(this);
+        this._onDragEnd = this._onDragEnd.bind(this);
+    }
+    _onSelected(e) {
+        if (isFunction(this.props.onSelected)) {
+            this.props.onSelected(e.nativeEvent.payload);
+        }
+    }
+    _onDeselected(e) {
+        if (isFunction(this.props.onDeselected)) {
+            this.props.onDeselected(e.nativeEvent.payload);
+        }
+    }
+    _onDragStart(e) {
+        if (isFunction(this.props.onDragStart)) {
+            this.props.onDragStart(e.nativeEvent.payload);
+        }
+    }
+    _onDrag(e) {
+        if (isFunction(this.props.onDrag)) {
+            this.props.onDrag(e.nativeEvent.payload);
+        }
+    }
+    _onDragEnd(e) {
+        if (isFunction(this.props.onDragEnd)) {
+            this.props.onDragEnd(e.nativeEvent.payload);
+        }
+    }
+    _getCoordinate() {
+        if (!this.props.coordinate) {
+            return undefined;
+        }
+        return toJSONString(makePoint(this.props.coordinate));
+    }
+    /**
+     * On v10 and pre v10 android point annotation is rendered offscreen with a canvas into an image.
+     * To rerender the image from the current state of the view call refresh.
+     * Call this for example from Image#onLoad.
+     */
+    refresh() {
+        if (Platform.OS === 'android') {
+            this._runNativeCommand('refresh', this._nativeRef, []);
+        }
+        else {
+            this._runNativeCommand('refresh', this._nativeRef, []);
+        }
+    }
+    _setNativeRef(nativeRef) {
+        this._nativeRef = nativeRef;
+        super._runPendingNativeCommands(nativeRef);
+    }
+    render() {
+        const props = Object.assign(Object.assign({}, this.props), { ref: (nativeRef) => this._setNativeRef(nativeRef), id: this.props.id, title: this.props.title, snippet: this.props.snippet, anchor: this.props.anchor, selected: this.props.selected, draggable: this.props.draggable, style: [this.props.style, styles.container], onMapboxPointAnnotationSelected: this._onSelected, onMapboxPointAnnotationDeselected: this._onDeselected, onMapboxPointAnnotationDragStart: this._onDragStart, onMapboxPointAnnotationDrag: this._onDrag, onMapboxPointAnnotationDragEnd: this._onDragEnd, coordinate: this._getCoordinate() });
+        return (<RCTMGLPointAnnotation {...props}>
+        {this.props.children}
+      </RCTMGLPointAnnotation>);
+    }
+}
+PointAnnotation.propTypes = Object.assign(Object.assign({}, viewPropTypes), { 
+    /**
+     * A string that uniquely identifies the annotation
+     */
+    id: PropTypes.string.isRequired, 
+    /**
+     * The string containing the annotation’s title. Note this is required to be set if you want to see a callout appear on iOS.
+     */
+    title: PropTypes.string, 
+    /**
+     * The string containing the annotation’s snippet(subtitle). Not displayed in the default callout.
+     */
+    snippet: PropTypes.string, 
+    /**
+     * Manually selects/deselects annotation
+     * @type {[type]}
+     */
+    selected: PropTypes.bool, 
+    /**
+     * Enable or disable dragging. Defaults to false.
+     */
+    draggable: PropTypes.bool, 
+    /**
+     * The center point (specified as a map coordinate) of the annotation.
+     */
+    coordinate: PropTypes.arrayOf(PropTypes.number).isRequired, 
+    /**
+     * Specifies the anchor being set on a particular point of the annotation.
+     * The anchor point is specified in the continuous space [0.0, 1.0] x [0.0, 1.0],
+     * where (0, 0) is the top-left corner of the image, and (1, 1) is the bottom-right corner.
+     * Note this is only for custom annotations not the default pin view.
+     * Defaults to the center of the view.
+     */
+    anchor: PropTypes.shape({
+        /**
+         * See anchor
+         */
+        x: PropTypes.number.isRequired,
+        /**
+         * See anchor
+         */
+        y: PropTypes.number.isRequired,
+    }), 
+    /**
+     * This callback is fired once this annotation is selected. Returns a Feature as the first param.
+     */
+    onSelected: PropTypes.func, 
+    /**
+     * This callback is fired once this annotation is deselected.
+     */
+    onDeselected: PropTypes.func, 
+    /**
+     * This callback is fired once this annotation has started being dragged.
+     */
+    onDragStart: PropTypes.func, 
+    /**
+     * This callback is fired once this annotation has stopped being dragged.
+     */
+    onDragEnd: PropTypes.func, 
+    /**
+     * This callback is fired while this annotation is being dragged.
+     */
+    onDrag: PropTypes.func });
+PointAnnotation.defaultProps = {
+    anchor: { x: 0.5, y: 0.5 },
+    draggable: false,
+};
+const RCTMGLPointAnnotation = requireNativeComponent(NATIVE_MODULE_NAME, PointAnnotation, {
+    nativeOnly: {
+        onMapboxPointAnnotationSelected: true,
+        onMapboxPointAnnotationDeselected: true,
+        onMapboxPointAnnotationDragStart: true,
+        onMapboxPointAnnotationDrag: true,
+        onMapboxPointAnnotationDragEnd: true,
+    },
+});
+export default PointAnnotation;
diff --git a/b/javascript/components/RasterDemSource.js b/b/javascript/components/RasterDemSource.js
new file mode 100644
index 0000000000000000000000000000000000000000..fb48de998651f9d6484272c71c9bcfc17e67c65d
--- /dev/null
+++ b/b/javascript/components/RasterDemSource.js
@@ -0,0 +1,70 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import { NativeModules, requireNativeComponent } from 'react-native';
+import { cloneReactChildrenWithProps, viewPropTypes } from '../utils';
+import AbstractSource from './AbstractSource';
+const isTileTemplateUrl = (url) => url &&
+    (url.includes('{z}') || url.includes('{bbox-') || url.includes('{quadkey}'));
+const MapboxGL = NativeModules.MGLModule;
+export const NATIVE_MODULE_NAME = 'RCTMGLRasterDemSource';
+class RasterDemSource extends AbstractSource {
+    constructor(props) {
+        super(props);
+        if (isTileTemplateUrl(props.url)) {
+            console.warn(`RasterDemSource 'url' property contains a Tile URL Template, but is intended for a StyleJSON URL. Please migrate your VectorSource to use: \`tileUrlTemplates=["${props.url}"]\` instead.`);
+        }
+    }
+    render() {
+        let { url } = this.props;
+        let { tileUrlTemplates } = this.props;
+        // Swapping url for tileUrlTemplates to provide backward compatiblity
+        // when RasterSource supported only tile url as url prop
+        if (isTileTemplateUrl(url)) {
+            tileUrlTemplates = [url];
+            url = undefined;
+        }
+        const props = Object.assign(Object.assign({}, this.props), { id: this.props.id, url,
+            tileUrlTemplates, minZoomLevel: this.props.minZoomLevel, maxZoomLevel: this.props.maxZoomLevel, tileSize: this.props.tileSize });
+        return (<RCTMGLRasterDemSource ref="nativeSource" {...props}>
+        {cloneReactChildrenWithProps(this.props.children, {
+                sourceID: this.props.id,
+            })}
+      </RCTMGLRasterDemSource>);
+    }
+}
+RasterDemSource.propTypes = Object.assign(Object.assign({}, viewPropTypes), { 
+    /**
+     * A string that uniquely identifies the source.
+     */
+    id: PropTypes.string.isRequired, 
+    /**
+     * A URL to a TileJSON configuration file describing the source’s contents and other metadata.
+     */
+    url: PropTypes.string, 
+    /**
+     * An array of tile URL templates. If multiple endpoints are specified, clients may use any combination of endpoints.
+     * Example: https://example.com/raster-tiles/{z}/{x}/{y}.png
+     */
+    tileUrlTemplates: PropTypes.arrayOf(PropTypes.string), 
+    /**
+     * An unsigned integer that specifies the minimum zoom level at which to display tiles from the source.
+     * The value should be between 0 and 22, inclusive, and less than
+     * maxZoomLevel, if specified. The default value for this option is 0.
+     */
+    minZoomLevel: PropTypes.number, 
+    /**
+     * An unsigned integer that specifies the maximum zoom level at which to display tiles from the source.
+     * The value should be between 0 and 22, inclusive, and less than
+     * minZoomLevel, if specified. The default value for this option is 22.
+     */
+    maxZoomLevel: PropTypes.number, 
+    /**
+     * Size of the map tiles.
+     * Mapbox urls default to 256, all others default to 512.
+     */
+    tileSize: PropTypes.number });
+RasterDemSource.defaultProps = {
+    id: MapboxGL.StyleSource.DefaultSourceID,
+};
+const RCTMGLRasterDemSource = requireNativeComponent(NATIVE_MODULE_NAME, RasterDemSource);
+export default RasterDemSource;
diff --git a/b/javascript/components/RasterLayer.js b/b/javascript/components/RasterLayer.js
new file mode 100644
index 0000000000000000000000000000000000000000..bd97913b46d6fa3568691791080180ebd9cf2c43
--- /dev/null
+++ b/b/javascript/components/RasterLayer.js
@@ -0,0 +1,67 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import { NativeModules, requireNativeComponent } from 'react-native';
+import { viewPropTypes } from '../utils';
+import { RasterLayerStyleProp } from '../utils/styleMap';
+import AbstractLayer from './AbstractLayer';
+const MapboxGL = NativeModules.MGLModule;
+export const NATIVE_MODULE_NAME = 'RCTMGLRasterLayer';
+class RasterLayer extends AbstractLayer {
+    render() {
+        const props = Object.assign(Object.assign({}, this.baseProps), { sourceLayerID: this.props.sourceLayerID });
+        return <RCTMGLRasterLayer ref="nativeLayer" {...props}/>;
+    }
+}
+RasterLayer.propTypes = Object.assign(Object.assign({}, viewPropTypes), { 
+    /**
+     * A string that uniquely identifies the source in the style to which it is added.
+     */
+    id: PropTypes.string.isRequired, 
+    /**
+     * The source from which to obtain the data to style.
+     * If the source has not yet been added to the current style, the behavior is undefined.
+     * Inferred from parent source only if the layer is a direct child to it.
+     */
+    sourceID: PropTypes.string, 
+    /**
+     * Identifier of the layer within the source identified by the sourceID property from which the receiver obtains the data to style.
+     */
+    sourceLayerID: PropTypes.string, 
+    /**
+     * Inserts a layer above aboveLayerID.
+     */
+    aboveLayerID: PropTypes.string, 
+    /**
+     * Inserts a layer below belowLayerID
+     */
+    belowLayerID: PropTypes.string, 
+    /**
+     * Inserts a layer at a specified index
+     */
+    layerIndex: PropTypes.number, 
+    /**
+     *  Filter only the features in the source layer that satisfy a condition that you define
+     */
+    filter: PropTypes.array, 
+    /**
+     * The minimum zoom level at which the layer gets parsed and appears.
+     */
+    minZoomLevel: PropTypes.number, 
+    /**
+     * The maximum zoom level at which the layer gets parsed and appears.
+     */
+    maxZoomLevel: PropTypes.number, 
+    /**
+     * Customizable style attributes
+     */
+    style: PropTypes.oneOfType([
+        RasterLayerStyleProp,
+        PropTypes.arrayOf(RasterLayerStyleProp),
+    ]) });
+RasterLayer.defaultProps = {
+    sourceID: MapboxGL.StyleSource.DefaultSourceID,
+};
+const RCTMGLRasterLayer = requireNativeComponent(NATIVE_MODULE_NAME, RasterLayer, {
+    nativeOnly: { reactStyle: true },
+});
+export default RasterLayer;
diff --git a/b/javascript/components/RasterSource.js b/b/javascript/components/RasterSource.js
new file mode 100644
index 0000000000000000000000000000000000000000..2b3a3952955ef3b3adbf99da4da24b1b94b027dd
--- /dev/null
+++ b/b/javascript/components/RasterSource.js
@@ -0,0 +1,84 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import { NativeModules, requireNativeComponent } from 'react-native';
+import { cloneReactChildrenWithProps, viewPropTypes } from '../utils';
+import AbstractSource from './AbstractSource';
+const MapboxGL = NativeModules.MGLModule;
+export const NATIVE_MODULE_NAME = 'RCTMGLRasterSource';
+const isTileTemplateUrl = (url) => url &&
+    (url.includes('{z}') || url.includes('{bbox-') || url.includes('{quadkey}'));
+/**
+ * RasterSource is a map content source that supplies raster image tiles to be shown on the map.
+ * The location of and metadata about the tiles are defined either by an option dictionary
+ * or by an external file that conforms to the TileJSON specification.
+ */
+class RasterSource extends AbstractSource {
+    constructor(props) {
+        super(props);
+        if (isTileTemplateUrl(props.url)) {
+            console.warn(`RasterSource 'url' property contains a Tile URL Template, but is intended for a StyleJSON URL. Please migrate your VectorSource to use: \`tileUrlTemplates=["${props.url}"]\` instead.`);
+        }
+    }
+    render() {
+        let { url } = this.props;
+        let { tileUrlTemplates } = this.props;
+        // Swapping url for tileUrlTemplates to provide backward compatiblity
+        // when RasterSource supported only tile url as url prop
+        if (isTileTemplateUrl(url)) {
+            tileUrlTemplates = [url];
+            url = undefined;
+        }
+        const props = Object.assign(Object.assign({}, this.props), { id: this.props.id, url,
+            tileUrlTemplates, minZoomLevel: this.props.minZoomLevel, maxZoomLevel: this.props.maxZoomLevel, tileSize: this.props.tileSize, tms: this.props.tms, attribution: this.props.attribution });
+        return (<RCTMGLRasterSource ref="nativeSource" {...props}>
+        {cloneReactChildrenWithProps(this.props.children, {
+                sourceID: this.props.id,
+            })}
+      </RCTMGLRasterSource>);
+    }
+}
+RasterSource.propTypes = Object.assign(Object.assign({}, viewPropTypes), { 
+    /**
+     * A string that uniquely identifies the source.
+     */
+    id: PropTypes.string.isRequired, 
+    /**
+     * A URL to a TileJSON configuration file describing the source’s contents and other metadata.
+     */
+    url: PropTypes.string, 
+    /**
+     * An array of tile URL templates. If multiple endpoints are specified, clients may use any combination of endpoints.
+     * Example: https://example.com/raster-tiles/{z}/{x}/{y}.png
+     */
+    tileUrlTemplates: PropTypes.arrayOf(PropTypes.string), 
+    /**
+     * An unsigned integer that specifies the minimum zoom level at which to display tiles from the source.
+     * The value should be between 0 and 22, inclusive, and less than
+     * maxZoomLevel, if specified. The default value for this option is 0.
+     */
+    minZoomLevel: PropTypes.number, 
+    /**
+     * An unsigned integer that specifies the maximum zoom level at which to display tiles from the source.
+     * The value should be between 0 and 22, inclusive, and less than
+     * minZoomLevel, if specified. The default value for this option is 22.
+     */
+    maxZoomLevel: PropTypes.number, 
+    /**
+     * Size of the map tiles.
+     * Mapbox urls default to 256, all others default to 512.
+     */
+    tileSize: PropTypes.number, 
+    /**
+     * Influences the y direction of the tile coordinates. (tms inverts y axis)
+     */
+    tms: PropTypes.bool, 
+    /**
+     * An HTML or literal text string defining the buttons to be displayed in an action sheet when the
+     * source is part of a map view’s style and the map view’s attribution button is pressed.
+     */
+    attribution: PropTypes.string });
+RasterSource.defaultProps = {
+    id: MapboxGL.StyleSource.DefaultSourceID,
+};
+const RCTMGLRasterSource = requireNativeComponent(NATIVE_MODULE_NAME, RasterSource);
+export default RasterSource;
diff --git a/b/javascript/components/ShapeSource.js b/b/javascript/components/ShapeSource.js
new file mode 100644
index 0000000000000000000000000000000000000000..0027133bbb3f6e617e6234ca4679162dc14dd60c
--- /dev/null
+++ b/b/javascript/components/ShapeSource.js
@@ -0,0 +1,284 @@
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+import React from 'react';
+import PropTypes from 'prop-types';
+import { NativeModules, requireNativeComponent } from 'react-native';
+import { getFilter } from '../utils/filterUtils';
+import { toJSONString, cloneReactChildrenWithProps, viewPropTypes, isFunction, isAndroid, } from '../utils';
+import { copyPropertiesAsDeprecated } from '../utils/deprecation';
+import AbstractSource from './AbstractSource';
+import NativeBridgeComponent from './NativeBridgeComponent';
+const MapboxGL = NativeModules.MGLModule;
+export const NATIVE_MODULE_NAME = 'RCTMGLShapeSource';
+/**
+ * ShapeSource is a map content source that supplies vector shapes to be shown on the map.
+ * The shape may be a url or a GeoJSON object
+ */
+class ShapeSource extends NativeBridgeComponent(AbstractSource) {
+    constructor(props) {
+        super(props, NATIVE_MODULE_NAME);
+    }
+    _setNativeRef(nativeRef) {
+        this._nativeRef = nativeRef;
+        super._runPendingNativeCommands(nativeRef);
+    }
+    /**
+     * Returns all features from the source that match the query parameters regardless of whether or not the feature is
+     * currently rendered on the map.
+     *
+     * @example
+     * shapeSource.features()
+     *
+     * @param  {Array=} filter - an optional filter statement to filter the returned Features.
+     * @return {FeatureCollection}
+     */
+    features(filter = []) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const res = yield this._runNativeCommand('features', this._nativeRef, [
+                getFilter(filter),
+            ]);
+            if (isAndroid()) {
+                return JSON.parse(res.data);
+            }
+            return res.data;
+        });
+    }
+    /**
+     * Returns the zoom needed to expand the cluster.
+     *
+     * @example
+     * const zoom = await shapeSource.getClusterExpansionZoom(clusterId);
+     *
+     * @param  {Feature} feature - The feature cluster to expand.
+     * @return {number}
+     */
+    getClusterExpansionZoom(feature) {
+        return __awaiter(this, void 0, void 0, function* () {
+            if (typeof feature === 'number') {
+                console.warn('Using cluster_id is deprecated and will be removed from the future releases. Please use cluster as an argument instead.');
+                const res = yield this._runNativeCommand('getClusterExpansionZoomById', this._nativeRef, [feature]);
+                return res.data;
+            }
+            const res = yield this._runNativeCommand('getClusterExpansionZoom', this._nativeRef, [JSON.stringify(feature)]);
+            return res.data;
+        });
+    }
+    /**
+     * Returns the FeatureCollection from the cluster.
+     *
+     * @example
+     * const collection = await shapeSource.getClusterLeaves(clusterId, limit, offset);
+     *
+     * @param  {Feature} feature - The feature cluster to expand.
+     * @param  {number} limit - The number of points to return.
+     * @param  {number} offset - The amount of points to skip (for pagination).
+     * @return {FeatureCollection}
+     */
+    getClusterLeaves(feature, limit, offset) {
+        return __awaiter(this, void 0, void 0, function* () {
+            if (typeof feature === 'number') {
+                console.warn('Using cluster_id is deprecated and will be removed from the future releases. Please use cluster as an argument instead.');
+                const res = yield this._runNativeCommand('getClusterLeavesById', this._nativeRef, [feature, limit, offset]);
+                if (isAndroid()) {
+                    return JSON.parse(res.data);
+                }
+                return res.data;
+            }
+            const res = yield this._runNativeCommand('getClusterLeaves', this._nativeRef, [JSON.stringify(feature), limit, offset]);
+            if (isAndroid()) {
+                return JSON.parse(res.data);
+            }
+            return res.data;
+        });
+    }
+    /**
+     * Returns the FeatureCollection from the cluster (on the next zoom level).
+     *
+     * @example
+     * const collection = await shapeSource.getClusterChildren(clusterId);
+     *
+     * @param  {Feature} feature - The feature cluster to expand.
+     * @return {FeatureCollection}
+     */
+    getClusterChildren(feature) {
+        return __awaiter(this, void 0, void 0, function* () {
+            if (typeof feature === 'number') {
+                console.warn('Using cluster_id is deprecated and will be removed from the future releases. Please use cluster as an argument instead.');
+                const res = yield this._runNativeCommand('getClusterChildrenById', this._nativeRef, [feature]);
+                if (isAndroid()) {
+                    return JSON.parse(res.data);
+                }
+                return res.data;
+            }
+            const res = yield this._runNativeCommand('getClusterChildren', this._nativeRef, [JSON.stringify(feature)]);
+            if (isAndroid()) {
+                return JSON.parse(res.data);
+            }
+            return res.data;
+        });
+    }
+    setNativeProps(props) {
+        const shallowProps = Object.assign({}, props);
+        // Adds support for Animated
+        if (shallowProps.shape && typeof shallowProps !== 'string') {
+            shallowProps.shape = JSON.stringify(shallowProps.shape);
+        }
+        super.setNativeProps(shallowProps);
+    }
+    _getShape() {
+        if (!this.props.shape) {
+            return;
+        }
+        return toJSONString(this.props.shape);
+    }
+    onPress(event) {
+        const { nativeEvent: { payload: { features, coordinates, point }, }, } = event;
+        let newEvent = {
+            features,
+            coordinates,
+            point,
+        };
+        newEvent = copyPropertiesAsDeprecated(event, newEvent, (key) => {
+            console.warn(`event.${key} is deprecated on ShapeSource#onPress, please use event.features`);
+        }, {
+            nativeEvent: (origNativeEvent) => (Object.assign(Object.assign({}, origNativeEvent), { payload: features[0] })),
+        });
+        this.props.onPress(newEvent);
+    }
+    render() {
+        const props = {
+            id: this.props.id,
+            url: this.props.url,
+            shape: this._getShape(),
+            hitbox: this.props.hitbox,
+            hasPressListener: isFunction(this.props.onPress),
+            onMapboxShapeSourcePress: this.onPress.bind(this),
+            cluster: this.props.cluster ? 1 : 0,
+            clusterRadius: this.props.clusterRadius,
+            clusterMaxZoomLevel: this.props.clusterMaxZoomLevel,
+            clusterProperties: this.props.clusterProperties,
+            maxZoomLevel: this.props.maxZoomLevel,
+            buffer: this.props.buffer,
+            tolerance: this.props.tolerance,
+            lineMetrics: this.props.lineMetrics,
+            onPress: undefined,
+            ref: (nativeRef) => this._setNativeRef(nativeRef),
+            onAndroidCallback: isAndroid() ? this._onAndroidCallback : undefined,
+        };
+        return (<RCTMGLShapeSource {...props}>
+        {cloneReactChildrenWithProps(this.props.children, {
+                sourceID: this.props.id,
+            })}
+      </RCTMGLShapeSource>);
+    }
+}
+ShapeSource.NATIVE_ASSETS_KEY = 'assets';
+ShapeSource.propTypes = Object.assign(Object.assign({}, viewPropTypes), { 
+    /**
+     * A string that uniquely identifies the source.
+     */
+    id: PropTypes.string.isRequired, 
+    /**
+     * An HTTP(S) URL, absolute file URL, or local file URL relative to the current application’s resource bundle.
+     */
+    url: PropTypes.string, 
+    /**
+     * The contents of the source. A shape can represent a GeoJSON geometry, a feature, or a feature colllection.
+     */
+    shape: PropTypes.object, 
+    /**
+     * Enables clustering on the source for point shapes.
+     */
+    cluster: PropTypes.bool, 
+    /**
+     * Specifies the radius of each cluster if clustering is enabled.
+     * A value of 512 produces a radius equal to the width of a tile.
+     * The default value is 50.
+     */
+    clusterRadius: PropTypes.number, 
+    /**
+     * Specifies the maximum zoom level at which to cluster points if clustering is enabled.
+     * Defaults to one zoom level less than the value of maxZoomLevel so that, at the maximum zoom level,
+     * the shapes are not clustered.
+     */
+    clusterMaxZoomLevel: PropTypes.number, 
+    /**
+     * [`mapbox-gl` (v8) implementation only]
+     * Specifies custom properties on the generated clusters if clustering
+     * is enabled, aggregating values from clustered points.
+     *
+     * Has the form `{ "property_name": [operator, map_expression]}`, where
+     *  `operator` is a custom reduce expression that references a special `["accumulated"]` value -
+     *   it accumulates the property value from clusters/points the cluster contains
+     *  `map_expression` produces the value of a single point
+     *
+     * Example: `{ "resultingSum": [["+", ["accumulated"], ["get", "resultingSum"]], ["get", "scalerank"]] }`
+     *
+     */
+    clusterProperties: PropTypes.object, 
+    /**
+     * Specifies the maximum zoom level at which to create vector tiles.
+     * A greater value produces greater detail at high zoom levels.
+     * The default value is 18.
+     */
+    maxZoomLevel: PropTypes.number, 
+    /**
+     * Specifies the size of the tile buffer on each side.
+     * A value of 0 produces no buffer. A value of 512 produces a buffer as wide as the tile itself.
+     * Larger values produce fewer rendering artifacts near tile edges and slower performance.
+     * The default value is 128.
+     */
+    buffer: PropTypes.number, 
+    /**
+     * Specifies the Douglas-Peucker simplification tolerance.
+     * A greater value produces simpler geometries and improves performance.
+     * The default value is 0.375.
+     */
+    tolerance: PropTypes.number, 
+    /**
+     * Whether to calculate line distance metrics.
+     * This is required for line layers that specify lineGradient values.
+     * The default value is false.
+     */
+    lineMetrics: PropTypes.bool, 
+    /**
+     * Source press listener, gets called when a user presses one of the children layers only
+     * if that layer has a higher z-index than another source layers
+     *
+     * @param {Object} event
+     * @param {Object[]} event.features - the geojson features that have hit by the press (might be multiple)
+     * @param {Object} event.coordinates - the coordinates of the click
+     * @param {Object} event.point - the point of the click
+     * @return void
+     */
+    onPress: PropTypes.func, 
+    /**
+     * Overrides the default touch hitbox(44x44 pixels) for the source layers
+     */
+    hitbox: PropTypes.shape({
+        /**
+         * `width` of hitbox
+         */
+        width: PropTypes.number.isRequired,
+        /**
+         * `height` of hitbox
+         */
+        height: PropTypes.number.isRequired,
+    }) });
+ShapeSource.defaultProps = {
+    id: MapboxGL.StyleSource.DefaultSourceID,
+};
+const RCTMGLShapeSource = requireNativeComponent(NATIVE_MODULE_NAME, ShapeSource, {
+    nativeOnly: {
+        hasPressListener: true,
+        onMapboxShapeSourcePress: true,
+    },
+});
+export default ShapeSource;
diff --git a/b/javascript/components/SkyLayer.js b/b/javascript/components/SkyLayer.js
new file mode 100644
index 0000000000000000000000000000000000000000..7ff15f57898c994194c86482c12d9016c5aa31ae
--- /dev/null
+++ b/b/javascript/components/SkyLayer.js
@@ -0,0 +1,56 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import { NativeModules, requireNativeComponent } from 'react-native';
+import { viewPropTypes } from '../utils';
+import { SkyLayerStyleProp } from '../utils/styleMap';
+import AbstractLayer from './AbstractLayer';
+const MapboxGL = NativeModules.MGLModule;
+export const NATIVE_MODULE_NAME = 'RCTMGLSkyLayer';
+/**
+ * SkyLayer is a spherical dome around the map that is always rendered behind all other layers
+ */
+class SkyLayer extends AbstractLayer {
+    render() {
+        return (<RCTMGLSkyLayer testID="rctmglSkyLayer" ref="nativeLayer" {...this.baseProps}/>);
+    }
+}
+SkyLayer.propTypes = Object.assign(Object.assign({}, viewPropTypes), { 
+    /**
+     * A string that uniquely identifies the source in the style to which it is added.
+     */
+    id: PropTypes.string.isRequired, 
+    /**
+     * The source from which to obtain the data to style.
+     * If the source has not yet been added to the current style, the behavior is undefined.
+     */
+    sourceID: PropTypes.string, 
+    /**
+     * Inserts a layer above aboveLayerID.
+     */
+    aboveLayerID: PropTypes.string, 
+    /**
+     * Inserts a layer below belowLayerID
+     */
+    belowLayerID: PropTypes.string, 
+    /**
+     * Inserts a layer at a specified index
+     */
+    layerIndex: PropTypes.number, 
+    /**
+     *  Filter only the features in the source layer that satisfy a condition that you define
+     */
+    filter: PropTypes.array, 
+    /**
+     * Customizable style attributes
+     */
+    style: PropTypes.oneOfType([
+        SkyLayerStyleProp,
+        PropTypes.arrayOf(SkyLayerStyleProp),
+    ]) });
+SkyLayer.defaultProps = {
+    sourceID: MapboxGL.StyleSource.DefaultSourceID,
+};
+const RCTMGLSkyLayer = requireNativeComponent(NATIVE_MODULE_NAME, SkyLayer, {
+    nativeOnly: { reactStyle: true },
+});
+export default SkyLayer;
diff --git a/b/javascript/components/Style.js b/b/javascript/components/Style.js
new file mode 100644
index 0000000000000000000000000000000000000000..b10b55d0338f0baba96af79eb059f76136fea3fc
--- /dev/null
+++ b/b/javascript/components/Style.js
@@ -0,0 +1,245 @@
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+import React, { useMemo, useState, useEffect } from 'react';
+import PropTypes from 'prop-types';
+import CircleLayer from './CircleLayer';
+import RasterLayer from './RasterLayer';
+import SymbolLayer from './SymbolLayer';
+import LineLayer from './LineLayer';
+import FillLayer from './FillLayer';
+import FillExtrusionLayer from './FillExtrusionLayer';
+import BackgroundLayer from './BackgroundLayer';
+import HeatmapLayer from './HeatmapLayer';
+import VectorSource from './VectorSource';
+import RasterSource from './RasterSource';
+import ImageSource from './ImageSource';
+import ShapeSource from './ShapeSource';
+function toCamelCase(s) {
+    return s.replace(/([-_][a-z])/gi, ($1) => {
+        return $1.toUpperCase().replace('-', '').replace('_', '');
+    });
+}
+// Patches the Mapbox Style Specification keys into the style props attributes:
+// icon-allow-overlap -> iconAllowOverlap
+function toCamelCaseKeys(oldObj) {
+    if (!oldObj) {
+        return {};
+    }
+    const newObj = {};
+    Object.keys(oldObj).forEach((key) => {
+        const value = oldObj[key];
+        if (key.includes('-')) {
+            newObj[toCamelCase(key)] = value;
+        }
+        else {
+            newObj[key] = value;
+        }
+    });
+    return newObj;
+}
+function getLayerComponentType(layer) {
+    const { type } = layer;
+    switch (type) {
+        case 'circle':
+            return CircleLayer;
+        case 'symbol':
+            return SymbolLayer;
+        case 'raster':
+            return RasterLayer;
+        case 'line':
+            return LineLayer;
+        case 'fill':
+            return FillLayer;
+        case 'fill-extrusion':
+            return FillExtrusionLayer;
+        case 'background':
+            return BackgroundLayer;
+        case 'heatmap':
+            return HeatmapLayer;
+    }
+    console.warn(`Mapbox layer type '${type}' is not supported/`);
+    return null;
+}
+function asLayerComponent(layer) {
+    const LayerComponent = getLayerComponentType(layer);
+    if (!LayerComponent) {
+        return null;
+    }
+    const style = Object.assign(Object.assign({}, toCamelCaseKeys(layer.paint)), toCamelCaseKeys(layer.layout));
+    const layerProps = {};
+    if (layer.source) {
+        layerProps.sourceID = layer.source;
+    }
+    if (layer['source-layer']) {
+        layerProps.sourceLayerID = layer['source-layer'];
+    }
+    if (layer.minzoom) {
+        layerProps.minZoomLevel = layer.minzoom;
+    }
+    if (layer.maxzoom) {
+        layerProps.maxZoomLevel = layer.maxzoom;
+    }
+    if (layer.filter) {
+        layerProps.filter = layer.filter;
+    }
+    if (Object.keys(style).length) {
+        layerProps.style = style;
+    }
+    return <LayerComponent key={layer.id} id={layer.id} {...layerProps}/>;
+}
+function getTileSourceProps(source) {
+    const sourceProps = {};
+    if (source.url) {
+        sourceProps.url = source.url;
+    }
+    if (source.tiles) {
+        sourceProps.tileUrlTemplates = source.tiles;
+    }
+    if (source.minzoom !== undefined) {
+        sourceProps.minZoomLevel = source.minzoom;
+    }
+    if (source.maxzoom !== undefined) {
+        sourceProps.maxZoomLevel = source.maxzoom;
+    }
+    if (source.attribution) {
+        sourceProps.attribution = source.attribution;
+    }
+    if (source.scheme && source.scheme === 'tms') {
+        sourceProps.tms = true;
+    }
+    return sourceProps;
+}
+function getVectorSource(id, source) {
+    const sourceProps = Object.assign({}, getTileSourceProps(source));
+    return <VectorSource key={id} id={id} {...sourceProps}/>;
+}
+function getRasterSource(id, source) {
+    const sourceProps = Object.assign({}, getTileSourceProps(source));
+    if (source.tileSize) {
+        sourceProps.tileSize = source.tileSize;
+    }
+    return <RasterSource key={id} id={id} {...sourceProps}/>;
+}
+function getImageSource(id, source) {
+    const sourceProps = {
+        url: source.url,
+        coordinates: source.coordinates,
+    };
+    return <ImageSource key={id} id={id} {...sourceProps}/>;
+}
+function getShapeSource(id, source) {
+    const sourceProps = {};
+    if (source.data && typeof source.data === 'string') {
+        sourceProps.url = source.data;
+    }
+    else if (source.data && typeof source.data === 'object') {
+        sourceProps.shape = source.data;
+    }
+    if (source.cluster !== undefined) {
+        sourceProps.cluster = source.cluster;
+    }
+    if (source.clusterRadius !== undefined) {
+        sourceProps.clusterRadius = source.clusterRadius;
+    }
+    if (source.maxzoom !== undefined) {
+        sourceProps.maxZoomLevel = source.maxzoom;
+    }
+    if (source.clusterMaxZoom !== undefined) {
+        sourceProps.clusterMaxZoomLevel = source.clusterMaxZoom;
+    }
+    if (source.clusterProperties !== undefined) {
+        sourceProps.clusterProperties = source.clusterProperties;
+    }
+    if (source.buffer !== undefined) {
+        sourceProps.buffer = source.buffer;
+    }
+    if (source.tolerance !== undefined) {
+        sourceProps.tolerance = source.tolerance;
+    }
+    if (source.lineMetrics !== undefined) {
+        sourceProps.lineMetrics = source.lineMetrics;
+    }
+    return <ShapeSource key={id} id={id} {...sourceProps}/>;
+}
+function asSourceComponent(id, source) {
+    switch (source.type) {
+        case 'vector':
+            return getVectorSource(id, source);
+        case 'raster':
+            return getRasterSource(id, source);
+        case 'image':
+            return getImageSource(id, source);
+        case 'geojson':
+            return getShapeSource(id, source);
+    }
+    console.warn(`Mapbox source type '${source.type}' is not supported/`);
+    return null;
+}
+/**
+ * Style is a component that automatically adds sources / layers to the map using Mapbox GL Style Spec.
+ * Only [`sources`](https://docs.mapbox.com/mapbox-gl-js/style-spec/sources) & [`layers`](https://docs.mapbox.com/mapbox-gl-js/style-spec/layers/) are supported.
+ * Other fields such as `sprites`, `glyphs` etc. will be ignored. Not all layer / source attributes from the style spec are supported, in general the supported attributes will mentioned under https://github.com/rnmapbox/maps/tree/main/docs.
+ */
+const Style = (props) => {
+    const [fetchedJson, setFetchedJson] = useState({});
+    const json = typeof props.json === 'object' ? props.json : fetchedJson;
+    // Fetch style when props.json is a URL
+    useEffect(() => {
+        const abortController = new AbortController();
+        const fetchStyleJson = () => __awaiter(void 0, void 0, void 0, function* () {
+            try {
+                const response = yield fetch(props.json, {
+                    signal: abortController.signal,
+                });
+                const responseJson = yield response.json();
+                setFetchedJson(responseJson);
+            }
+            catch (e) {
+                if (e.name === 'AbortError') {
+                    return;
+                }
+                throw e;
+            }
+        });
+        if (typeof props.json === 'string') {
+            fetchStyleJson();
+        }
+        return function cleanup() {
+            abortController.abort();
+        };
+    }, [props.json]);
+    // Extract layer components from json
+    const layerComponents = useMemo(() => {
+        if (!json.layers) {
+            return [];
+        }
+        return json.layers.map(asLayerComponent).filter((x) => !!x);
+    }, [json.layers]);
+    // Extract source components from json
+    const sourceComponents = useMemo(() => {
+        if (!json.sources || !Object.keys(json.sources)) {
+            return [];
+        }
+        return Object.keys(json.sources)
+            .map((id) => asSourceComponent(id, json.sources[id]))
+            .filter((x) => !!x);
+    }, [json.sources]);
+    return (<>
+      {sourceComponents}
+      {layerComponents}
+    </>);
+};
+Style.propTypes = {
+    /**
+     * A JSON object conforming to the schema described in the Mapbox Style Specification , or a URL to such JSON.
+     */
+    json: PropTypes.any,
+};
+export default Style;
diff --git a/b/javascript/components/SymbolLayer.js b/b/javascript/components/SymbolLayer.js
new file mode 100644
index 0000000000000000000000000000000000000000..1b6e9705caa05ddd3e26b03df0ab5f9f24bc70d3
--- /dev/null
+++ b/b/javascript/components/SymbolLayer.js
@@ -0,0 +1,84 @@
+import React from 'react';
+import { View, NativeModules, requireNativeComponent } from 'react-native';
+import PropTypes from 'prop-types';
+import { viewPropTypes } from '../utils';
+import { SymbolLayerStyleProp } from '../utils/styleMap';
+import AbstractLayer from './AbstractLayer';
+const MapboxGL = NativeModules.MGLModule;
+export const NATIVE_MODULE_NAME = 'RCTMGLSymbolLayer';
+/**
+ * SymbolLayer is a style layer that renders icon and text labels at points or along lines on the map.
+ */
+class SymbolLayer extends AbstractLayer {
+    _shouldSnapshot() {
+        let isSnapshot = false;
+        if (React.Children.count(this.props.children) <= 0) {
+            return isSnapshot;
+        }
+        React.Children.forEach(this.props.children, (child) => {
+            if (child.type === View) {
+                isSnapshot = true;
+            }
+        });
+        return isSnapshot;
+    }
+    render() {
+        const props = Object.assign(Object.assign({}, this.baseProps), { snapshot: this._shouldSnapshot(), sourceLayerID: this.props.sourceLayerID });
+        return (<RCTMGLSymbolLayer ref="nativeLayer" {...props}>
+        {this.props.children}
+      </RCTMGLSymbolLayer>);
+    }
+}
+SymbolLayer.propTypes = Object.assign(Object.assign({}, viewPropTypes), { 
+    /**
+     * A string that uniquely identifies the source in the style to which it is added.
+     */
+    id: PropTypes.string.isRequired, 
+    /**
+     * The source from which to obtain the data to style.
+     * If the source has not yet been added to the current style, the behavior is undefined.
+     * Inferred from parent source only if the layer is a direct child to it.
+     */
+    sourceID: PropTypes.string, 
+    /**
+     * Identifier of the layer within the source identified by the sourceID property from which the receiver obtains the data to style.
+     */
+    sourceLayerID: PropTypes.string, 
+    /**
+     * Inserts a layer above aboveLayerID.
+     */
+    aboveLayerID: PropTypes.string, 
+    /**
+     * Inserts a layer below belowLayerID
+     */
+    belowLayerID: PropTypes.string, 
+    /**
+     * Inserts a layer at a specified index
+     */
+    layerIndex: PropTypes.number, 
+    /**
+     *  Filter only the features in the source layer that satisfy a condition that you define
+     */
+    filter: PropTypes.array, 
+    /**
+     * The minimum zoom level at which the layer gets parsed and appears.
+     */
+    minZoomLevel: PropTypes.number, 
+    /**
+     * The maximum zoom level at which the layer gets parsed and appears.
+     */
+    maxZoomLevel: PropTypes.number, 
+    /**
+     * Customizable style attributes
+     */
+    style: PropTypes.oneOfType([
+        SymbolLayerStyleProp,
+        PropTypes.arrayOf(SymbolLayerStyleProp),
+    ]) });
+SymbolLayer.defaultProps = {
+    sourceID: MapboxGL.StyleSource.DefaultSourceID,
+};
+const RCTMGLSymbolLayer = requireNativeComponent(NATIVE_MODULE_NAME, SymbolLayer, {
+    nativeOnly: { reactStyle: true, snapshot: true },
+});
+export default SymbolLayer;
diff --git a/b/javascript/components/Terrain.js b/b/javascript/components/Terrain.js
new file mode 100644
index 0000000000000000000000000000000000000000..22a99e19ec6854a5e8308e213f8aeab41da8e6ee
--- /dev/null
+++ b/b/javascript/components/Terrain.js
@@ -0,0 +1,35 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import { NativeModules, requireNativeComponent } from 'react-native';
+import { viewPropTypes } from '../utils';
+const MapboxGL = NativeModules.MGLModule;
+export const NATIVE_MODULE_NAME = 'RCTMGLTerrain';
+/**
+ * A global modifier that elevates layers and markers based on a DEM data source.
+ */
+class Terrain extends React.PureComponent {
+    get baseProps() {
+        return Object.assign(Object.assign({}, this.props), { sourceID: this.props.sourceID });
+    }
+    render() {
+        const props = Object.assign(Object.assign({}, this.baseProps), { sourceID: this.props.sourceID });
+        return <RCTMGLTerrain ref="nativeLayer" {...props}/>;
+    }
+}
+Terrain.propTypes = Object.assign(Object.assign({}, viewPropTypes), { 
+    /**
+     * Name of a source of raster_dem type to be used for terrain elevation.
+     */
+    sourceID: PropTypes.string, 
+    /**
+     * Optional number between 0 and 1000 inclusive. Defaults to 1. Supports interpolateexpressions. Transitionable.
+     * Exaggerates the elevation of the terrain by multiplying the data from the DEM with this value.
+     */
+    exaggeration: PropTypes.oneOfType([PropTypes.number, PropTypes.array]) });
+Terrain.defaultProps = {
+    sourceID: MapboxGL.StyleSource.DefaultSourceID,
+};
+const RCTMGLTerrain = requireNativeComponent(NATIVE_MODULE_NAME, Terrain, {
+    nativeOnly: { reactStyle: true },
+});
+export default Terrain;
diff --git a/b/javascript/components/UserLocation.js b/b/javascript/components/UserLocation.js
new file mode 100644
index 0000000000000000000000000000000000000000..a11dcff1f743f2d73b096ba8581ec8184ebd663b
--- /dev/null
+++ b/b/javascript/components/UserLocation.js
@@ -0,0 +1,226 @@
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+import React from 'react';
+import PropTypes from 'prop-types';
+import locationManager from '../modules/location/locationManager';
+import Annotation from './annotations/Annotation';
+import CircleLayer from './CircleLayer';
+import HeadingIndicator from './HeadingIndicator';
+import NativeUserLocation from './NativeUserLocation';
+const mapboxBlue = 'rgba(51, 181, 229, 100)';
+const layerStyles = {
+    normal: {
+        pluse: {
+            circleRadius: 15,
+            circleColor: mapboxBlue,
+            circleOpacity: 0.2,
+            circlePitchAlignment: 'map',
+        },
+        background: {
+            circleRadius: 9,
+            circleColor: '#fff',
+            circlePitchAlignment: 'map',
+        },
+        foreground: {
+            circleRadius: 6,
+            circleColor: mapboxBlue,
+            circlePitchAlignment: 'map',
+        },
+    },
+};
+export const normalIcon = (showsUserHeadingIndicator, heading) => [
+    <CircleLayer key="mapboxUserLocationPluseCircle" id="mapboxUserLocationPluseCircle" style={layerStyles.normal.pluse}/>,
+    <CircleLayer key="mapboxUserLocationWhiteCircle" id="mapboxUserLocationWhiteCircle" style={layerStyles.normal.background}/>,
+    <CircleLayer key="mapboxUserLocationBlueCicle" id="mapboxUserLocationBlueCicle" aboveLayerID="mapboxUserLocationWhiteCircle" style={layerStyles.normal.foreground}/>,
+    ...(showsUserHeadingIndicator && heading !== null
+        ? [HeadingIndicator(heading)]
+        : []),
+];
+class UserLocation extends React.Component {
+    constructor(props) {
+        super(props);
+        // required as #setLocationManager attempts to setState
+        // after component unmount
+        this._isMounted = null;
+        this.locationManagerRunning = false;
+        this.state = {
+            shouldShowUserLocation: false,
+            coordinates: null,
+            heading: null,
+        };
+        this._onLocationUpdate = this._onLocationUpdate.bind(this);
+    }
+    componentDidMount() {
+        return __awaiter(this, void 0, void 0, function* () {
+            this._isMounted = true;
+            yield this.setLocationManager({
+                running: this.needsLocationManagerRunning(),
+            });
+            if (this.renderMode === UserLocation.RenderMode.Native) {
+                return;
+            }
+            locationManager.setMinDisplacement(this.props.minDisplacement);
+        });
+    }
+    componentDidUpdate(prevProps) {
+        return __awaiter(this, void 0, void 0, function* () {
+            yield this.setLocationManager({
+                running: this.needsLocationManagerRunning(),
+            });
+            if (this.props.minDisplacement !== prevProps.minDisplacement) {
+                locationManager.setMinDisplacement(this.props.minDisplacement);
+            }
+        });
+    }
+    componentWillUnmount() {
+        return __awaiter(this, void 0, void 0, function* () {
+            this._isMounted = false;
+            yield this.setLocationManager({ running: false });
+        });
+    }
+    /**
+     * Whether to start or stop listening to the locationManager
+     *
+     * Notice, that listening will start automatically when
+     * either `onUpdate` or `visible` are set
+     *
+     * @async
+     * @param {Object} running - Object with key `running` and `boolean` value
+     * @return {Promise<void>}
+     */
+    setLocationManager({ running }) {
+        return __awaiter(this, void 0, void 0, function* () {
+            if (this.locationManagerRunning !== running) {
+                this.locationManagerRunning = running;
+                if (running) {
+                    locationManager.addListener(this._onLocationUpdate);
+                    const location = yield locationManager.getLastKnownLocation();
+                    this._onLocationUpdate(location);
+                }
+                else {
+                    locationManager.removeListener(this._onLocationUpdate);
+                }
+            }
+        });
+    }
+    /**
+     *
+     * If locationManager should be running
+     *
+     * @return {boolean}
+     */
+    needsLocationManagerRunning() {
+        return (!!this.props.onUpdate ||
+            (this.props.renderMode === UserLocation.RenderMode.Normal &&
+                this.props.visible));
+    }
+    _onLocationUpdate(location) {
+        if (!this._isMounted || !location) {
+            return;
+        }
+        let coordinates = null;
+        let heading = null;
+        if (location && location.coords) {
+            const { longitude, latitude } = location.coords;
+            ({ heading } = location.coords);
+            coordinates = [longitude, latitude];
+        }
+        this.setState({
+            coordinates,
+            heading,
+        });
+        if (this.props.onUpdate) {
+            this.props.onUpdate(location);
+        }
+    }
+    _renderNative() {
+        const { androidRenderMode, showsUserHeadingIndicator } = this.props;
+        let props = {
+            androidRenderMode,
+            iosShowsUserHeadingIndicator: showsUserHeadingIndicator,
+        };
+        return <NativeUserLocation {...props}/>;
+    }
+    render() {
+        const { heading, coordinates } = this.state;
+        const { children, visible, showsUserHeadingIndicator, onPress, animated } = this.props;
+        if (!visible) {
+            return null;
+        }
+        if (this.props.renderMode === UserLocation.RenderMode.Native) {
+            return this._renderNative();
+        }
+        if (!coordinates) {
+            return null;
+        }
+        return (<Annotation animated={animated} id="mapboxUserLocation" onPress={onPress} coordinates={coordinates} style={{
+                iconRotate: heading,
+            }}>
+        {children || normalIcon(showsUserHeadingIndicator, heading)}
+      </Annotation>);
+    }
+}
+UserLocation.propTypes = {
+    /**
+     * Whether location icon is animated between updates
+     */
+    animated: PropTypes.bool,
+    /**
+     * Which render mode to use.
+     * Can either be `normal` or `native`
+     */
+    renderMode: PropTypes.oneOf(['normal', 'native']),
+    /**
+     * native/android only render mode
+     *
+     *  - normal: just a circle
+     *  - compass: triangle with heading
+     *  - gps: large arrow
+     *
+     * @platform android
+     */
+    androidRenderMode: PropTypes.oneOf(['normal', 'compass', 'gps']),
+    /**
+     * Whether location icon is visible
+     */
+    visible: PropTypes.bool,
+    /**
+     * Callback that is triggered on location icon press
+     */
+    onPress: PropTypes.func,
+    /**
+     * Callback that is triggered on location update
+     */
+    onUpdate: PropTypes.func,
+    /**
+     * Show or hide small arrow which indicates direction the device is pointing relative to north.
+     */
+    showsUserHeadingIndicator: PropTypes.bool,
+    /**
+     * Minimum amount of movement before GPS location is updated in meters
+     */
+    minDisplacement: PropTypes.number,
+    /**
+     * Custom location icon of type mapbox-gl-native components
+     */
+    children: PropTypes.any,
+};
+UserLocation.defaultProps = {
+    animated: true,
+    visible: true,
+    showsUserHeadingIndicator: false,
+    minDisplacement: 0,
+    renderMode: 'normal',
+};
+UserLocation.RenderMode = {
+    Native: 'native',
+    Normal: 'normal',
+};
+export default UserLocation;
diff --git a/b/javascript/components/VectorSource.js b/b/javascript/components/VectorSource.js
new file mode 100644
index 0000000000000000000000000000000000000000..ef1b3dead30f8b6b7a72fa3eb0ceb8e5d36b4b84
--- /dev/null
+++ b/b/javascript/components/VectorSource.js
@@ -0,0 +1,160 @@
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+import React from 'react';
+import PropTypes from 'prop-types';
+import { NativeModules, requireNativeComponent } from 'react-native';
+import { cloneReactChildrenWithProps, viewPropTypes, isFunction, isAndroid, } from '../utils';
+import { getFilter } from '../utils/filterUtils';
+import { copyPropertiesAsDeprecated } from '../utils/deprecation';
+import AbstractSource from './AbstractSource';
+import NativeBridgeComponent from './NativeBridgeComponent';
+const MapboxGL = NativeModules.MGLModule;
+export const NATIVE_MODULE_NAME = 'RCTMGLVectorSource';
+/**
+ * VectorSource is a map content source that supplies tiled vector data in Mapbox Vector Tile format to be shown on the map.
+ * The location of and metadata about the tiles are defined either by an option dictionary or by an external file that conforms to the TileJSON specification.
+ */
+class VectorSource extends NativeBridgeComponent(AbstractSource) {
+    constructor(props) {
+        super(props, NATIVE_MODULE_NAME);
+    }
+    _setNativeRef(nativeRef) {
+        this._nativeRef = nativeRef;
+        super._runPendingNativeCommands(nativeRef);
+    }
+    /**
+     * Returns all features that match the query parameters regardless of whether or not the feature is
+     * currently rendered on the map. The domain of the query includes all currently-loaded vector tiles
+     * and GeoJSON source tiles. This function does not check tiles outside of the visible viewport.
+     *
+     * @example
+     * vectorSource.features(['id1', 'id2'])
+     *
+     * @param  {Array=} layerIDs - A set of strings that correspond to the names of layers defined in the current style. Only the features contained in these layers are included in the returned array.
+     * @param  {Array=} filter - an optional filter statement to filter the returned Features.
+     * @return {FeatureCollection}
+     */
+    features(layerIDs = [], filter = []) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const res = yield this._runNativeCommand('features', this._nativeRef, [
+                layerIDs,
+                getFilter(filter),
+            ]);
+            if (isAndroid()) {
+                return JSON.parse(res.data);
+            }
+            return res.data;
+        });
+    }
+    onPress(event) {
+        const { nativeEvent: { payload: { features, coordinates, point }, }, } = event;
+        let newEvent = {
+            features,
+            coordinates,
+            point,
+        };
+        newEvent = copyPropertiesAsDeprecated(event, newEvent, (key) => {
+            console.warn(`event.${key} is deprecated on VectorSource#onPress, please use event.features`);
+        }, {
+            nativeEvent: (origNativeEvent) => (Object.assign(Object.assign({}, origNativeEvent), { payload: features[0] })),
+        });
+        this.props.onPress(newEvent);
+    }
+    render() {
+        const props = {
+            id: this.props.id,
+            url: this.props.url,
+            tileUrlTemplates: this.props.tileUrlTemplates,
+            minZoomLevel: this.props.minZoomLevel,
+            maxZoomLevel: this.props.maxZoomLevel,
+            tms: this.props.tms,
+            attribution: this.props.attribution,
+            hitbox: this.props.hitbox,
+            hasPressListener: isFunction(this.props.onPress),
+            onMapboxVectorSourcePress: this.onPress.bind(this),
+            onPress: undefined,
+            ref: (nativeRef) => this._setNativeRef(nativeRef),
+            onAndroidCallback: isAndroid() ? this._onAndroidCallback : undefined,
+        };
+        return (<RCTMGLVectorSource ref="nativeSource" {...props}>
+        {cloneReactChildrenWithProps(this.props.children, {
+                sourceID: this.props.id,
+            })}
+      </RCTMGLVectorSource>);
+    }
+}
+VectorSource.propTypes = Object.assign(Object.assign({}, viewPropTypes), { 
+    /**
+     * A string that uniquely identifies the source.
+     */
+    id: PropTypes.string.isRequired, 
+    /**
+     * A URL to a TileJSON configuration file describing the source’s contents and other metadata.
+     */
+    url: PropTypes.string, 
+    /**
+     * An array of tile URL templates. If multiple endpoints are specified, clients may use any combination of endpoints.
+     * Example: https://example.com/vector-tiles/{z}/{x}/{y}.pbf
+     */
+    tileUrlTemplates: PropTypes.arrayOf(PropTypes.string), 
+    /**
+     * An unsigned integer that specifies the minimum zoom level at which to display tiles from the source.
+     * The value should be between 0 and 22, inclusive, and less than
+     * maxZoomLevel, if specified. The default value for this option is 0.
+     */
+    minZoomLevel: PropTypes.number, 
+    /**
+     * An unsigned integer that specifies the maximum zoom level at which to display tiles from the source.
+     * The value should be between 0 and 22, inclusive, and less than
+     * minZoomLevel, if specified. The default value for this option is 22.
+     */
+    maxZoomLevel: PropTypes.number, 
+    /**
+     * Influences the y direction of the tile coordinates. (tms inverts y axis)
+     */
+    tms: PropTypes.bool, 
+    /**
+     * An HTML or literal text string defining the buttons to be displayed in an action sheet when the
+     * source is part of a map view’s style and the map view’s attribution button is pressed.
+     */
+    attribution: PropTypes.string, 
+    /**
+     * Source press listener, gets called when a user presses one of the children layers only
+     * if that layer has a higher z-index than another source layers
+     *
+     * @param {Object} event
+     * @param {Object[]} event.features - the geojson features that have hit by the press (might be multiple)
+     * @param {Object} event.coordinates - the coordinates of the click
+     * @param {Object} event.point - the point of the click
+     */
+    onPress: PropTypes.func, 
+    /**
+     * Overrides the default touch hitbox(44x44 pixels) for the source layers
+     */
+    hitbox: PropTypes.shape({
+        /**
+         * `width` of hitbox
+         */
+        width: PropTypes.number.isRequired,
+        /**
+         * `height` of hitbox
+         */
+        height: PropTypes.number.isRequired,
+    }) });
+VectorSource.defaultProps = {
+    id: MapboxGL.StyleSource.DefaultSourceID,
+};
+const RCTMGLVectorSource = requireNativeComponent(NATIVE_MODULE_NAME, VectorSource, {
+    nativeOnly: {
+        hasPressListener: true,
+        onMapboxVectorSourcePress: true,
+    },
+});
+export default VectorSource;
diff --git a/b/javascript/components/annotations/Annotation.js b/b/javascript/components/annotations/Annotation.js
new file mode 100644
index 0000000000000000000000000000000000000000..ddb6706d10832d9b78ed318d52e37953245be52e
--- /dev/null
+++ b/b/javascript/components/annotations/Annotation.js
@@ -0,0 +1,92 @@
+import React from 'react';
+import { Easing } from 'react-native';
+import PropTypes from 'prop-types';
+import SymbolLayer from '../SymbolLayer';
+import Animated from '../../utils/animated/Animated';
+import AnimatedMapPoint from '../../utils/animated/AnimatedPoint';
+class Annotation extends React.Component {
+    constructor(props) {
+        super(props);
+        const shape = this._getShapeFromProps(props);
+        this.state = {
+            shape: props.animated ? new AnimatedMapPoint(shape) : shape,
+        };
+        this.onPress = this.onPress.bind(this);
+    }
+    componentDidUpdate(prevProps) {
+        if (!Array.isArray(this.props.coordinates)) {
+            this.setState({ shape: null });
+            return;
+        }
+        const hasCoordChanged = prevProps.coordinates[0] !== this.props.coordinates[0] ||
+            prevProps.coordinates[1] !== this.props.coordinates[1];
+        if (!hasCoordChanged) {
+            return;
+        }
+        if (this.props.animated && this.state.shape) {
+            // flush current animations
+            this.state.shape.stopAnimation();
+            this.state.shape
+                .timing({
+                coordinates: this.props.coordinates,
+                easing: this.props.animationEasingFunction,
+                duration: this.props.animationDuration,
+            })
+                .start();
+        }
+        else if (!this.state.shape || !this.props.animated) {
+            const shape = this._getShapeFromProps(this.props);
+            this.setState({
+                shape: this.props.animated ? new AnimatedMapPoint(shape) : shape,
+            });
+        }
+    }
+    onPress() {
+        if (this.props.onPress) {
+            this.props.onPress();
+        }
+    }
+    _getShapeFromProps(props = {}) {
+        const lng = props.coordinates[0] || 0;
+        const lat = props.coordinates[1] || 0;
+        return { type: 'Point', coordinates: [lng, lat] };
+    }
+    get symbolStyle() {
+        if (!this.props.icon) {
+            return undefined;
+        }
+        return Object.assign({}, this.props.style, {
+            iconImage: this.props.icon,
+        });
+    }
+    render() {
+        if (!this.props.coordinates) {
+            return null;
+        }
+        return (<Animated.ShapeSource id={this.props.id} ref="source" onPress={this.onPress} shape={this.state.shape}>
+        {this.symbolStyle && (<SymbolLayer id={`${this.props.id}-symbol`} style={this.symbolStyle}/>)}
+        {this.props.children}
+      </Animated.ShapeSource>);
+    }
+}
+Annotation.propTypes = {
+    id: PropTypes.string.isRequired,
+    animated: PropTypes.bool,
+    animationDuration: PropTypes.number,
+    animationEasingFunction: PropTypes.func,
+    coordinates: PropTypes.arrayOf(PropTypes.number),
+    onPress: PropTypes.func,
+    children: PropTypes.any,
+    style: PropTypes.any,
+    icon: PropTypes.oneOfType([
+        PropTypes.string,
+        PropTypes.number,
+        PropTypes.object,
+    ]),
+};
+Annotation.defaultProps = {
+    animated: false,
+    animationDuration: 1000,
+    animationEasingFunction: Easing.linear,
+};
+export default Annotation;
diff --git a/b/javascript/index.js b/b/javascript/index.js
new file mode 100644
index 0000000000000000000000000000000000000000..fd19e6892ae9c7a7850dd1b4c47c9a298fdb767f
--- /dev/null
+++ b/b/javascript/index.js
@@ -0,0 +1,89 @@
+import { NativeModules } from 'react-native';
+import { Camera } from './components/Camera';
+import { Atmosphere } from './components/Atmosphere';
+import MapView from './components/MapView';
+import Light from './components/Light';
+import PointAnnotation from './components/PointAnnotation';
+import Annotation from './components/annotations/Annotation';
+import Callout from './components/Callout';
+import UserLocation from './components/UserLocation';
+import VectorSource from './components/VectorSource';
+import ShapeSource from './components/ShapeSource';
+import RasterSource from './components/RasterSource';
+import RasterDemSource from './components/RasterDemSource';
+import ImageSource from './components/ImageSource';
+import Images from './components/Images';
+import FillLayer from './components/FillLayer';
+import FillExtrusionLayer from './components/FillExtrusionLayer';
+import HeatmapLayer from './components/HeatmapLayer';
+import LineLayer from './components/LineLayer';
+import CircleLayer from './components/CircleLayer';
+import SkyLayer from './components/SkyLayer';
+import SymbolLayer from './components/SymbolLayer';
+import RasterLayer from './components/RasterLayer';
+import BackgroundLayer from './components/BackgroundLayer';
+import Terrain from './components/Terrain';
+import locationManager from './modules/location/locationManager';
+import offlineManager from './modules/offline/offlineManager';
+import snapshotManager from './modules/snapshot/snapshotManager';
+import MarkerView from './components/MarkerView';
+import Animated from './utils/animated/Animated';
+import AnimatedMapPoint from './utils/animated/AnimatedPoint';
+import AnimatedShape from './utils/animated/AnimatedShape';
+import AnimatedCoordinatesArray from './utils/animated/AnimatedCoordinatesArray';
+import AnimatedExtractCoordinateFromArray from './utils/animated/AnimatedExtractCoordinateFromArray';
+import AnimatedRouteCoordinatesArray from './utils/animated/AnimatedRouteCoordinatesArray';
+import Style from './components/Style';
+import Logger from './utils/Logger';
+import { requestAndroidLocationPermissions } from './requestAndroidLocationPermissions';
+const MapboxGL = Object.assign({}, NativeModules.MGLModule);
+// static methods
+MapboxGL.requestAndroidLocationPermissions = requestAndroidLocationPermissions;
+MapboxGL.UserTrackingModes = Camera.UserTrackingModes;
+// components
+MapboxGL.MapView = MapView;
+MapboxGL.Light = Light;
+MapboxGL.PointAnnotation = PointAnnotation;
+MapboxGL.Callout = Callout;
+MapboxGL.UserLocation = UserLocation;
+MapboxGL.Camera = Camera;
+MapboxGL.Style = Style;
+// annotations
+MapboxGL.Annotation = Annotation;
+MapboxGL.MarkerView = MarkerView;
+// sources
+MapboxGL.VectorSource = VectorSource;
+MapboxGL.ShapeSource = ShapeSource;
+MapboxGL.RasterSource = RasterSource;
+MapboxGL.ImageSource = ImageSource;
+MapboxGL.Images = Images;
+MapboxGL.RasterDemSource = RasterDemSource;
+// layers
+MapboxGL.FillLayer = FillLayer;
+MapboxGL.FillExtrusionLayer = FillExtrusionLayer;
+MapboxGL.HeatmapLayer = HeatmapLayer;
+MapboxGL.LineLayer = LineLayer;
+MapboxGL.CircleLayer = CircleLayer;
+MapboxGL.SkyLayer = SkyLayer;
+MapboxGL.SymbolLayer = SymbolLayer;
+MapboxGL.RasterLayer = RasterLayer;
+MapboxGL.BackgroundLayer = BackgroundLayer;
+MapboxGL.Terrain = Terrain;
+MapboxGL.Atmosphere = Atmosphere;
+// modules
+MapboxGL.locationManager = locationManager;
+MapboxGL.offlineManager = offlineManager;
+MapboxGL.snapshotManager = snapshotManager;
+// animated
+MapboxGL.Animated = Animated;
+// utils
+MapboxGL.AnimatedPoint = AnimatedMapPoint;
+MapboxGL.AnimatedCoordinatesArray = AnimatedCoordinatesArray;
+MapboxGL.AnimatedExtractCoordinateFromArray =
+    AnimatedExtractCoordinateFromArray;
+MapboxGL.AnimatedRouteCoordinatesArray = AnimatedRouteCoordinatesArray;
+MapboxGL.AnimatedShape = AnimatedShape;
+MapboxGL.Logger = Logger;
+const { LineJoin } = MapboxGL;
+export { MapView, Light, PointAnnotation, Callout, UserLocation, Camera, Annotation, MarkerView, VectorSource, ShapeSource, RasterSource, RasterDemSource, ImageSource, Images, FillLayer, FillExtrusionLayer, HeatmapLayer, LineLayer, CircleLayer, SkyLayer, SymbolLayer, RasterLayer, BackgroundLayer, Terrain, Atmosphere, locationManager, offlineManager, snapshotManager, AnimatedMapPoint, AnimatedCoordinatesArray, AnimatedShape, Animated, LineJoin, Logger, Style, };
+export default MapboxGL;
diff --git a/b/javascript/index.web.js b/b/javascript/index.web.js
new file mode 100644
index 0000000000000000000000000000000000000000..35013683cb9c299a035f347b5857e462780632ef
--- /dev/null
+++ b/b/javascript/index.web.js
@@ -0,0 +1,2 @@
+export * from './web';
+export { default } from './web';
diff --git a/b/javascript/modules/location/locationManager.js b/b/javascript/modules/location/locationManager.js
new file mode 100644
index 0000000000000000000000000000000000000000..478d4a275faed51077741d89b8a06cc13bf67d7b
--- /dev/null
+++ b/b/javascript/modules/location/locationManager.js
@@ -0,0 +1,87 @@
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+import { NativeModules, NativeEventEmitter } from 'react-native';
+const MapboxGL = NativeModules.MGLModule;
+const MapboxGLLocationManager = NativeModules.MGLLocationModule;
+export const LocationModuleEventEmitter = new NativeEventEmitter(MapboxGLLocationManager);
+class LocationManager {
+    constructor() {
+        this._listeners = [];
+        this._lastKnownLocation = null;
+        this._isListening = false;
+        this.onUpdate = this.onUpdate.bind(this);
+        this.subscription = null;
+    }
+    getLastKnownLocation() {
+        return __awaiter(this, void 0, void 0, function* () {
+            if (!this._lastKnownLocation) {
+                let lastKnownLocation;
+                // as location can be brittle it might happen,
+                // that we get an exception from native land
+                // let's silently catch it and simply log out
+                // instead of throwing an exception
+                try {
+                    lastKnownLocation =
+                        yield MapboxGLLocationManager.getLastKnownLocation();
+                }
+                catch (error) {
+                    console.log('locationManager Error: ', error);
+                }
+                if (!this._lastKnownLocation && lastKnownLocation) {
+                    this._lastKnownLocation = lastKnownLocation;
+                }
+            }
+            return this._lastKnownLocation;
+        });
+    }
+    addListener(listener) {
+        if (!this._isListening) {
+            this.start();
+        }
+        if (!this._listeners.includes(listener)) {
+            this._listeners.push(listener);
+            if (this._lastKnownLocation) {
+                listener(this._lastKnownLocation);
+            }
+        }
+    }
+    removeListener(listener) {
+        this._listeners = this._listeners.filter((l) => l !== listener);
+        if (this._listeners.length === 0) {
+            this.stop();
+        }
+    }
+    removeAllListeners() {
+        this._listeners = [];
+        this.stop();
+    }
+    start(displacement = 0) {
+        if (!this._isListening) {
+            MapboxGLLocationManager.start(displacement);
+            this.subscription = LocationModuleEventEmitter.addListener(MapboxGL.LocationCallbackName.Update, this.onUpdate);
+            this._isListening = true;
+        }
+    }
+    stop() {
+        MapboxGLLocationManager.stop();
+        if (this._isListening) {
+            this.subscription.remove();
+        }
+        this._isListening = false;
+    }
+    setMinDisplacement(minDisplacement) {
+        MapboxGLLocationManager.setMinDisplacement(minDisplacement);
+    }
+    onUpdate(location) {
+        this._lastKnownLocation = location;
+        this._listeners.forEach((l) => l(location));
+    }
+}
+export default new LocationManager();
diff --git a/b/javascript/modules/offline/OfflineCreatePackOptions.js b/b/javascript/modules/offline/OfflineCreatePackOptions.js
new file mode 100644
index 0000000000000000000000000000000000000000..498296c90b75e648f4a29f00c67e00d3d408d62e
--- /dev/null
+++ b/b/javascript/modules/offline/OfflineCreatePackOptions.js
@@ -0,0 +1,33 @@
+import { makeLatLngBounds } from '../../utils/geoUtils';
+import { toJSONString } from '../../utils';
+class OfflineCreatePackOptions {
+    constructor(options = {}) {
+        this._assert(options);
+        this.name = options.name;
+        this.styleURL = options.styleURL;
+        this.bounds = this._makeLatLngBounds(options.bounds);
+        this.minZoom = options.minZoom;
+        this.maxZoom = options.maxZoom;
+        this.metadata = this._makeMetadata(options.metadata);
+    }
+    _assert(options) {
+        if (!options.styleURL) {
+            throw new Error('Style URL must be provided for creating an offline pack');
+        }
+        if (!options.name) {
+            throw new Error('Name must be provided for creating an offline pack');
+        }
+        if (!options.bounds) {
+            throw new Error('Bounds must be provided for creating an offline pack');
+        }
+    }
+    _makeLatLngBounds(bounds) {
+        const ne = bounds[0];
+        const sw = bounds[1];
+        return toJSONString(makeLatLngBounds(ne, sw));
+    }
+    _makeMetadata(metadata) {
+        return JSON.stringify(Object.assign(Object.assign({}, metadata), { name: this.name }));
+    }
+}
+export default OfflineCreatePackOptions;
diff --git a/b/javascript/modules/offline/OfflinePack.js b/b/javascript/modules/offline/OfflinePack.js
new file mode 100644
index 0000000000000000000000000000000000000000..d7f361ff3a53642d583095e6721423607967b7ce
--- /dev/null
+++ b/b/javascript/modules/offline/OfflinePack.js
@@ -0,0 +1,31 @@
+import { NativeModules } from 'react-native';
+const MapboxGLOfflineManager = NativeModules.MGLOfflineModule;
+class OfflinePack {
+    constructor(pack) {
+        this.pack = pack;
+        this._metadata = null;
+    }
+    get name() {
+        const { metadata } = this;
+        return metadata && metadata.name;
+    }
+    get bounds() {
+        return this.pack.bounds;
+    }
+    get metadata() {
+        if (!this._metadata && this.pack.metadata) {
+            this._metadata = JSON.parse(this.pack.metadata);
+        }
+        return this._metadata;
+    }
+    status() {
+        return MapboxGLOfflineManager.getPackStatus(this.name);
+    }
+    resume() {
+        return MapboxGLOfflineManager.resumePackDownload(this.name);
+    }
+    pause() {
+        return MapboxGLOfflineManager.pausePackDownload(this.name);
+    }
+}
+export default OfflinePack;
diff --git a/b/javascript/modules/offline/offlineManager.js b/b/javascript/modules/offline/offlineManager.js
new file mode 100644
index 0000000000000000000000000000000000000000..f4a1dd0525b179021fb55e3cb0e3f3d1bc44a61d
--- /dev/null
+++ b/b/javascript/modules/offline/offlineManager.js
@@ -0,0 +1,361 @@
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+import { NativeModules, NativeEventEmitter } from 'react-native';
+import { isUndefined, isFunction, isAndroid } from '../../utils';
+import OfflineCreatePackOptions from './OfflineCreatePackOptions';
+import OfflinePack from './OfflinePack';
+const MapboxGL = NativeModules.MGLModule;
+const MapboxGLOfflineManager = NativeModules.MGLOfflineModule;
+export const OfflineModuleEventEmitter = new NativeEventEmitter(MapboxGLOfflineManager);
+/**
+ * OfflineManager implements a singleton (shared object) that manages offline packs.
+ * All of this class’s instance methods are asynchronous, reflecting the fact that offline resources are stored in a database.
+ * The shared object maintains a canonical collection of offline packs.
+ */
+class OfflineManager {
+    constructor() {
+        this._hasInitialized = false;
+        this._offlinePacks = {};
+        this._progressListeners = {};
+        this._errorListeners = {};
+        this._onProgress = this._onProgress.bind(this);
+        this._onError = this._onError.bind(this);
+        this.subscriptionProgress = null;
+        this.subscriptionError = null;
+    }
+    /**
+     * Creates and registers an offline pack that downloads the resources needed to use the given region offline.
+     *
+     * @example
+     *
+     * const progressListener = (offlineRegion, status) => console.log(offlineRegion, status);
+     * const errorListener = (offlineRegion, err) => console.log(offlineRegion, err);
+     *
+     * await MapboxGL.offlineManager.createPack({
+     *   name: 'offlinePack',
+     *   styleURL: 'mapbox://...',
+     *   minZoom: 14,
+     *   maxZoom: 20,
+     *   bounds: [[neLng, neLat], [swLng, swLat]]
+     * }, progressListener, errorListener)
+     *
+     * @param  {OfflineCreatePackOptions} options Create options for a offline pack that specifices zoom levels, style url, and the region to download.
+     * @param  {Callback=} progressListener Callback that listens for status events while downloading the offline resource.
+     * @param  {Callback=} errorListener Callback that listens for status events while downloading the offline resource.
+     * @return {void}
+     */
+    createPack(options, progressListener, errorListener) {
+        return __awaiter(this, void 0, void 0, function* () {
+            yield this._initialize();
+            const packOptions = new OfflineCreatePackOptions(options);
+            if (this._offlinePacks[packOptions.name]) {
+                throw new Error(`Offline pack with name ${packOptions.name} already exists.`);
+            }
+            this.subscribe(packOptions.name, progressListener, errorListener);
+            const nativeOfflinePack = yield MapboxGLOfflineManager.createPack(packOptions);
+            this._offlinePacks[packOptions.name] = new OfflinePack(nativeOfflinePack);
+        });
+    }
+    /**
+     * Invalidates the specified offline pack. This method checks that the tiles in the specified offline pack match those from the server. Local tiles that do not match the latest version on the server are updated.
+     *
+     * This is more efficient than deleting the offline pack and downloading it again. If the data stored locally matches that on the server, new data will not be downloaded.
+     *
+     * @example
+     * await MapboxGL.offlineManager.invalidatePack('packName')
+     *
+     * @param  {String}  name  Name of the offline pack.
+     * @return {void}
+     */
+    invalidatePack(name) {
+        return __awaiter(this, void 0, void 0, function* () {
+            if (!name) {
+                return;
+            }
+            yield this._initialize();
+            const offlinePack = this._offlinePacks[name];
+            if (offlinePack) {
+                yield MapboxGLOfflineManager.invalidatePack(name);
+            }
+        });
+    }
+    /**
+     * Unregisters the given offline pack and allows resources that are no longer required by any remaining packs to be potentially freed.
+     *
+     * @example
+     * await MapboxGL.offlineManager.deletePack('packName')
+     *
+     * @param  {String}  name  Name of the offline pack.
+     * @return {void}
+     */
+    deletePack(name) {
+        return __awaiter(this, void 0, void 0, function* () {
+            if (!name) {
+                return;
+            }
+            yield this._initialize();
+            const offlinePack = this._offlinePacks[name];
+            if (offlinePack) {
+                yield MapboxGLOfflineManager.deletePack(name);
+                delete this._offlinePacks[name];
+            }
+        });
+    }
+    /**
+     * Forces a revalidation of the tiles in the ambient cache and downloads a fresh version of the tiles from the tile server.
+     * This is the recommend method for clearing the cache.
+     * This is the most efficient method because tiles in the ambient cache are re-downloaded to remove outdated data from a device.
+     * It does not erase resources from the ambient cache or delete the database, which can be computationally expensive operations that may carry unintended side effects.
+     *
+     * @example
+     * await MapboxGL.offlineManager.invalidateAmbientCache();
+     *
+     * @return {void}
+     */
+    invalidateAmbientCache() {
+        return __awaiter(this, void 0, void 0, function* () {
+            yield this._initialize();
+            yield MapboxGLOfflineManager.invalidateAmbientCache();
+        });
+    }
+    /**
+     * Erases resources from the ambient cache.
+     * This method clears the cache and decreases the amount of space that map resources take up on the device.
+     *
+     * @example
+     * await MapboxGL.offlineManager.clearAmbientCache();
+     *
+     * @return {void}
+     */
+    clearAmbientCache() {
+        return __awaiter(this, void 0, void 0, function* () {
+            yield this._initialize();
+            yield MapboxGLOfflineManager.clearAmbientCache();
+        });
+    }
+    /**
+     * Migrates the offline cache from pre-v10 SDKs to the new v10 cache location
+     *
+     * @example
+     * await MapboxGL.offlineManager.migrateOfflineCache()
+     *
+     * @return {void}
+     */
+    migrateOfflineCache() {
+        return __awaiter(this, void 0, void 0, function* () {
+            yield this._initialize();
+            yield MapboxGLOfflineManager.migrateOfflineCache();
+        });
+    }
+    /**
+     * Sets the maximum size of the ambient cache in bytes. Disables the ambient cache if set to 0.
+     * This method may be computationally expensive because it will erase resources from the ambient cache if its size is decreased.
+     *
+     * @example
+     * await MapboxGL.offlineManager.setMaximumAmbientCacheSize(5000000);
+     *
+     * @param  {Number}  size  Size of ambient cache.
+     * @return {void}
+     */
+    setMaximumAmbientCacheSize(size) {
+        return __awaiter(this, void 0, void 0, function* () {
+            yield this._initialize();
+            yield MapboxGLOfflineManager.setMaximumAmbientCacheSize(size);
+        });
+    }
+    /**
+     * Deletes the existing database, which includes both the ambient cache and offline packs, then reinitializes it.
+     *
+     * @example
+     * await MapboxGL.offlineManager.resetDatabase();
+     *
+     * @return {void}
+     */
+    resetDatabase() {
+        return __awaiter(this, void 0, void 0, function* () {
+            yield this._initialize();
+            yield MapboxGLOfflineManager.resetDatabase();
+        });
+    }
+    /**
+     * Retrieves all the current offline packs that are stored in the database.
+     *
+     * @example
+     * const offlinePacks = await MapboxGL.offlineManager.getPacks();
+     *
+     * @return {Array<OfflinePack>}
+     */
+    getPacks() {
+        return __awaiter(this, void 0, void 0, function* () {
+            yield this._initialize();
+            return Object.keys(this._offlinePacks).map((name) => this._offlinePacks[name]);
+        });
+    }
+    /**
+     * Retrieves an offline pack that is stored in the database by name.
+     *
+     * @example
+     * const offlinePack = await MapboxGL.offlineManager.getPack();
+     *
+     * @param  {String}  name  Name of the offline pack.
+     * @return {OfflinePack}
+     */
+    getPack(name) {
+        return __awaiter(this, void 0, void 0, function* () {
+            yield this._initialize();
+            return this._offlinePacks[name];
+        });
+    }
+    /**
+     * Sideloads offline db
+     *
+     * @example
+     * await MapboxGL.offlineManager.mergeOfflineRegions(path);
+     *
+     * @param {String} path Path to offline tile db on file system.
+     * @return {void}
+     */
+    mergeOfflineRegions(path) {
+        return __awaiter(this, void 0, void 0, function* () {
+            yield this._initialize();
+            return MapboxGLOfflineManager.mergeOfflineRegions(path);
+        });
+    }
+    /**
+     * Sets the maximum number of Mapbox-hosted tiles that may be downloaded and stored on the current device.
+     * The Mapbox Terms of Service prohibit changing or bypassing this limit without permission from Mapbox.
+     *
+     * @example
+     * MapboxGL.offlineManager.setTileCountLimit(1000);
+     *
+     * @param {Number} limit Map tile limit count.
+     * @return {void}
+     */
+    setTileCountLimit(limit) {
+        MapboxGLOfflineManager.setTileCountLimit(limit);
+    }
+    /**
+     * Sets the period at which download status events will be sent over the React Native bridge.
+     * The default is 500ms.
+     *
+     * @example
+     * MapboxGL.offlineManager.setProgressEventThrottle(500);
+     *
+     * @param {Number} throttleValue event throttle value in ms.
+     * @return {void}
+     */
+    setProgressEventThrottle(throttleValue) {
+        MapboxGLOfflineManager.setProgressEventThrottle(throttleValue);
+    }
+    /**
+     * Subscribe to download status/error events for the requested offline pack.
+     * Note that createPack calls this internally if listeners are provided.
+     *
+     * @example
+     * const progressListener = (offlinePack, status) => console.log(offlinePack, status)
+     * const errorListener = (offlinePack, err) => console.log(offlinePack, err)
+     * MapboxGL.offlineManager.subscribe('packName', progressListener, errorListener)
+     *
+     * @param  {String} packName           Name of the offline pack.
+     * @param  {Callback} progressListener Callback that listens for status events while downloading the offline resource.
+     * @param  {Callback} errorListener      Callback that listens for status events while downloading the offline resource.
+     * @return {void}
+     */
+    subscribe(packName, progressListener, errorListener) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const totalProgressListeners = Object.keys(this._progressListeners).length;
+            if (isFunction(progressListener)) {
+                if (totalProgressListeners === 0) {
+                    this.subscriptionProgress = OfflineModuleEventEmitter.addListener(MapboxGL.OfflineCallbackName.Progress, this._onProgress);
+                }
+                this._progressListeners[packName] = progressListener;
+            }
+            const totalErrorListeners = Object.keys(this._errorListeners).length;
+            if (isFunction(errorListener)) {
+                if (totalErrorListeners === 0) {
+                    this.subscriptionError = OfflineModuleEventEmitter.addListener(MapboxGL.OfflineCallbackName.Error, this._onError);
+                }
+                this._errorListeners[packName] = errorListener;
+            }
+            // we need to manually set the pack observer on Android
+            // if we're resuming a pack download instead of going thru the create flow
+            if (isAndroid() && this._offlinePacks[packName]) {
+                try {
+                    // manually set a listener, since listeners are only set on create flow
+                    yield MapboxGLOfflineManager.setPackObserver(packName);
+                }
+                catch (e) {
+                    console.log('Unable to set pack observer', e);
+                }
+            }
+        });
+    }
+    /**
+     * Unsubscribes any listeners associated with the offline pack.
+     * It's a good idea to call this on componentWillUnmount.
+     *
+     * @example
+     * MapboxGL.offlineManager.unsubscribe('packName')
+     *
+     * @param  {String} packName Name of the offline pack.
+     * @return {void}
+     */
+    unsubscribe(packName) {
+        delete this._progressListeners[packName];
+        delete this._errorListeners[packName];
+        if (Object.keys(this._progressListeners).length === 0 &&
+            this.subscriptionProgress) {
+            this.subscriptionProgress.remove();
+        }
+        if (Object.keys(this._errorListeners).length === 0 &&
+            this.subscriptionError) {
+            this.subscriptionError.remove();
+        }
+    }
+    _initialize() {
+        return __awaiter(this, void 0, void 0, function* () {
+            if (this._hasInitialized) {
+                return true;
+            }
+            const nativeOfflinePacks = yield MapboxGLOfflineManager.getPacks();
+            for (const nativeOfflinePack of nativeOfflinePacks) {
+                const offlinePack = new OfflinePack(nativeOfflinePack);
+                this._offlinePacks[offlinePack.name] = offlinePack;
+            }
+            this._hasInitialized = true;
+            return true;
+        });
+    }
+    _onProgress(e) {
+        const { name, state } = e.payload;
+        if (!this._hasListeners(name, this._progressListeners)) {
+            return;
+        }
+        const pack = this._offlinePacks[name];
+        this._progressListeners[name](pack, e.payload);
+        // cleanup listeners now that they are no longer needed
+        if (state === MapboxGL.OfflinePackDownloadState.Complete) {
+            this.unsubscribe(name);
+        }
+    }
+    _onError(e) {
+        const { name } = e.payload;
+        if (!this._hasListeners(name, this._errorListeners)) {
+            return;
+        }
+        const pack = this._offlinePacks[name];
+        this._errorListeners[name](pack, e.payload);
+    }
+    _hasListeners(name, listenerMap) {
+        return (!isUndefined(this._offlinePacks[name]) && isFunction(listenerMap[name]));
+    }
+}
+const offlineManager = new OfflineManager();
+export default offlineManager;
diff --git a/b/javascript/modules/snapshot/SnapshotOptions.js b/b/javascript/modules/snapshot/SnapshotOptions.js
new file mode 100644
index 0000000000000000000000000000000000000000..3810113aed975cb0aefff505e4706fc3d7642e7d
--- /dev/null
+++ b/b/javascript/modules/snapshot/SnapshotOptions.js
@@ -0,0 +1,51 @@
+import { NativeModules } from 'react-native';
+import { toJSONString } from '../../utils';
+import { makePoint, makeFeatureCollection } from '../../utils/geoUtils';
+const MapboxGL = NativeModules.MGLModule;
+class SnapshotOptions {
+    constructor(options = {}) {
+        if (!options.centerCoordinate && !options.bounds) {
+            throw new Error('Center coordinate or bounds must be supplied in order to take a snapshot');
+        }
+        this.styleURL = options.styleURL || MapboxGL.StyleURL.Street;
+        this.heading = options.heading || 0.0;
+        this.pitch = options.pitch || 0.0;
+        this.zoomLevel = options.zoomLevel || 16.0;
+        this.width = options.width || 50.0;
+        this.height = options.height || 50.0;
+        this.writeToDisk = options.writeToDisk || false;
+        this.withLogo = options.withLogo === undefined ? true : options.withLogo;
+        if (options.centerCoordinate) {
+            this.centerCoordinate = this._createCenterCoordPoint(options.centerCoordinate);
+        }
+        if (options.bounds) {
+            this.bounds = this._createBoundsCollection(options.bounds);
+        }
+    }
+    toJSON() {
+        return {
+            styleURL: this.styleURL,
+            heading: this.heading,
+            pitch: this.pitch,
+            zoomLevel: this.zoomLevel,
+            width: this.width,
+            height: this.height,
+            writeToDisk: this.writeToDisk,
+            centerCoordinate: this.centerCoordinate,
+            bounds: this.bounds,
+            withLogo: this.withLogo,
+        };
+    }
+    _createCenterCoordPoint(centerCoordinate) {
+        const point = makePoint(centerCoordinate);
+        return toJSONString(point);
+    }
+    _createBoundsCollection(bounds) {
+        const features = [];
+        for (const bound of bounds) {
+            features.push(makePoint(bound));
+        }
+        return toJSONString(makeFeatureCollection(features));
+    }
+}
+export default SnapshotOptions;
diff --git a/b/javascript/modules/snapshot/snapshotManager.js b/b/javascript/modules/snapshot/snapshotManager.js
new file mode 100644
index 0000000000000000000000000000000000000000..a2b403acda6903fdcb4c796780a486dd5e79c33d
--- /dev/null
+++ b/b/javascript/modules/snapshot/snapshotManager.js
@@ -0,0 +1,68 @@
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+import { NativeModules } from 'react-native';
+import SnapshotOptions from './SnapshotOptions';
+const MapboxGLSnapshotManger = NativeModules.MGLSnapshotModule;
+/**
+ * The snapshotManager generates static raster images of the map.
+ * Each snapshot image depicts a portion of a map defined by an SnapshotOptions object you provide.
+ * The snapshotter generates the snapshot asynchronous.
+ */
+class SnapshotManager {
+    /**
+     * Takes a snapshot of the base map using the provided Snapshot options. NOTE pitch, heading, zoomLevel only works when centerCoordinate is set!
+     *
+     * @example
+     *
+     * // creates a temp file png of base map
+     * const uri = await MapboxGL.snapshotManager.takeSnap({
+     *   centerCoordinate: [-74.126410, 40.797968],
+     *   width: width,
+     *   height: height,
+     *   zoomLevel: 12,
+     *   pitch: 30,
+     *   heading: 20,
+     *   styleURL: MapboxGL.StyleURL.Dark,
+     *   writeToDisk: true, // Create a temporary file
+     * });
+     *
+     * // creates base64 png of base map without logo
+     * const uri = await MapboxGL.snapshotManager.takeSnap({
+     *   centerCoordinate: [-74.126410, 40.797968],
+     *   width: width,
+     *   height: height,
+     *   zoomLevel: 12,
+     *   pitch: 30,
+     *   heading: 20,
+     *   styleURL: MapboxGL.StyleURL.Dark,
+     *   withLogo: false, // Disable Mapbox logo (Android only)
+     * });
+     *
+     * // creates snapshot with bounds
+     * const uri = await MapboxGL.snapshotManager.takeSnap({
+     *   bounds: [[-74.126410, 40.797968], [-74.143727, 40.772177]],
+     *   width: width,
+     *   height: height,
+     *   styleURL: MapboxGL.StyleURL.Dark,
+     * });
+     *
+     * @param  {SnapshotOptions}  options Snapshot options for create a static image of the base map
+     * @return {Promise}
+     */
+    takeSnap(options = {}) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const snapshotOptions = new SnapshotOptions(options);
+            const uri = yield MapboxGLSnapshotManger.takeSnap(snapshotOptions);
+            return uri;
+        });
+    }
+}
+const snapshotManager = new SnapshotManager();
+export default snapshotManager;
diff --git a/b/javascript/requestAndroidLocationPermissions.js b/b/javascript/requestAndroidLocationPermissions.js
new file mode 100644
index 0000000000000000000000000000000000000000..789fbc6a596d144a87a8affdfbb6d67cd237d631
--- /dev/null
+++ b/b/javascript/requestAndroidLocationPermissions.js
@@ -0,0 +1,32 @@
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+import { PermissionsAndroid } from 'react-native';
+import { isAndroid } from './utils';
+export function requestAndroidLocationPermissions() {
+    return __awaiter(this, void 0, void 0, function* () {
+        if (isAndroid()) {
+            const res = yield PermissionsAndroid.requestMultiple([
+                PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
+                PermissionsAndroid.PERMISSIONS.ACCESS_COARSE_LOCATION,
+            ]);
+            if (!res) {
+                return false;
+            }
+            const permissions = Object.keys(res);
+            for (const permission of permissions) {
+                if (res[permission] === PermissionsAndroid.RESULTS.GRANTED) {
+                    return true;
+                }
+            }
+            return false;
+        }
+        throw new Error('You should only call this method on Android!');
+    });
+}
diff --git a/b/javascript/types/index.js b/b/javascript/types/index.js
new file mode 100644
index 0000000000000000000000000000000000000000..cb0ff5c3b541f646105198ee23ac0fc3d805023e
--- /dev/null
+++ b/b/javascript/types/index.js
@@ -0,0 +1 @@
+export {};
diff --git a/b/javascript/utils/BridgeValue.js b/b/javascript/utils/BridgeValue.js
new file mode 100644
index 0000000000000000000000000000000000000000..d081335c4c635bb86ad065c59d3c4c62529fdb82
--- /dev/null
+++ b/b/javascript/utils/BridgeValue.js
@@ -0,0 +1,67 @@
+import { isBoolean, isNumber, isString } from './index';
+const Types = {
+    Array: 'array',
+    Bool: 'boolean',
+    Number: 'number',
+    String: 'string',
+    HashMap: 'hashmap',
+};
+export default class BridgeValue {
+    constructor(rawValue) {
+        this.rawValue = rawValue;
+    }
+    get type() {
+        if (Array.isArray(this.rawValue)) {
+            return Types.Array;
+        }
+        if (isBoolean(this.rawValue)) {
+            return Types.Bool;
+        }
+        if (isNumber(this.rawValue)) {
+            return Types.Number;
+        }
+        if (isString(this.rawValue)) {
+            return Types.String;
+        }
+        if (this.rawValue && typeof this.rawValue === 'object') {
+            return Types.HashMap;
+        }
+        throw new Error(`[type - ${this.rawValue}] BridgeValue must be a primitive/array/object`);
+    }
+    get value() {
+        const { type } = this;
+        let value;
+        if (type === Types.Array) {
+            value = [];
+            for (const innerRawValue of this.rawValue) {
+                const bridgeValue = new BridgeValue(innerRawValue);
+                value.push(bridgeValue.toJSON());
+            }
+        }
+        else if (type === Types.HashMap) {
+            value = [];
+            const stringKeys = Object.keys(this.rawValue);
+            for (const stringKey of stringKeys) {
+                value.push([
+                    new BridgeValue(stringKey).toJSON(),
+                    new BridgeValue(this.rawValue[stringKey]).toJSON(),
+                ]);
+            }
+        }
+        else if (type === Types.Bool ||
+            type === Types.Number ||
+            type === Types.String) {
+            value = this.rawValue;
+        }
+        else {
+            throw new Error(`[value - ${this.rawValue}] BridgeValue must be a primitive/array/object`);
+        }
+        return value;
+    }
+    toJSON(formatter) {
+        return {
+            type: this.type,
+            value: typeof formatter === 'function' ? formatter(this.value) : this.value,
+        };
+    }
+}
diff --git a/b/javascript/utils/Logger.js b/b/javascript/utils/Logger.js
new file mode 100644
index 0000000000000000000000000000000000000000..ef31bc8985eb0ff119376c3f3f23f8f9e5ef2b16
--- /dev/null
+++ b/b/javascript/utils/Logger.js
@@ -0,0 +1,99 @@
+import { NativeEventEmitter, NativeModules } from 'react-native';
+const { MGLLogging } = NativeModules;
+class Logger {
+    constructor() {
+        this.loggerEmitter = new NativeEventEmitter(MGLLogging);
+        this.startedCount = 0;
+        this.logCallback = null;
+    }
+    static sharedInstance() {
+        if (this.instance === null) {
+            this.instance = new Logger();
+        }
+        return this.instance;
+    }
+    /**
+     * Set custom logger function.
+     * @param {Logger~logCallback} logCallback - callback taking a log object as param. If callback return falsy value then
+     * default logging will take place.
+     */
+    static setLogCallback(logCallback) {
+        this.sharedInstance().setLogCallback(logCallback);
+    }
+    /**
+     * Set custom logger function.
+     * @param {Logger~logCallback} logCallback - callback taking a log object as param. If callback return falsy value then
+     * default logging will take place.
+     */
+    setLogCallback(logCallback) {
+        this.logCallback = logCallback;
+    }
+    /**
+     * This callback is displayed as part of the Requester class.
+     * @callback Logger~logCallback
+     * @param {object} log
+     * @param {string} log.message - the message of the log
+     * @param {string} log.level - log level
+     * @param {string} log.tag - optional tag used on android
+     */
+    /**
+     * setLogLevel
+     * @param {LogLevel} level
+     */
+    static setLogLevel(level) {
+        MGLLogging.setLogLevel(level);
+    }
+    /**
+     * @type {('error'|'warning'|'info'|'debug'|'verbose')} LogLevel - Supported log levels
+     */
+    start() {
+        if (this.startedCount === 0) {
+            this.subscribe();
+        }
+        this.startedCount += 1;
+    }
+    stop() {
+        this.startedCount -= 1;
+        if (this.startedCount === 0) {
+            this.unsubscribe();
+        }
+    }
+    subscribe() {
+        this.subscription = this.loggerEmitter.addListener('LogEvent', (log) => {
+            this.onLog(log);
+        });
+    }
+    unsubscribe() {
+        this.subscription.remove();
+        this.subscription = null;
+    }
+    effectiveLevel(log) {
+        let { level, message, tag } = log;
+        if (level === 'warning') {
+            if (tag === 'Mbgl-HttpRequest' &&
+                message.startsWith('Request failed due to a permanent error: Canceled')) {
+                // this seems to happening too much to show a warning every time
+                return 'info';
+            }
+        }
+        return level;
+    }
+    onLog(log) {
+        if (!this.logCallback || !this.logCallback(log)) {
+            let { message } = log;
+            let level = this.effectiveLevel(log);
+            if (level === 'error') {
+                console.error('Mapbox error', message, log);
+            }
+            else if (level === 'warning') {
+                console.warn('Mapbox warning', message, log);
+            }
+            else {
+                console.log(`Mapbox [${level}]`, message, log);
+            }
+        }
+    }
+}
+Logger.instance = null;
+Logger.sharedInstance().start();
+export default Logger;
diff --git a/b/javascript/utils/MapboxStyles.js b/b/javascript/utils/MapboxStyles.js
new file mode 100644
index 0000000000000000000000000000000000000000..a6272b97a7619ed6b5f506cd5246573765810628
--- /dev/null
+++ b/b/javascript/utils/MapboxStyles.js
@@ -0,0 +1,266 @@
+/* This file was generated from MapboxStyle.ts.ejs do not modify */
+var VisibilityEnum;
+(function (VisibilityEnum) {
+    /** The layer is shown. */
+    VisibilityEnum["Visible"] = "visible";
+    /** The layer is not shown. */
+    VisibilityEnum["None"] = "none";
+})(VisibilityEnum || (VisibilityEnum = {}));
+var FillTranslateAnchorEnum;
+(function (FillTranslateAnchorEnum) {
+    /** The fill is translated relative to the map. */
+    FillTranslateAnchorEnum["Map"] = "map";
+    /** The fill is translated relative to the viewport. */
+    FillTranslateAnchorEnum["Viewport"] = "viewport";
+})(FillTranslateAnchorEnum || (FillTranslateAnchorEnum = {}));
+var LineCapEnum;
+(function (LineCapEnum) {
+    /** A cap with a squared-off end which is drawn to the exact endpoint of the line. */
+    LineCapEnum["Butt"] = "butt";
+    /** A cap with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line's width and centered on the endpoint of the line. */
+    LineCapEnum["Round"] = "round";
+    /** A cap with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line's width. */
+    LineCapEnum["Square"] = "square";
+})(LineCapEnum || (LineCapEnum = {}));
+var LineJoinEnum;
+(function (LineJoinEnum) {
+    /** A join with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line's width. */
+    LineJoinEnum["Bevel"] = "bevel";
+    /** A join with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line's width and centered on the endpoint of the line. */
+    LineJoinEnum["Round"] = "round";
+    /** A join with a sharp, angled corner which is drawn with the outer sides beyond the endpoint of the path until they meet. */
+    LineJoinEnum["Miter"] = "miter";
+})(LineJoinEnum || (LineJoinEnum = {}));
+var LineTranslateAnchorEnum;
+(function (LineTranslateAnchorEnum) {
+    /** The line is translated relative to the map. */
+    LineTranslateAnchorEnum["Map"] = "map";
+    /** The line is translated relative to the viewport. */
+    LineTranslateAnchorEnum["Viewport"] = "viewport";
+})(LineTranslateAnchorEnum || (LineTranslateAnchorEnum = {}));
+var SymbolPlacementEnum;
+(function (SymbolPlacementEnum) {
+    /** The label is placed at the point where the geometry is located. */
+    SymbolPlacementEnum["Point"] = "point";
+    /** The label is placed along the line of the geometry. Can only be used on `LineString` and `Polygon` geometries. */
+    SymbolPlacementEnum["Line"] = "line";
+    /** The label is placed at the center of the line of the geometry. Can only be used on `LineString` and `Polygon` geometries. Note that a single feature in a vector tile may contain multiple line geometries. */
+    SymbolPlacementEnum["LineCenter"] = "line-center";
+})(SymbolPlacementEnum || (SymbolPlacementEnum = {}));
+var SymbolZOrderEnum;
+(function (SymbolZOrderEnum) {
+    /** Sorts symbols by `symbol-sort-key` if set. Otherwise, sorts symbols by their y-position relative to the viewport if `icon-allow-overlap` or `text-allow-overlap` is set to `true` or `icon-ignore-placement` or `text-ignore-placement` is `false`. */
+    SymbolZOrderEnum["Auto"] = "auto";
+    /** Sorts symbols by their y-position relative to the viewport if `icon-allow-overlap` or `text-allow-overlap` is set to `true` or `icon-ignore-placement` or `text-ignore-placement` is `false`. */
+    SymbolZOrderEnum["ViewportY"] = "viewport-y";
+    /** Sorts symbols by `symbol-sort-key` if set. Otherwise, no sorting is applied; symbols are rendered in the same order as the source data. */
+    SymbolZOrderEnum["Source"] = "source";
+})(SymbolZOrderEnum || (SymbolZOrderEnum = {}));
+var IconRotationAlignmentEnum;
+(function (IconRotationAlignmentEnum) {
+    /** When `symbol-placement` is set to `point`, aligns icons east-west. When `symbol-placement` is set to `line` or `line-center`, aligns icon x-axes with the line. */
+    IconRotationAlignmentEnum["Map"] = "map";
+    /** Produces icons whose x-axes are aligned with the x-axis of the viewport, regardless of the value of `symbol-placement`. */
+    IconRotationAlignmentEnum["Viewport"] = "viewport";
+    /** When `symbol-placement` is set to `point`, this is equivalent to `viewport`. When `symbol-placement` is set to `line` or `line-center`, this is equivalent to `map`. */
+    IconRotationAlignmentEnum["Auto"] = "auto";
+})(IconRotationAlignmentEnum || (IconRotationAlignmentEnum = {}));
+var IconTextFitEnum;
+(function (IconTextFitEnum) {
+    /** The icon is displayed at its intrinsic aspect ratio. */
+    IconTextFitEnum["None"] = "none";
+    /** The icon is scaled in the x-dimension to fit the width of the text. */
+    IconTextFitEnum["Width"] = "width";
+    /** The icon is scaled in the y-dimension to fit the height of the text. */
+    IconTextFitEnum["Height"] = "height";
+    /** The icon is scaled in both x- and y-dimensions. */
+    IconTextFitEnum["Both"] = "both";
+})(IconTextFitEnum || (IconTextFitEnum = {}));
+var IconAnchorEnum;
+(function (IconAnchorEnum) {
+    /** The center of the icon is placed closest to the anchor. */
+    IconAnchorEnum["Center"] = "center";
+    /** The left side of the icon is placed closest to the anchor. */
+    IconAnchorEnum["Left"] = "left";
+    /** The right side of the icon is placed closest to the anchor. */
+    IconAnchorEnum["Right"] = "right";
+    /** The top of the icon is placed closest to the anchor. */
+    IconAnchorEnum["Top"] = "top";
+    /** The bottom of the icon is placed closest to the anchor. */
+    IconAnchorEnum["Bottom"] = "bottom";
+    /** The top left corner of the icon is placed closest to the anchor. */
+    IconAnchorEnum["TopLeft"] = "top-left";
+    /** The top right corner of the icon is placed closest to the anchor. */
+    IconAnchorEnum["TopRight"] = "top-right";
+    /** The bottom left corner of the icon is placed closest to the anchor. */
+    IconAnchorEnum["BottomLeft"] = "bottom-left";
+    /** The bottom right corner of the icon is placed closest to the anchor. */
+    IconAnchorEnum["BottomRight"] = "bottom-right";
+})(IconAnchorEnum || (IconAnchorEnum = {}));
+var IconPitchAlignmentEnum;
+(function (IconPitchAlignmentEnum) {
+    /** The icon is aligned to the plane of the map. */
+    IconPitchAlignmentEnum["Map"] = "map";
+    /** The icon is aligned to the plane of the viewport. */
+    IconPitchAlignmentEnum["Viewport"] = "viewport";
+    /** Automatically matches the value of `icon-rotation-alignment`. */
+    IconPitchAlignmentEnum["Auto"] = "auto";
+})(IconPitchAlignmentEnum || (IconPitchAlignmentEnum = {}));
+var TextPitchAlignmentEnum;
+(function (TextPitchAlignmentEnum) {
+    /** The text is aligned to the plane of the map. */
+    TextPitchAlignmentEnum["Map"] = "map";
+    /** The text is aligned to the plane of the viewport. */
+    TextPitchAlignmentEnum["Viewport"] = "viewport";
+    /** Automatically matches the value of `text-rotation-alignment`. */
+    TextPitchAlignmentEnum["Auto"] = "auto";
+})(TextPitchAlignmentEnum || (TextPitchAlignmentEnum = {}));
+var TextRotationAlignmentEnum;
+(function (TextRotationAlignmentEnum) {
+    /** When `symbol-placement` is set to `point`, aligns text east-west. When `symbol-placement` is set to `line` or `line-center`, aligns text x-axes with the line. */
+    TextRotationAlignmentEnum["Map"] = "map";
+    /** Produces glyphs whose x-axes are aligned with the x-axis of the viewport, regardless of the value of `symbol-placement`. */
+    TextRotationAlignmentEnum["Viewport"] = "viewport";
+    /** When `symbol-placement` is set to `point`, this is equivalent to `viewport`. When `symbol-placement` is set to `line` or `line-center`, this is equivalent to `map`. */
+    TextRotationAlignmentEnum["Auto"] = "auto";
+})(TextRotationAlignmentEnum || (TextRotationAlignmentEnum = {}));
+var TextJustifyEnum;
+(function (TextJustifyEnum) {
+    /** The text is aligned towards the anchor position. */
+    TextJustifyEnum["Auto"] = "auto";
+    /** The text is aligned to the left. */
+    TextJustifyEnum["Left"] = "left";
+    /** The text is centered. */
+    TextJustifyEnum["Center"] = "center";
+    /** The text is aligned to the right. */
+    TextJustifyEnum["Right"] = "right";
+})(TextJustifyEnum || (TextJustifyEnum = {}));
+var TextVariableAnchorEnum;
+(function (TextVariableAnchorEnum) {
+    /** The center of the text is placed closest to the anchor. */
+    TextVariableAnchorEnum["Center"] = "center";
+    /** The left side of the text is placed closest to the anchor. */
+    TextVariableAnchorEnum["Left"] = "left";
+    /** The right side of the text is placed closest to the anchor. */
+    TextVariableAnchorEnum["Right"] = "right";
+    /** The top of the text is placed closest to the anchor. */
+    TextVariableAnchorEnum["Top"] = "top";
+    /** The bottom of the text is placed closest to the anchor. */
+    TextVariableAnchorEnum["Bottom"] = "bottom";
+    /** The top left corner of the text is placed closest to the anchor. */
+    TextVariableAnchorEnum["TopLeft"] = "top-left";
+    /** The top right corner of the text is placed closest to the anchor. */
+    TextVariableAnchorEnum["TopRight"] = "top-right";
+    /** The bottom left corner of the text is placed closest to the anchor. */
+    TextVariableAnchorEnum["BottomLeft"] = "bottom-left";
+    /** The bottom right corner of the text is placed closest to the anchor. */
+    TextVariableAnchorEnum["BottomRight"] = "bottom-right";
+})(TextVariableAnchorEnum || (TextVariableAnchorEnum = {}));
+var TextAnchorEnum;
+(function (TextAnchorEnum) {
+    /** The center of the text is placed closest to the anchor. */
+    TextAnchorEnum["Center"] = "center";
+    /** The left side of the text is placed closest to the anchor. */
+    TextAnchorEnum["Left"] = "left";
+    /** The right side of the text is placed closest to the anchor. */
+    TextAnchorEnum["Right"] = "right";
+    /** The top of the text is placed closest to the anchor. */
+    TextAnchorEnum["Top"] = "top";
+    /** The bottom of the text is placed closest to the anchor. */
+    TextAnchorEnum["Bottom"] = "bottom";
+    /** The top left corner of the text is placed closest to the anchor. */
+    TextAnchorEnum["TopLeft"] = "top-left";
+    /** The top right corner of the text is placed closest to the anchor. */
+    TextAnchorEnum["TopRight"] = "top-right";
+    /** The bottom left corner of the text is placed closest to the anchor. */
+    TextAnchorEnum["BottomLeft"] = "bottom-left";
+    /** The bottom right corner of the text is placed closest to the anchor. */
+    TextAnchorEnum["BottomRight"] = "bottom-right";
+})(TextAnchorEnum || (TextAnchorEnum = {}));
+var TextWritingModeEnum;
+(function (TextWritingModeEnum) {
+    /** If a text's language supports horizontal writing mode, symbols would be laid out horizontally. */
+    TextWritingModeEnum["Horizontal"] = "horizontal";
+    /** If a text's language supports vertical writing mode, symbols would be laid out vertically. */
+    TextWritingModeEnum["Vertical"] = "vertical";
+})(TextWritingModeEnum || (TextWritingModeEnum = {}));
+var TextTransformEnum;
+(function (TextTransformEnum) {
+    /** The text is not altered. */
+    TextTransformEnum["None"] = "none";
+    /** Forces all letters to be displayed in uppercase. */
+    TextTransformEnum["Uppercase"] = "uppercase";
+    /** Forces all letters to be displayed in lowercase. */
+    TextTransformEnum["Lowercase"] = "lowercase";
+})(TextTransformEnum || (TextTransformEnum = {}));
+var IconTranslateAnchorEnum;
+(function (IconTranslateAnchorEnum) {
+    /** Icons are translated relative to the map. */
+    IconTranslateAnchorEnum["Map"] = "map";
+    /** Icons are translated relative to the viewport. */
+    IconTranslateAnchorEnum["Viewport"] = "viewport";
+})(IconTranslateAnchorEnum || (IconTranslateAnchorEnum = {}));
+var TextTranslateAnchorEnum;
+(function (TextTranslateAnchorEnum) {
+    /** The text is translated relative to the map. */
+    TextTranslateAnchorEnum["Map"] = "map";
+    /** The text is translated relative to the viewport. */
+    TextTranslateAnchorEnum["Viewport"] = "viewport";
+})(TextTranslateAnchorEnum || (TextTranslateAnchorEnum = {}));
+var CircleTranslateAnchorEnum;
+(function (CircleTranslateAnchorEnum) {
+    /** The circle is translated relative to the map. */
+    CircleTranslateAnchorEnum["Map"] = "map";
+    /** The circle is translated relative to the viewport. */
+    CircleTranslateAnchorEnum["Viewport"] = "viewport";
+})(CircleTranslateAnchorEnum || (CircleTranslateAnchorEnum = {}));
+var CirclePitchScaleEnum;
+(function (CirclePitchScaleEnum) {
+    /** Circles are scaled according to their apparent distance to the camera. */
+    CirclePitchScaleEnum["Map"] = "map";
+    /** Circles are not scaled. */
+    CirclePitchScaleEnum["Viewport"] = "viewport";
+})(CirclePitchScaleEnum || (CirclePitchScaleEnum = {}));
+var CirclePitchAlignmentEnum;
+(function (CirclePitchAlignmentEnum) {
+    /** The circle is aligned to the plane of the map. */
+    CirclePitchAlignmentEnum["Map"] = "map";
+    /** The circle is aligned to the plane of the viewport. */
+    CirclePitchAlignmentEnum["Viewport"] = "viewport";
+})(CirclePitchAlignmentEnum || (CirclePitchAlignmentEnum = {}));
+var FillExtrusionTranslateAnchorEnum;
+(function (FillExtrusionTranslateAnchorEnum) {
+    /** The fill extrusion is translated relative to the map. */
+    FillExtrusionTranslateAnchorEnum["Map"] = "map";
+    /** The fill extrusion is translated relative to the viewport. */
+    FillExtrusionTranslateAnchorEnum["Viewport"] = "viewport";
+})(FillExtrusionTranslateAnchorEnum || (FillExtrusionTranslateAnchorEnum = {}));
+var RasterResamplingEnum;
+(function (RasterResamplingEnum) {
+    /** (Bi)linear filtering interpolates pixel values using the weighted average of the four closest original source pixels creating a smooth but blurry look when overscaled */
+    RasterResamplingEnum["Linear"] = "linear";
+    /** Nearest neighbor filtering interpolates pixel values using the nearest original source pixel creating a sharp but pixelated look when overscaled */
+    RasterResamplingEnum["Nearest"] = "nearest";
+})(RasterResamplingEnum || (RasterResamplingEnum = {}));
+var HillshadeIlluminationAnchorEnum;
+(function (HillshadeIlluminationAnchorEnum) {
+    /** The hillshade illumination is relative to the north direction. */
+    HillshadeIlluminationAnchorEnum["Map"] = "map";
+    /** The hillshade illumination is relative to the top of the viewport. */
+    HillshadeIlluminationAnchorEnum["Viewport"] = "viewport";
+})(HillshadeIlluminationAnchorEnum || (HillshadeIlluminationAnchorEnum = {}));
+var SkyTypeEnum;
+(function (SkyTypeEnum) {
+    /** Renders the sky with a gradient that can be configured with `sky-gradient-radius` and `sky-gradient`. */
+    SkyTypeEnum["Gradient"] = "gradient";
+    /** Renders the sky with a simulated atmospheric scattering algorithm, the sun direction can be attached to the light position or explicitly set through `sky-atmosphere-sun`. */
+    SkyTypeEnum["Atmosphere"] = "atmosphere";
+})(SkyTypeEnum || (SkyTypeEnum = {}));
+var AnchorEnum;
+(function (AnchorEnum) {
+    /** The position of the light source is aligned to the rotation of the map. */
+    AnchorEnum["Map"] = "map";
+    /** The position of the light source is aligned to the rotation of the viewport. */
+    AnchorEnum["Viewport"] = "viewport";
+})(AnchorEnum || (AnchorEnum = {}));
+export {};
diff --git a/b/javascript/utils/StyleValue.js b/b/javascript/utils/StyleValue.js
new file mode 100644
index 0000000000000000000000000000000000000000..28ca016ae9778d1ceed00d1285b6bfbba4e3970d
--- /dev/null
+++ b/b/javascript/utils/StyleValue.js
@@ -0,0 +1,26 @@
+import { processColor, Image } from 'react-native';
+import { getStyleType } from './styleMap';
+import BridgeValue from './BridgeValue';
+export function transformStyle(style) {
+    if (!style) {
+        return;
+    }
+    const nativeStyle = {};
+    const styleProps = Object.keys(style);
+    for (const styleProp of styleProps) {
+        const styleType = getStyleType(styleProp);
+        let rawStyle = style[styleProp];
+        if (styleType === 'color' && typeof rawStyle === 'string') {
+            rawStyle = processColor(rawStyle);
+        }
+        else if (styleType === 'image' && typeof rawStyle === 'number') {
+            rawStyle = Image.resolveAssetSource(rawStyle) || {};
+        }
+        const bridgeValue = new BridgeValue(rawStyle);
+        nativeStyle[styleProp] = {
+            styletype: styleType,
+            stylevalue: bridgeValue.toJSON(),
+        };
+    }
+    return nativeStyle;
+}
diff --git a/b/javascript/utils/animated/Animated.js b/b/javascript/utils/animated/Animated.js
new file mode 100644
index 0000000000000000000000000000000000000000..101178a13fa37ff9d497708e744b505396a9ff1d
--- /dev/null
+++ b/b/javascript/utils/animated/Animated.js
@@ -0,0 +1,33 @@
+import { Animated as RNAnimated } from 'react-native';
+import ShapeSource from '../../components/ShapeSource';
+import ImageSource from '../../components/ImageSource';
+import FillLayer from '../../components/FillLayer';
+import FillExtrusionLayer from '../../components/FillExtrusionLayer';
+import LineLayer from '../../components/LineLayer';
+import CircleLayer from '../../components/CircleLayer';
+import SymbolLayer from '../../components/SymbolLayer';
+import RasterLayer from '../../components/RasterLayer';
+import BackgroundLayer from '../../components/BackgroundLayer';
+import AnimatedShape from './AnimatedShape';
+import AnimatedCoordinatesArray from './AnimatedCoordinatesArray';
+import AnimatedExtractCoordinateFromArray from './AnimatedExtractCoordinateFromArray';
+import AnimatedRouteCoordinatesArray from './AnimatedRouteCoordinatesArray';
+const Animated = {
+    // sources
+    ShapeSource: RNAnimated.createAnimatedComponent(ShapeSource),
+    ImageSource: RNAnimated.createAnimatedComponent(ImageSource),
+    // layers
+    FillLayer: RNAnimated.createAnimatedComponent(FillLayer),
+    FillExtrusionLayer: RNAnimated.createAnimatedComponent(FillExtrusionLayer),
+    LineLayer: RNAnimated.createAnimatedComponent(LineLayer),
+    CircleLayer: RNAnimated.createAnimatedComponent(CircleLayer),
+    SymbolLayer: RNAnimated.createAnimatedComponent(SymbolLayer),
+    RasterLayer: RNAnimated.createAnimatedComponent(RasterLayer),
+    BackgroundLayer: RNAnimated.createAnimatedComponent(BackgroundLayer),
+    // values
+    CoordinatesArray: AnimatedCoordinatesArray,
+    RouteCoordinatesArray: AnimatedRouteCoordinatesArray,
+    Shape: AnimatedShape,
+    ExtractCoordinateFromArray: AnimatedExtractCoordinateFromArray,
+};
+export default Animated;
diff --git a/b/javascript/utils/animated/AnimatedCoordinatesArray.js b/b/javascript/utils/animated/AnimatedCoordinatesArray.js
new file mode 100644
index 0000000000000000000000000000000000000000..76df343b297a73216efff39b34ab7e6770c8f245
--- /dev/null
+++ b/b/javascript/utils/animated/AnimatedCoordinatesArray.js
@@ -0,0 +1,137 @@
+import { Animated } from 'react-native';
+// see
+// https://github.com/facebook/react-native/blob/master/Libraries/Animated/src/nodes/AnimatedWithChildren.js
+const AnimatedWithChildren = Object.getPrototypeOf(Animated.ValueXY);
+if (__DEV__) {
+    if (AnimatedWithChildren.name !== 'AnimatedWithChildren') {
+        console.error('AnimatedCoordinatesArray could not obtain AnimatedWithChildren base class');
+    }
+}
+const defaultConfig = {
+    useNativeDriver: false,
+};
+class AnimatedCoordinatesArray extends AnimatedWithChildren {
+    constructor(...args) {
+        super();
+        this.state = this.onInitialState(...args);
+    }
+    /**
+     * Subclasses can override to calculate initial state
+     *
+     * @param {*} args - to value from animate
+     * @returns {object} - the state object
+     */
+    onInitialState(coordinatesArray) {
+        return { coords: coordinatesArray.map((coord) => [coord[0], coord[1]]) };
+    }
+    /**
+     * Subclasses can override getValue to calculate value from state.
+     * Value is typically coordinates array, but can be anything
+     *
+     * @param {object} state - either state from initialState and/or from calculate
+     * @returns {object}
+     */
+    onGetValue(state) {
+        return state.coords;
+    }
+    /**
+     * Calculates state based on startingState and progress, returns a new state
+     *
+     * @param {object} state - state object from initialState and/or from calculate
+     * @param {number} progress - value between 0 and 1
+     * @returns {object} next state
+     */
+    onCalculate(state, progress) {
+        const { coords, targetCoords } = state;
+        const newF = progress;
+        const origF = 1.0 - newF;
+        // common
+        const commonLen = Math.min(coords.length, targetCoords.length);
+        const common = coords
+            .slice(0, commonLen)
+            .map((origCoord, i) => [
+            origCoord[0] * origF + targetCoords[i][0] * newF,
+            origCoord[1] * origF + targetCoords[i][1] * newF,
+        ]);
+        if (targetCoords.length > coords.length) {
+            // only in new (adding)
+            const addingOrig = coords.length > 0 ? coords[coords.length - 1] : targetCoords[0];
+            const adding = targetCoords
+                .slice(commonLen, targetCoords.length)
+                .map((newCoord) => [
+                addingOrig[0] * origF + newCoord[0] * newF,
+                addingOrig[1] * origF + newCoord[1] * newF,
+            ]);
+            return { coords: [...common, ...adding], targetCoords };
+        }
+        if (coords.length > targetCoords.length) {
+            // only in orig (dissapearing)
+            const dissapearingNew = targetCoords.length > 0
+                ? targetCoords[targetCoords.length - 1]
+                : coords[0];
+            const dissapearing = coords
+                .slice(commonLen, coords.length)
+                .map((origCoord) => [
+                origCoord[0] * origF + dissapearingNew[0] * newF,
+                origCoord[1] * origF + dissapearingNew[1] * newF,
+            ]);
+            return { coords: [...common, ...dissapearing], targetCoords };
+        }
+        return { coords: common, targetCoords };
+    }
+    /**
+     * Subclasses can override to start a new animation
+     *
+     * @param {*} toValue - to value from animate
+     * @param {*} actCoords - the current coordinates array to start from
+     * @returns {object} The state
+     */
+    onStart(state, toValue) {
+        const targetCoords = toValue.map((coord) => [coord[0], coord[1]]);
+        return Object.assign(Object.assign({}, state), { targetCoords });
+    }
+    animate(progressValue, progressAnimation, config) {
+        const { toValue } = config;
+        const onAnimationStart = (animation) => {
+            if (this.animation) {
+                // there was a started but not finsihed animation
+                const actProgress = this.progressValue.__getValue();
+                this.animation.stop();
+                this.state = this.onCalculate(this.state, actProgress);
+                this.progressValue.__removeChild(this);
+                this.progressValue = null;
+                this.animation = null;
+            }
+            this.progressValue = progressValue;
+            this.progressValue.__addChild(this);
+            this.animation = animation;
+            this.state = this.onStart(this.state, toValue);
+        };
+        const origAnimationStart = progressAnimation.start;
+        const newAnimation = progressAnimation;
+        newAnimation.start = function start(...args) {
+            onAnimationStart(progressAnimation);
+            origAnimationStart(...args);
+        };
+        return newAnimation;
+    }
+    timing(config) {
+        const progressValue = new Animated.Value(0.0);
+        return this.animate(progressValue, Animated.timing(progressValue, Object.assign(Object.assign(Object.assign({}, defaultConfig), config), { toValue: 1.0 })), config);
+    }
+    spring(config) {
+        const progressValue = new Animated.Value(0.0);
+        return this.animate(progressValue, Animated.spring(progressValue, Object.assign(Object.assign(Object.assign({}, defaultConfig), config), { toValue: 1.0 })), config);
+    }
+    decay(config) {
+        const progressValue = new Animated.Value(0.0);
+        return this.animate(progressValue, Animated.decay(this.progressValue, Object.assign(Object.assign(Object.assign({}, defaultConfig), config), { toValue: 1.0 })), config);
+    }
+    __getValue() {
+        if (!this.progressValue) {
+            return this.onGetValue(this.state);
+        }
+        return this.onGetValue(this.onCalculate(this.state, this.progressValue.__getValue()));
+    }
+}
+export default AnimatedCoordinatesArray;
diff --git a/b/javascript/utils/animated/AnimatedExtractCoordinateFromArray.js b/b/javascript/utils/animated/AnimatedExtractCoordinateFromArray.js
new file mode 100644
index 0000000000000000000000000000000000000000..997c9b8fd6048d3f305f668809963b3fd7fc9ab7
--- /dev/null
+++ b/b/javascript/utils/animated/AnimatedExtractCoordinateFromArray.js
@@ -0,0 +1,33 @@
+import { Animated } from 'react-native';
+// see
+// https://github.com/facebook/react-native/blob/master/Libraries/Animated/src/nodes/AnimatedWithChildren.js
+const AnimatedWithChildren = Object.getPrototypeOf(Animated.ValueXY);
+if (__DEV__) {
+    if (AnimatedWithChildren.name !== 'AnimatedWithChildren') {
+        console.error('AnimatedCoordinatesArray could not obtain AnimatedWithChildren base class');
+    }
+}
+export default class AnimatedExtractCoordinateFromArray extends AnimatedWithChildren {
+    constructor(array, index) {
+        super();
+        this._array = null;
+        this._index = 0;
+        this._array = array;
+        this._index = index;
+    }
+    __getValue() {
+        const actArray = this._array.__getValue();
+        let index = this._index;
+        if (index < 0) {
+            index += actArray.length;
+        }
+        return actArray[index];
+    }
+    __attach() {
+        this._array.__addChild(this);
+    }
+    __detach() {
+        this._array.__removeChild(this);
+        super.__detach();
+    }
+}
diff --git a/b/javascript/utils/animated/AnimatedPoint.js b/b/javascript/utils/animated/AnimatedPoint.js
new file mode 100644
index 0000000000000000000000000000000000000000..34a8ac3d17a08073eda34398463b128dff844094
--- /dev/null
+++ b/b/javascript/utils/animated/AnimatedPoint.js
@@ -0,0 +1,86 @@
+import { Animated } from 'react-native';
+// Used react-native-maps as a reference
+// https://github.com/react-community/react-native-maps/blob/master/lib/components/AnimatedRegion.js
+const AnimatedWithChildren = Object.getPrototypeOf(Animated.ValueXY);
+const DEFAULT_COORD = [0, 0];
+const DEFAULT_POINT = { type: 'Point', coordinates: DEFAULT_COORD };
+let uniqueID = 0;
+export class AnimatedPoint extends AnimatedWithChildren {
+    constructor(point = DEFAULT_POINT) {
+        super();
+        this.longitude = point.coordinates[0] || 0;
+        this.latitude = point.coordinates[1] || 0;
+        if (!(this.longitude instanceof Animated.Value)) {
+            this.longitude = new Animated.Value(this.longitude);
+        }
+        if (!(this.latitude instanceof Animated.Value)) {
+            this.latitude = new Animated.Value(this.latitude);
+        }
+        this._listeners = {};
+    }
+    setValue(point = DEFAULT_POINT) {
+        this.longitude.setValue(point.coordinates[0]);
+        this.latitude.setValue(point.coordinates[1]);
+    }
+    setOffset(point = DEFAULT_POINT) {
+        this.longitude.setOffset(point.coordinates[0]);
+        this.latitude.setOffset(point.coordinates[1]);
+    }
+    flattenOffset() {
+        this.longitude.flattenOffset();
+        this.latitude.flattenOffset();
+    }
+    stopAnimation(cb) {
+        this.longitude.stopAnimation();
+        this.latitude.stopAnimation();
+        if (typeof cb === 'function') {
+            cb(this.__getValue());
+        }
+    }
+    addListener(cb) {
+        uniqueID += 1;
+        const id = `${String(uniqueID)}-${String(Date.now())}`;
+        const completeCB = () => {
+            if (typeof cb === 'function') {
+                cb(this.__getValue());
+            }
+        };
+        this._listeners[id] = {
+            longitude: this.longitude.addListener(completeCB),
+            latitude: this.latitude.addListener(completeCB),
+        };
+        return id;
+    }
+    removeListener(id) {
+        this.longitude.removeListener(this._listeners[id].longitude);
+        this.latitude.removeListener(this._listeners[id].latitude);
+        delete this._listeners[id];
+    }
+    spring(config = { coordinates: DEFAULT_COORD }) {
+        return Animated.parallel([
+            Animated.spring(this.longitude, Object.assign(Object.assign({}, config), { toValue: config.coordinates[0], useNativeDriver: false })),
+            Animated.spring(this.latitude, Object.assign(Object.assign({}, config), { toValue: config.coordinates[1], useNativeDriver: false })),
+        ]);
+    }
+    timing(config = { coordinates: DEFAULT_COORD }) {
+        return Animated.parallel([
+            Animated.timing(this.longitude, Object.assign(Object.assign({}, config), { toValue: config.coordinates[0], useNativeDriver: false })),
+            Animated.timing(this.latitude, Object.assign(Object.assign({}, config), { toValue: config.coordinates[1], useNativeDriver: false })),
+        ]);
+    }
+    __getValue() {
+        return {
+            type: 'Point',
+            coordinates: [this.longitude.__getValue(), this.latitude.__getValue()],
+        };
+    }
+    __attach() {
+        this.longitude.__addChild(this);
+        this.latitude.__addChild(this);
+    }
+    __detach() {
+        this.longitude.__removeChild(this);
+        this.latitude.__removeChild(this);
+    }
+}
+export default AnimatedPoint;
diff --git a/b/javascript/utils/animated/AnimatedRouteCoordinatesArray.js b/b/javascript/utils/animated/AnimatedRouteCoordinatesArray.js
new file mode 100644
index 0000000000000000000000000000000000000000..977085bd95ac8c613a6f6a53e7bef7cfdf662b8d
--- /dev/null
+++ b/b/javascript/utils/animated/AnimatedRouteCoordinatesArray.js
@@ -0,0 +1,116 @@
+import { lineString, point, convertDistance as convertDistanceFn, // eslint-disable-line import/named
+convertLength as convertLengthFn, } from '@turf/helpers';
+import distance from '@turf/distance';
+import nearestPointOnLine from '@turf/nearest-point-on-line';
+import length from '@turf/length';
+import AnimatedCoordinatesArray from './AnimatedCoordinatesArray';
+const convertLength = convertLengthFn || convertDistanceFn;
+/**
+ * AnimatedRoutesCoordinatesArray - animates along route.
+ * By default start of route is start, and end of route animated from 100% of route to 0% or route.
+ * Eg we have full route to destination and as we're progressing the remaining route gets shorter and shorter.
+ */
+export default class AnimatedRouteCoordinatesArray extends AnimatedCoordinatesArray {
+    /**
+     * Calculate initial state
+     *
+     * @param {*} args - to value from animate
+     * @param {} options - options, example
+     * @returns {object} - the state object
+     */
+    onInitialState(coordinatesArray, options = null) {
+        let end = { from: 0 };
+        if (options && options.end) {
+            end = options.end;
+        }
+        return {
+            fullRoute: coordinatesArray.map((coord) => [coord[0], coord[1]]),
+            end: { from: 0 },
+        };
+    }
+    /**
+     * Calculate value from state.
+     *
+     * @param {object} state - either state from initialState and/or from calculate
+     * @returns {object}
+     */
+    onGetValue(state) {
+        return state.actRoute || state.fullRoute;
+    }
+    /**
+     * Calculates state based on startingState and progress, returns a new state
+     *
+     * @param {object} state - state object from initialState and/or from calculate
+     * @param {number} progress - value between 0 and 1
+     * @returns {object} next state
+     */
+    onCalculate(state, progress) {
+        const { fullRoute, end } = state;
+        const currentEnd = end.from * (1.0 - progress) + progress * end.to;
+        // console.log("Current end:", end, currentEnd);
+        let prevsum = 0;
+        let actsum = 0;
+        let i = fullRoute.length - 1;
+        while (actsum < currentEnd && i > 0) {
+            prevsum = actsum;
+            actsum += distance(point(fullRoute[i]), point(fullRoute[i - 1]), this.distconf);
+            i -= 1;
+        }
+        if (actsum <= currentEnd) {
+            const actRoute = [...fullRoute.slice(0, i + 1)];
+            return { fullRoute, end: Object.assign(Object.assign({}, end), { current: currentEnd }), actRoute };
+        }
+        const r = (currentEnd - prevsum) / (actsum - prevsum);
+        const or = 1.0 - r;
+        // console.log("i", i+1);
+        const actRoute = [
+            ...fullRoute.slice(0, i + 1),
+            [
+                fullRoute[i][0] * r + fullRoute[i + 1][0] * or,
+                fullRoute[i][1] * r + fullRoute[i + 1][1] * or,
+            ],
+        ];
+        return { fullRoute, end: Object.assign(Object.assign({}, end), { current: currentEnd }), actRoute };
+    }
+    /**
+     * Subclasses can override to start a new animation
+     *
+     * @param {*} toValue - to value from animate
+     * @param {*} actCoords - the current coordinates array to start from
+     * @returns {object} The state
+     */
+    onStart(state, toValue) {
+        const { fullRoute, end } = state;
+        let toDist;
+        if (!toValue.end) {
+            console.error('RouteCoordinatesArray: toValue should have end with either along or point');
+        }
+        if (toValue.end.along != null) {
+            const { units } = toValue;
+            const ls = lineString(fullRoute);
+            toDist = convertLength(toValue.end.along, units);
+            toDist = length(ls) - toDist;
+        }
+        if (toDist != null) {
+            if (toValue.end.point) {
+                console.warn('RouteCoordinatesArray: toValue.end: has both along and point, point is ignored');
+            }
+        }
+        else if (toValue.end.point) {
+            const ls = lineString(fullRoute);
+            const nearest = nearestPointOnLine(ls, toValue.end.point);
+            toDist = length(ls) - nearest.properties.location;
+        }
+        else {
+            console.warn('RouteCoordinatesArray: toValue.end: should have either along or point');
+        }
+        const result = {
+            fullRoute,
+            end: Object.assign(Object.assign({}, end), { from: end.current != null ? end.current : end.from, to: toDist }),
+        };
+        return result;
+    }
+    get originalRoute() {
+        return this.state.fullRoute;
+    }
+}
diff --git a/b/javascript/utils/animated/AnimatedShape.js b/b/javascript/utils/animated/AnimatedShape.js
new file mode 100644
index 0000000000000000000000000000000000000000..c0246061caa133d06bfaabad19a893186be4889d
--- /dev/null
+++ b/b/javascript/utils/animated/AnimatedShape.js
@@ -0,0 +1,63 @@
+import { Animated } from 'react-native';
+// see
+// https://github.com/facebook/react-native/blob/master/Libraries/Animated/src/nodes/AnimatedWithChildren.js
+const AnimatedWithChildren = Object.getPrototypeOf(Animated.ValueXY);
+if (__DEV__) {
+    if (AnimatedWithChildren.name !== 'AnimatedWithChildren') {
+        console.error('AnimatedShape could not obtain AnimatedWithChildren base class');
+    }
+}
+/**
+ * AnimatedShape can be used to have animated properties inside the shape property
+ * @example
+ * <AnimatedShapeSource ... shape={new AnimatedShape({type:'LineString', coordinates: animatedCoords})} />
+ */
+class AnimatedShape extends AnimatedWithChildren {
+    // equivalent of AnimatedStyle for shapes
+    // https://github.com/facebook/react-native/blob/master/Libraries/Animated/src/nodes/AnimatedStyle.js
+    constructor(shape) {
+        super();
+        this.shape = shape;
+    }
+    _walkShapeAndGetValues(value) {
+        if (Array.isArray(value)) {
+            return value.map((i) => this._walkShapeAndGetValues(i));
+        }
+        if (value instanceof Animated.Node) {
+            return value.__getValue();
+        }
+        if (typeof value === 'object') {
+            const result = {};
+            for (const key in value) {
+                result[key] = this._walkShapeAndGetValues(value[key]);
+            }
+            return result;
+        }
+        return value;
+    }
+    __getValue() {
+        const result = this._walkShapeAndGetValues(this.shape);
+        return result;
+    }
+    _walkAndProcess(value, cb) {
+        if (Array.isArray(value)) {
+            value.forEach((i) => this._walkAndProcess(i, cb));
+        }
+        else if (value instanceof Animated.Node) {
+            cb(value);
+        }
+        else if (typeof value === 'object') {
+            for (const key in value) {
+                this._walkAndProcess(value[key], cb);
+            }
+        }
+    }
+    __attach() {
+        this._walkAndProcess(this.shape, (v) => v.__addChild(this));
+    }
+    __detach() {
+        this._walkAndProcess(this.shape, (v) => v.__removeChild(this));
+        super.__detach();
+    }
+}
+export default AnimatedShape;
diff --git a/b/javascript/utils/deprecation.js b/b/javascript/utils/deprecation.js
new file mode 100644
index 0000000000000000000000000000000000000000..b0dd78ba040dc3676b08d1d6e2dc642071ad5084
--- /dev/null
+++ b/b/javascript/utils/deprecation.js
@@ -0,0 +1,19 @@
+/**
+ * Copy properties from origObject to newObject, which not exists in newObject,
+ * calls onDeprecatedCalled callback in case a copied property is invoked.
+ */
+export function copyPropertiesAsDeprecated(origObject, newObject, onDeprecatedCalled, accessors = {}) {
+    const result = newObject;
+    for (const [key, value] of Object.entries(origObject)) {
+        if (!newObject[key]) {
+            // eslint-disable-next-line fp/no-mutating-methods
+            Object.defineProperty(result, key, {
+                get() {
+                    onDeprecatedCalled(key);
+                    return accessors[key] ? accessors[key](value) : value;
+                },
+            });
+        }
+    }
+    return result;
+}
diff --git a/b/javascript/utils/filterUtils.js b/b/javascript/utils/filterUtils.js
new file mode 100644
index 0000000000000000000000000000000000000000..982638b04b7ada43cab98e96a9305a01433507dd
--- /dev/null
+++ b/b/javascript/utils/filterUtils.js
@@ -0,0 +1,6 @@
+export function getFilter(filter) {
+    if (!Array.isArray(filter) || filter.length === 0) {
+        return [];
+    }
+    return filter;
+}
diff --git a/b/javascript/utils/geoUtils.js b/b/javascript/utils/geoUtils.js
new file mode 100644
index 0000000000000000000000000000000000000000..0b7c16003c6d82049a1c117edfdf21dc1c53f564
--- /dev/null
+++ b/b/javascript/utils/geoUtils.js
@@ -0,0 +1,48 @@
+import { featureCollection, point, feature, lineString } from '@turf/helpers';
+import distance from '@turf/distance';
+import along from '@turf/along';
+import geoViewport from '@mapbox/geo-viewport';
+const VECTOR_TILE_SIZE = 512;
+export function makePoint(coordinates, properties, options) {
+    return point(coordinates, properties, options);
+}
+export function makeLineString(coordinates, properties, options) {
+    return lineString(coordinates, properties, options);
+}
+export function makeLatLngBounds(northEastCoordinates, southWestCoordinates) {
+    return featureCollection([
+        point(northEastCoordinates),
+        point(southWestCoordinates),
+    ]);
+}
+export function makeFeature(geometry, properties) {
+    return feature(geometry, properties);
+}
+export function makeFeatureCollection(features = [], options) {
+    return featureCollection(features, options);
+}
+export function addToFeatureCollection(newFeatureCollection, newFeature) {
+    return Object.assign(Object.assign({}, newFeatureCollection), { features: [...newFeatureCollection.features, newFeature] });
+}
+export function calculateDistance(origin, dest, options) {
+    return distance(origin, dest, options);
+}
+export function pointAlongLine(newLineString, distAlong, options) {
+    return along(newLineString, distAlong, options);
+}
+export function getOrCalculateVisibleRegion(coord, zoomLevel, width, height, nativeRegion) {
+    const region = {
+        ne: [0, 0],
+        sw: [0, 0],
+    };
+    if (!nativeRegion || !Array.isArray(nativeRegion.visibleBounds)) {
+        const bounds = geoViewport.bounds(coord, zoomLevel, [width, height], VECTOR_TILE_SIZE);
+        region.ne = [bounds[3], bounds[2]];
+        region.sw = [bounds[1], bounds[0]];
+    }
+    else {
+        region.ne = nativeRegion.properties.visibleBounds[0];
+        region.sw = nativeRegion.properties.visibleBounds[1];
+    }
+    return region;
+}
diff --git a/b/javascript/utils/index.js b/b/javascript/utils/index.js
new file mode 100644
index 0000000000000000000000000000000000000000..99d63d81557f8f27e65c0ee46d862d037390c548
--- /dev/null
+++ b/b/javascript/utils/index.js
@@ -0,0 +1,93 @@
+import React from 'react';
+import { View, NativeModules, findNodeHandle, Platform, Image, } from 'react-native';
+import { ViewPropTypes } from 'deprecated-react-native-prop-types';
+import PropTypes from 'prop-types';
+function getAndroidManagerInstance(module) {
+    const haveViewManagerConfig = NativeModules.UIManager && NativeModules.UIManager.getViewManagerConfig;
+    return haveViewManagerConfig
+        ? NativeModules.UIManager.getViewManagerConfig(module)
+        : NativeModules.UIManager[module];
+}
+function getIosManagerInstance(module) {
+    return NativeModules[getIOSModuleName(module)];
+}
+export const viewPropTypes = ViewPropTypes || View.props;
+export const ornamentPositionPropType = PropTypes.oneOfType([
+    PropTypes.shape({ top: PropTypes.number, left: PropTypes.number }),
+    PropTypes.shape({ top: PropTypes.number, right: PropTypes.number }),
+    PropTypes.shape({ bottom: PropTypes.number, left: PropTypes.number }),
+    PropTypes.shape({ bottom: PropTypes.number, right: PropTypes.number }),
+]);
+export function isAndroid() {
+    return Platform.OS === 'android';
+}
+export function existenceChange(cur, next) {
+    if (!cur && !next) {
+        return false;
+    }
+    return (!cur && next) || (cur && !next);
+}
+export function isFunction(fn) {
+    return typeof fn === 'function';
+}
+export function isNumber(num) {
+    return typeof num === 'number' && !Number.isNaN(num);
+}
+export function isUndefined(obj) {
+    return typeof obj === 'undefined';
+}
+export function isString(str) {
+    return typeof str === 'string';
+}
+export function isBoolean(bool) {
+    return typeof bool === 'boolean';
+}
+export function isPrimitive(value) {
+    return isString(value) || isNumber(value) || isBoolean(value);
+}
+export function runNativeCommand(module, name, nativeRef, args = []) {
+    const handle = findNodeHandle(nativeRef);
+    if (!handle) {
+        throw new Error(`Could not find handle for native ref ${module}.${name}`);
+    }
+    const managerInstance = isAndroid()
+        ? getAndroidManagerInstance(module)
+        : getIosManagerInstance(module);
+    if (!managerInstance) {
+        throw new Error(`Could not find ${module}`);
+    }
+    if (isAndroid()) {
+        return NativeModules.UIManager.dispatchViewManagerCommand(handle, managerInstance.Commands[name], args);
+    }
+    if (!managerInstance[name]) {
+        throw new Error(`Could not find ${name} for ${module}`);
+    }
+    return managerInstance[name](handle, ...args);
+}
+export function cloneReactChildrenWithProps(children, propsToAdd = {}) {
+    if (!children) {
+        return null;
+    }
+    let foundChildren = null;
+    if (!Array.isArray(children)) {
+        foundChildren = [children];
+    }
+    else {
+        foundChildren = children;
+    }
+    const filteredChildren = foundChildren.filter((child) => !!child); // filter out falsy children, since some can be null
+    return React.Children.map(filteredChildren, (child) => React.cloneElement(child, propsToAdd));
+}
+export function resolveImagePath(imageRef) {
+    const res = Image.resolveAssetSource(imageRef);
+    return res.uri;
+}
+export function getIOSModuleName(moduleName) {
+    if (moduleName.startsWith('RCT')) {
+        return moduleName.substring(3);
+    }
+    return moduleName;
+}
+export function toJSONString(json = '') {
+    return JSON.stringify(json);
+}
diff --git a/b/javascript/utils/styleMap.js b/b/javascript/utils/styleMap.js
new file mode 100644
index 0000000000000000000000000000000000000000..ce65172f1c99f6bcf3a472e92d56cc0f497b5ee3
--- /dev/null
+++ b/b/javascript/utils/styleMap.js
@@ -0,0 +1,1925 @@
+/* eslint-disable */
+// DO NOT MODIFY
+// THIS FILE IS AUTOGENERATED
+import PropTypes from 'prop-types';
+import { IS_ANDROID } from './index';
+export const StyleTypes = {
+    Constant: 'constant',
+    Color: 'color',
+    Transition: 'transition',
+    Translation: 'translation',
+    Function: 'function',
+    Image: 'image',
+    Enum: 'enum',
+};
+export function getStyleType(styleProp) {
+    if (!IS_ANDROID && styleExtras[styleProp]) {
+        return styleExtras[styleProp].iosType;
+    }
+    if (styleMap[styleProp]) {
+        return styleMap[styleProp];
+    }
+    throw new Error(`${styleProp} is not a valid Mapbox layer style`);
+}
+export const FillLayerStyleProp = PropTypes.shape({
+    /**
+     * Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
+     */
+    fillSortKey: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * Whether this layer is displayed.
+     */
+    visibility: PropTypes.oneOf(['visible', 'none']),
+    /**
+     * Whether or not the fill should be antialiased.
+     */
+    fillAntialias: PropTypes.oneOfType([
+        PropTypes.bool,
+        PropTypes.array,
+    ]),
+    /**
+     * The opacity of the entire fill layer. In contrast to the `fillColor`, this value will also affect the 1px stroke around the fill, if the stroke is used.
+     */
+    fillOpacity: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s fillOpacity property.
+     */
+    fillOpacityTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * The color of the filled part of this layer. This color can be specified as `rgba` with an alpha component and the color's opacity will not affect the opacity of the 1px stroke, if it is used.
+     *
+     * @disabledBy fillPattern
+     */
+    fillColor: PropTypes.oneOfType([
+        PropTypes.string,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s fillColor property.
+     */
+    fillColorTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * The outline color of the fill. Matches the value of `fillColor` if unspecified.
+     *
+     * @disabledBy fillPattern
+     */
+    fillOutlineColor: PropTypes.oneOfType([
+        PropTypes.string,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s fillOutlineColor property.
+     */
+    fillOutlineColorTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * The geometry's offset. Values are [x, y] where negatives indicate left and up, respectively.
+     */
+    fillTranslate: PropTypes.oneOfType([
+        PropTypes.arrayOf(PropTypes.number),
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s fillTranslate property.
+     */
+    fillTranslateTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * Controls the frame of reference for `fillTranslate`.
+     *
+     * @requires fillTranslate
+     */
+    fillTranslateAnchor: PropTypes.oneOfType([
+        PropTypes.oneOf(['map', 'viewport']),
+        PropTypes.array,
+    ]),
+    /**
+     * Name of image in sprite to use for drawing image fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoomDependent expressions will be evaluated only at integer zoom levels.
+     */
+    fillPattern: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.string,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s fillPattern property.
+     */
+    fillPatternTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+});
+export const LineLayerStyleProp = PropTypes.shape({
+    /**
+     * The display of line endings.
+     */
+    lineCap: PropTypes.oneOfType([
+        PropTypes.oneOf(['butt', 'round', 'square']),
+        PropTypes.array,
+    ]),
+    /**
+     * The display of lines when joining.
+     */
+    lineJoin: PropTypes.oneOfType([
+        PropTypes.oneOf(['bevel', 'round', 'miter']),
+        PropTypes.array,
+    ]),
+    /**
+     * Used to automatically convert miter joins to bevel joins for sharp angles.
+     */
+    lineMiterLimit: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * Used to automatically convert round joins to miter joins for shallow angles.
+     */
+    lineRoundLimit: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
+     */
+    lineSortKey: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * Whether this layer is displayed.
+     */
+    visibility: PropTypes.oneOf(['visible', 'none']),
+    /**
+     * The opacity at which the line will be drawn.
+     */
+    lineOpacity: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s lineOpacity property.
+     */
+    lineOpacityTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * The color with which the line will be drawn.
+     *
+     * @disabledBy linePattern
+     */
+    lineColor: PropTypes.oneOfType([
+        PropTypes.string,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s lineColor property.
+     */
+    lineColorTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * The geometry's offset. Values are [x, y] where negatives indicate left and up, respectively.
+     */
+    lineTranslate: PropTypes.oneOfType([
+        PropTypes.arrayOf(PropTypes.number),
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s lineTranslate property.
+     */
+    lineTranslateTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * Controls the frame of reference for `lineTranslate`.
+     *
+     * @requires lineTranslate
+     */
+    lineTranslateAnchor: PropTypes.oneOfType([
+        PropTypes.oneOf(['map', 'viewport']),
+        PropTypes.array,
+    ]),
+    /**
+     * Stroke thickness.
+     */
+    lineWidth: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s lineWidth property.
+     */
+    lineWidthTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * Draws a line casing outside of a line's actual path. Value indicates the width of the inner gap.
+     */
+    lineGapWidth: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s lineGapWidth property.
+     */
+    lineGapWidthTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * The line's offset. For linear features, a positive value offsets the line to the right, relative to the direction of the line, and a negative value to the left. For polygon features, a positive value results in an inset, and a negative value results in an outset.
+     */
+    lineOffset: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s lineOffset property.
+     */
+    lineOffsetTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * Blur applied to the line, in pixels.
+     */
+    lineBlur: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s lineBlur property.
+     */
+    lineBlurTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * Specifies the lengths of the alternating dashes and gaps that form the dash pattern. The lengths are later scaled by the line width. To convert a dash length to pixels, multiply the length by the current line width. Note that GeoJSON sources with `lineMetrics: true` specified won't render dashed lines to the expected scale. Also note that zoomDependent expressions will be evaluated only at integer zoom levels.
+     *
+     * @disabledBy linePattern
+     */
+    lineDasharray: PropTypes.oneOfType([
+        PropTypes.arrayOf(PropTypes.number),
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s lineDasharray property.
+     */
+    lineDasharrayTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * Name of image in sprite to use for drawing image lines. For seamless patterns, image width must be a factor of two (2, 4, 8, ..., 512). Note that zoomDependent expressions will be evaluated only at integer zoom levels.
+     */
+    linePattern: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.string,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s linePattern property.
+     */
+    linePatternTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * Defines a gradient with which to color a line feature. Can only be used with GeoJSON sources that specify `"lineMetrics": true`.
+     *
+     * @disabledBy linePattern
+     */
+    lineGradient: PropTypes.oneOfType([
+        PropTypes.string,
+        PropTypes.array,
+    ]),
+    /**
+     * The line part between [trimStart, trimEnd] will be marked as transparent to make a route vanishing effect. The line trimOff offset is based on the whole line range [0.0, 1.0].
+     */
+    lineTrimOffset: PropTypes.arrayOf(PropTypes.number),
+});
+export const SymbolLayerStyleProp = PropTypes.shape({
+    /**
+     * Label placement relative to its geometry.
+     */
+    symbolPlacement: PropTypes.oneOfType([
+        PropTypes.oneOf(['point', 'line', 'line-center']),
+        PropTypes.array,
+    ]),
+    /**
+     * Distance between two symbol anchors.
+     */
+    symbolSpacing: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * If true, the symbols will not cross tile edges to avoid mutual collisions. Recommended in layers that don't have enough padding in the vector tile to prevent collisions, or if it is a point symbol layer placed after a line symbol layer. When using a client that supports global collision detection, like Mapbox GL JS version 0.42.0 or greater, enabling this property is not needed to prevent clipped labels at tile boundaries.
+     */
+    symbolAvoidEdges: PropTypes.oneOfType([
+        PropTypes.bool,
+        PropTypes.array,
+    ]),
+    /**
+     * Sorts features in ascending order based on this value. Features with lower sort keys are drawn and placed first.  When `iconAllowOverlap` or `textAllowOverlap` is `false`, features with a lower sort key will have priority during placement. When `iconAllowOverlap` or `textAllowOverlap` is set to `true`, features with a higher sort key will overlap over features with a lower sort key.
+     */
+    symbolSortKey: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * Determines whether overlapping symbols in the same layer are rendered in the order that they appear in the data source or by their yPosition relative to the viewport. To control the order and prioritization of symbols otherwise, use `symbolSortKey`.
+     */
+    symbolZOrder: PropTypes.oneOfType([
+        PropTypes.oneOf(['auto', 'viewport-y', 'source']),
+        PropTypes.array,
+    ]),
+    /**
+     * If true, the icon will be visible even if it collides with other previously drawn symbols.
+     *
+     * @requires iconImage
+     */
+    iconAllowOverlap: PropTypes.oneOfType([
+        PropTypes.bool,
+        PropTypes.array,
+    ]),
+    /**
+     * If true, other symbols can be visible even if they collide with the icon.
+     *
+     * @requires iconImage
+     */
+    iconIgnorePlacement: PropTypes.oneOfType([
+        PropTypes.bool,
+        PropTypes.array,
+    ]),
+    /**
+     * If true, text will display without their corresponding icons when the icon collides with other symbols and the text does not.
+     *
+     * @requires iconImage, textField
+     */
+    iconOptional: PropTypes.oneOfType([
+        PropTypes.bool,
+        PropTypes.array,
+    ]),
+    /**
+     * In combination with `symbolPlacement`, determines the rotation behavior of icons.
+     *
+     * @requires iconImage
+     */
+    iconRotationAlignment: PropTypes.oneOfType([
+        PropTypes.oneOf(['map', 'viewport', 'auto']),
+        PropTypes.array,
+    ]),
+    /**
+     * Scales the original size of the icon by the provided factor. The new pixel size of the image will be the original pixel size multiplied by `iconSize`. 1 is the original size; 3 triples the size of the image.
+     *
+     * @requires iconImage
+     */
+    iconSize: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * Scales the icon to fit around the associated text.
+     *
+     * @requires iconImage, textField
+     */
+    iconTextFit: PropTypes.oneOfType([
+        PropTypes.oneOf(['none', 'width', 'height', 'both']),
+        PropTypes.array,
+    ]),
+    /**
+     * Size of the additional area added to dimensions determined by `iconTextFit`, in clockwise order: top, right, bottom, left.
+     *
+     * @requires iconImage, textField
+     */
+    iconTextFitPadding: PropTypes.oneOfType([
+        PropTypes.arrayOf(PropTypes.number),
+        PropTypes.array,
+    ]),
+    /**
+     * Name of image in sprite to use for drawing an image background.
+     */
+    iconImage: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.string,
+        PropTypes.array,
+    ]),
+    /**
+     * Rotates the icon clockwise.
+     *
+     * @requires iconImage
+     */
+    iconRotate: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * Size of the additional area around the icon bounding box used for detecting symbol collisions.
+     *
+     * @requires iconImage
+     */
+    iconPadding: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * If true, the icon may be flipped to prevent it from being rendered upsideDown.
+     *
+     * @requires iconImage
+     */
+    iconKeepUpright: PropTypes.oneOfType([
+        PropTypes.bool,
+        PropTypes.array,
+    ]),
+    /**
+     * Offset distance of icon from its anchor. Positive values indicate right and down, while negative values indicate left and up. Each component is multiplied by the value of `iconSize` to obtain the final offset in pixels. When combined with `iconRotate` the offset will be as if the rotated direction was up.
+     *
+     * @requires iconImage
+     */
+    iconOffset: PropTypes.oneOfType([
+        PropTypes.arrayOf(PropTypes.number),
+        PropTypes.array,
+    ]),
+    /**
+     * Part of the icon placed closest to the anchor.
+     *
+     * @requires iconImage
+     */
+    iconAnchor: PropTypes.oneOfType([
+        PropTypes.oneOf(['center', 'left', 'right', 'top', 'bottom', 'top-left', 'top-right', 'bottom-left', 'bottom-right']),
+        PropTypes.array,
+    ]),
+    /**
+     * Orientation of icon when map is pitched.
+     *
+     * @requires iconImage
+     */
+    iconPitchAlignment: PropTypes.oneOfType([
+        PropTypes.oneOf(['map', 'viewport', 'auto']),
+        PropTypes.array,
+    ]),
+    /**
+     * Orientation of text when map is pitched.
+     *
+     * @requires textField
+     */
+    textPitchAlignment: PropTypes.oneOfType([
+        PropTypes.oneOf(['map', 'viewport', 'auto']),
+        PropTypes.array,
+    ]),
+    /**
+     * In combination with `symbolPlacement`, determines the rotation behavior of the individual glyphs forming the text.
+     *
+     * @requires textField
+     */
+    textRotationAlignment: PropTypes.oneOfType([
+        PropTypes.oneOf(['map', 'viewport', 'auto']),
+        PropTypes.array,
+    ]),
+    /**
+     * Value to use for a text label. If a plain `string` is provided, it will be treated as a `formatted` with default/inherited formatting options. SDF images are not supported in formatted text and will be ignored.
+     */
+    textField: PropTypes.oneOfType([
+        PropTypes.string,
+        PropTypes.array,
+    ]),
+    /**
+     * Font stack to use for displaying text.
+     *
+     * @requires textField
+     */
+    textFont: PropTypes.oneOfType([
+        PropTypes.arrayOf(PropTypes.string),
+        PropTypes.array,
+    ]),
+    /**
+     * Font size.
+     *
+     * @requires textField
+     */
+    textSize: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The maximum line width for text wrapping.
+     *
+     * @requires textField
+     */
+    textMaxWidth: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * Text leading value for multiLine text.
+     *
+     * @requires textField
+     */
+    textLineHeight: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * Text tracking amount.
+     *
+     * @requires textField
+     */
+    textLetterSpacing: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * Text justification options.
+     *
+     * @requires textField
+     */
+    textJustify: PropTypes.oneOfType([
+        PropTypes.oneOf(['auto', 'left', 'center', 'right']),
+        PropTypes.array,
+    ]),
+    /**
+     * Radial offset of text, in the direction of the symbol's anchor. Useful in combination with `textVariableAnchor`, which defaults to using the twoDimensional `textOffset` if present.
+     *
+     * @requires textField
+     */
+    textRadialOffset: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * To increase the chance of placing highPriority labels on the map, you can provide an array of `textAnchor` locations: the renderer will attempt to place the label at each location, in order, before moving onto the next label. Use `textJustify: auto` to choose justification based on anchor position. To apply an offset, use the `textRadialOffset` or the twoDimensional `textOffset`.
+     *
+     * @requires textField
+     */
+    textVariableAnchor: PropTypes.array,
+    /**
+     * Part of the text placed closest to the anchor.
+     *
+     * @requires textField
+     *
+     * @disabledBy textVariableAnchor
+     */
+    textAnchor: PropTypes.oneOfType([
+        PropTypes.oneOf(['center', 'left', 'right', 'top', 'bottom', 'top-left', 'top-right', 'bottom-left', 'bottom-right']),
+        PropTypes.array,
+    ]),
+    /**
+     * Maximum angle change between adjacent characters.
+     *
+     * @requires textField
+     */
+    textMaxAngle: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The property allows control over a symbol's orientation. Note that the property values act as a hint, so that a symbol whose language doesn’t support the provided orientation will be laid out in its natural orientation. Example: English point symbol will be rendered horizontally even if array value contains single 'vertical' enum value. For symbol with point placement, the order of elements in an array define priority order for the placement of an orientation variant. For symbol with line placement, the default text writing mode is either ['horizontal', 'vertical'] or ['vertical', 'horizontal'], the order doesn't affect the placement.
+     *
+     * @requires textField
+     */
+    textWritingMode: PropTypes.array,
+    /**
+     * Rotates the text clockwise.
+     *
+     * @requires textField
+     */
+    textRotate: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * Size of the additional area around the text bounding box used for detecting symbol collisions.
+     *
+     * @requires textField
+     */
+    textPadding: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * If true, the text may be flipped vertically to prevent it from being rendered upsideDown.
+     *
+     * @requires textField
+     */
+    textKeepUpright: PropTypes.oneOfType([
+        PropTypes.bool,
+        PropTypes.array,
+    ]),
+    /**
+     * Specifies how to capitalize text, similar to the CSS `textTransform` property.
+     *
+     * @requires textField
+     */
+    textTransform: PropTypes.oneOfType([
+        PropTypes.oneOf(['none', 'uppercase', 'lowercase']),
+        PropTypes.array,
+    ]),
+    /**
+     * Offset distance of text from its anchor. Positive values indicate right and down, while negative values indicate left and up. If used with textVariableAnchor, input values will be taken as absolute values. Offsets along the x and yAxis will be applied automatically based on the anchor position.
+     *
+     * @requires textField
+     *
+     * @disabledBy textRadialOffset
+     */
+    textOffset: PropTypes.oneOfType([
+        PropTypes.arrayOf(PropTypes.number),
+        PropTypes.array,
+    ]),
+    /**
+     * If true, the text will be visible even if it collides with other previously drawn symbols.
+     *
+     * @requires textField
+     */
+    textAllowOverlap: PropTypes.oneOfType([
+        PropTypes.bool,
+        PropTypes.array,
+    ]),
+    /**
+     * If true, other symbols can be visible even if they collide with the text.
+     *
+     * @requires textField
+     */
+    textIgnorePlacement: PropTypes.oneOfType([
+        PropTypes.bool,
+        PropTypes.array,
+    ]),
+    /**
+     * If true, icons will display without their corresponding text when the text collides with other symbols and the icon does not.
+     *
+     * @requires textField, iconImage
+     */
+    textOptional: PropTypes.oneOfType([
+        PropTypes.bool,
+        PropTypes.array,
+    ]),
+    /**
+     * Whether this layer is displayed.
+     */
+    visibility: PropTypes.oneOf(['visible', 'none']),
+    /**
+     * The opacity at which the icon will be drawn.
+     *
+     * @requires iconImage
+     */
+    iconOpacity: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s iconOpacity property.
+     */
+    iconOpacityTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * The color of the icon. This can only be used with [SDF icons](/help/troubleshooting/usingRecolorableImagesInMapboxMaps/).
+     *
+     * @requires iconImage
+     */
+    iconColor: PropTypes.oneOfType([
+        PropTypes.string,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s iconColor property.
+     */
+    iconColorTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * The color of the icon's halo. Icon halos can only be used with [SDF icons](/help/troubleshooting/usingRecolorableImagesInMapboxMaps/).
+     *
+     * @requires iconImage
+     */
+    iconHaloColor: PropTypes.oneOfType([
+        PropTypes.string,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s iconHaloColor property.
+     */
+    iconHaloColorTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * Distance of halo to the icon outline.
+     *
+     * @requires iconImage
+     */
+    iconHaloWidth: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s iconHaloWidth property.
+     */
+    iconHaloWidthTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * Fade out the halo towards the outside.
+     *
+     * @requires iconImage
+     */
+    iconHaloBlur: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s iconHaloBlur property.
+     */
+    iconHaloBlurTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * Distance that the icon's anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.
+     *
+     * @requires iconImage
+     */
+    iconTranslate: PropTypes.oneOfType([
+        PropTypes.arrayOf(PropTypes.number),
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s iconTranslate property.
+     */
+    iconTranslateTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * Controls the frame of reference for `iconTranslate`.
+     *
+     * @requires iconImage, iconTranslate
+     */
+    iconTranslateAnchor: PropTypes.oneOfType([
+        PropTypes.oneOf(['map', 'viewport']),
+        PropTypes.array,
+    ]),
+    /**
+     * The opacity at which the text will be drawn.
+     *
+     * @requires textField
+     */
+    textOpacity: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s textOpacity property.
+     */
+    textOpacityTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * The color with which the text will be drawn.
+     *
+     * @requires textField
+     */
+    textColor: PropTypes.oneOfType([
+        PropTypes.string,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s textColor property.
+     */
+    textColorTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * The color of the text's halo, which helps it stand out from backgrounds.
+     *
+     * @requires textField
+     */
+    textHaloColor: PropTypes.oneOfType([
+        PropTypes.string,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s textHaloColor property.
+     */
+    textHaloColorTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * Distance of halo to the font outline. Max text halo width is 1/4 of the fontSize.
+     *
+     * @requires textField
+     */
+    textHaloWidth: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s textHaloWidth property.
+     */
+    textHaloWidthTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * The halo's fadeout distance towards the outside.
+     *
+     * @requires textField
+     */
+    textHaloBlur: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s textHaloBlur property.
+     */
+    textHaloBlurTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * Distance that the text's anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.
+     *
+     * @requires textField
+     */
+    textTranslate: PropTypes.oneOfType([
+        PropTypes.arrayOf(PropTypes.number),
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s textTranslate property.
+     */
+    textTranslateTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * Controls the frame of reference for `textTranslate`.
+     *
+     * @requires textField, textTranslate
+     */
+    textTranslateAnchor: PropTypes.oneOfType([
+        PropTypes.oneOf(['map', 'viewport']),
+        PropTypes.array,
+    ]),
+});
+export const CircleLayerStyleProp = PropTypes.shape({
+    /**
+     * Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
+     */
+    circleSortKey: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * Whether this layer is displayed.
+     */
+    visibility: PropTypes.oneOf(['visible', 'none']),
+    /**
+     * Circle radius.
+     */
+    circleRadius: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s circleRadius property.
+     */
+    circleRadiusTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * The fill color of the circle.
+     */
+    circleColor: PropTypes.oneOfType([
+        PropTypes.string,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s circleColor property.
+     */
+    circleColorTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * Amount to blur the circle. 1 blurs the circle such that only the centerpoint is full opacity.
+     */
+    circleBlur: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s circleBlur property.
+     */
+    circleBlurTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * The opacity at which the circle will be drawn.
+     */
+    circleOpacity: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s circleOpacity property.
+     */
+    circleOpacityTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * The geometry's offset. Values are [x, y] where negatives indicate left and up, respectively.
+     */
+    circleTranslate: PropTypes.oneOfType([
+        PropTypes.arrayOf(PropTypes.number),
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s circleTranslate property.
+     */
+    circleTranslateTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * Controls the frame of reference for `circleTranslate`.
+     *
+     * @requires circleTranslate
+     */
+    circleTranslateAnchor: PropTypes.oneOfType([
+        PropTypes.oneOf(['map', 'viewport']),
+        PropTypes.array,
+    ]),
+    /**
+     * Controls the scaling behavior of the circle when the map is pitched.
+     */
+    circlePitchScale: PropTypes.oneOfType([
+        PropTypes.oneOf(['map', 'viewport']),
+        PropTypes.array,
+    ]),
+    /**
+     * Orientation of circle when map is pitched.
+     */
+    circlePitchAlignment: PropTypes.oneOfType([
+        PropTypes.oneOf(['map', 'viewport']),
+        PropTypes.array,
+    ]),
+    /**
+     * The width of the circle's stroke. Strokes are placed outside of the `circleRadius`.
+     */
+    circleStrokeWidth: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s circleStrokeWidth property.
+     */
+    circleStrokeWidthTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * The stroke color of the circle.
+     */
+    circleStrokeColor: PropTypes.oneOfType([
+        PropTypes.string,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s circleStrokeColor property.
+     */
+    circleStrokeColorTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * The opacity of the circle's stroke.
+     */
+    circleStrokeOpacity: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s circleStrokeOpacity property.
+     */
+    circleStrokeOpacityTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+});
+export const HeatmapLayerStyleProp = PropTypes.shape({
+    /**
+     * Whether this layer is displayed.
+     */
+    visibility: PropTypes.oneOf(['visible', 'none']),
+    /**
+     * Radius of influence of one heatmap point in pixels. Increasing the value makes the heatmap smoother, but less detailed. `queryRenderedFeatures` on heatmap layers will return points within this radius.
+     */
+    heatmapRadius: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s heatmapRadius property.
+     */
+    heatmapRadiusTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * A measure of how much an individual point contributes to the heatmap. A value of 10 would be equivalent to having 10 points of weight 1 in the same spot. Especially useful when combined with clustering.
+     */
+    heatmapWeight: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * Similar to `heatmapWeight` but controls the intensity of the heatmap globally. Primarily used for adjusting the heatmap based on zoom level.
+     */
+    heatmapIntensity: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s heatmapIntensity property.
+     */
+    heatmapIntensityTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * Defines the color of each pixel based on its density value in a heatmap.  Should be an expression that uses `["heatmapDensity"]` as input.
+     */
+    heatmapColor: PropTypes.oneOfType([
+        PropTypes.string,
+        PropTypes.array,
+    ]),
+    /**
+     * The global opacity at which the heatmap layer will be drawn.
+     */
+    heatmapOpacity: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s heatmapOpacity property.
+     */
+    heatmapOpacityTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+});
+export const FillExtrusionLayerStyleProp = PropTypes.shape({
+    /**
+     * Whether this layer is displayed.
+     */
+    visibility: PropTypes.oneOf(['visible', 'none']),
+    /**
+     * The opacity of the entire fill extrusion layer. This is rendered on a perLayer, not perFeature, basis, and dataDriven styling is not available.
+     */
+    fillExtrusionOpacity: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s fillExtrusionOpacity property.
+     */
+    fillExtrusionOpacityTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * The base color of the extruded fill. The extrusion's surfaces will be shaded differently based on this color in combination with the root `light` settings. If this color is specified as `rgba` with an alpha component, the alpha component will be ignored; use `fillExtrusionOpacity` to set layer opacity.
+     *
+     * @disabledBy fillExtrusionPattern
+     */
+    fillExtrusionColor: PropTypes.oneOfType([
+        PropTypes.string,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s fillExtrusionColor property.
+     */
+    fillExtrusionColorTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * The geometry's offset. Values are [x, y] where negatives indicate left and up (on the flat plane), respectively.
+     */
+    fillExtrusionTranslate: PropTypes.oneOfType([
+        PropTypes.arrayOf(PropTypes.number),
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s fillExtrusionTranslate property.
+     */
+    fillExtrusionTranslateTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * Controls the frame of reference for `fillExtrusionTranslate`.
+     *
+     * @requires fillExtrusionTranslate
+     */
+    fillExtrusionTranslateAnchor: PropTypes.oneOfType([
+        PropTypes.oneOf(['map', 'viewport']),
+        PropTypes.array,
+    ]),
+    /**
+     * Name of image in sprite to use for drawing images on extruded fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoomDependent expressions will be evaluated only at integer zoom levels.
+     */
+    fillExtrusionPattern: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.string,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s fillExtrusionPattern property.
+     */
+    fillExtrusionPatternTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * The height with which to extrude this layer.
+     */
+    fillExtrusionHeight: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s fillExtrusionHeight property.
+     */
+    fillExtrusionHeightTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * The height with which to extrude the base of this layer. Must be less than or equal to `fillExtrusionHeight`.
+     *
+     * @requires fillExtrusionHeight
+     */
+    fillExtrusionBase: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s fillExtrusionBase property.
+     */
+    fillExtrusionBaseTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * Whether to apply a vertical gradient to the sides of a fillExtrusion layer. If true, sides will be shaded slightly darker farther down.
+     */
+    fillExtrusionVerticalGradient: PropTypes.oneOfType([
+        PropTypes.bool,
+        PropTypes.array,
+    ]),
+    /**
+     * Controls the intensity of ambient occlusion (AO) shading. Current AO implementation is a lowCost bestEffort approach that shades area near ground and concave angles between walls. Default value 0.0 disables ambient occlusion and values around 0.3 provide the most plausible results for buildings.
+     */
+    fillExtrusionAmbientOcclusionIntensity: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s fillExtrusionAmbientOcclusionIntensity property.
+     */
+    fillExtrusionAmbientOcclusionIntensityTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * The radius of ambient occlusion (AO) shading, in meters. Current AO implementation is a lowCost bestEffort approach that shades area near ground and concave angles between walls where the radius defines only vertical impact. Default value 3.0 corresponds to hight of one floor and brings the most plausible results for buildings.
+     */
+    fillExtrusionAmbientOcclusionRadius: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s fillExtrusionAmbientOcclusionRadius property.
+     */
+    fillExtrusionAmbientOcclusionRadiusTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+});
+export const RasterLayerStyleProp = PropTypes.shape({
+    /**
+     * Whether this layer is displayed.
+     */
+    visibility: PropTypes.oneOf(['visible', 'none']),
+    /**
+     * The opacity at which the image will be drawn.
+     */
+    rasterOpacity: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s rasterOpacity property.
+     */
+    rasterOpacityTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * Rotates hues around the color wheel.
+     */
+    rasterHueRotate: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s rasterHueRotate property.
+     */
+    rasterHueRotateTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * Increase or reduce the brightness of the image. The value is the minimum brightness.
+     */
+    rasterBrightnessMin: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s rasterBrightnessMin property.
+     */
+    rasterBrightnessMinTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * Increase or reduce the brightness of the image. The value is the maximum brightness.
+     */
+    rasterBrightnessMax: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s rasterBrightnessMax property.
+     */
+    rasterBrightnessMaxTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * Increase or reduce the saturation of the image.
+     */
+    rasterSaturation: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s rasterSaturation property.
+     */
+    rasterSaturationTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * Increase or reduce the contrast of the image.
+     */
+    rasterContrast: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s rasterContrast property.
+     */
+    rasterContrastTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * The resampling/interpolation method to use for overscaling, also known as texture magnification filter
+     */
+    rasterResampling: PropTypes.oneOfType([
+        PropTypes.oneOf(['linear', 'nearest']),
+        PropTypes.array,
+    ]),
+    /**
+     * Fade duration when a new tile is added.
+     */
+    rasterFadeDuration: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+});
+export const HillshadeLayerStyleProp = PropTypes.shape({
+    /**
+     * Whether this layer is displayed.
+     */
+    visibility: PropTypes.oneOf(['visible', 'none']),
+    /**
+     * The direction of the light source used to generate the hillshading with 0 as the top of the viewport if `hillshadeIlluminationAnchor` is set to `viewport` and due north if `hillshadeIlluminationAnchor` is set to `map`.
+     */
+    hillshadeIlluminationDirection: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * Direction of light source when map is rotated.
+     */
+    hillshadeIlluminationAnchor: PropTypes.oneOfType([
+        PropTypes.oneOf(['map', 'viewport']),
+        PropTypes.array,
+    ]),
+    /**
+     * Intensity of the hillshade
+     */
+    hillshadeExaggeration: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s hillshadeExaggeration property.
+     */
+    hillshadeExaggerationTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * The shading color of areas that face away from the light source.
+     */
+    hillshadeShadowColor: PropTypes.oneOfType([
+        PropTypes.string,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s hillshadeShadowColor property.
+     */
+    hillshadeShadowColorTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * The shading color of areas that faces towards the light source.
+     */
+    hillshadeHighlightColor: PropTypes.oneOfType([
+        PropTypes.string,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s hillshadeHighlightColor property.
+     */
+    hillshadeHighlightColorTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * The shading color used to accentuate rugged terrain like sharp cliffs and gorges.
+     */
+    hillshadeAccentColor: PropTypes.oneOfType([
+        PropTypes.string,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s hillshadeAccentColor property.
+     */
+    hillshadeAccentColorTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+});
+export const BackgroundLayerStyleProp = PropTypes.shape({
+    /**
+     * Whether this layer is displayed.
+     */
+    visibility: PropTypes.oneOf(['visible', 'none']),
+    /**
+     * The color with which the background will be drawn.
+     *
+     * @disabledBy backgroundPattern
+     */
+    backgroundColor: PropTypes.oneOfType([
+        PropTypes.string,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s backgroundColor property.
+     */
+    backgroundColorTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * Name of image in sprite to use for drawing an image background. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoomDependent expressions will be evaluated only at integer zoom levels.
+     */
+    backgroundPattern: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.string,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s backgroundPattern property.
+     */
+    backgroundPatternTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * The opacity at which the background will be drawn.
+     */
+    backgroundOpacity: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s backgroundOpacity property.
+     */
+    backgroundOpacityTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+});
+export const SkyLayerStyleProp = PropTypes.shape({
+    /**
+     * Whether this layer is displayed.
+     */
+    visibility: PropTypes.oneOf(['visible', 'none']),
+    /**
+     * The type of the sky
+     */
+    skyType: PropTypes.oneOfType([
+        PropTypes.oneOf(['gradient', 'atmosphere']),
+        PropTypes.array,
+    ]),
+    /**
+     * Position of the sun center [a azimuthal angle, p polar angle]. The azimuthal angle indicates the position of the sun relative to 0° north, where degrees proceed clockwise. The polar angle indicates the height of the sun, where 0° is directly above, at zenith, and 90° at the horizon. When this property is ommitted, the sun center is directly inherited from the light position.
+     */
+    skyAtmosphereSun: PropTypes.oneOfType([
+        PropTypes.arrayOf(PropTypes.number),
+        PropTypes.array,
+    ]),
+    /**
+     * Intensity of the sun as a light source in the atmosphere (on a scale from 0 to a 100). Setting higher values will brighten up the sky.
+     */
+    skyAtmosphereSunIntensity: PropTypes.number,
+    /**
+     * Position of the gradient center [a azimuthal angle, p polar angle]. The azimuthal angle indicates the position of the gradient center relative to 0° north, where degrees proceed clockwise. The polar angle indicates the height of the gradient center, where 0° is directly above, at zenith, and 90° at the horizon.
+     */
+    skyGradientCenter: PropTypes.oneOfType([
+        PropTypes.arrayOf(PropTypes.number),
+        PropTypes.array,
+    ]),
+    /**
+     * The angular distance (measured in degrees) from `skyGradientCenter` up to which the gradient extends. A value of 180 causes the gradient to wrap around to the opposite direction from `skyGradientCenter`.
+     */
+    skyGradientRadius: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * Defines a radial color gradient with which to color the sky. The color values can be interpolated with an expression using `skyRadialProgress`. The range [0, 1] for the interpolant covers a radial distance (in degrees) of [0, `skyGradientRadius`] centered at the position specified by `skyGradientCenter`.
+     */
+    skyGradient: PropTypes.oneOfType([
+        PropTypes.string,
+        PropTypes.array,
+    ]),
+    /**
+     * A color applied to the atmosphere sun halo. The alpha channel describes how strongly the sun halo is represented in an atmosphere sky layer.
+     */
+    skyAtmosphereHaloColor: PropTypes.string,
+    /**
+     * A color used to tweak the main atmospheric scattering coefficients. Using white applies the default coefficients giving the natural blue color to the atmosphere. This color affects how heavily the corresponding wavelength is represented during scattering. The alpha channel describes the density of the atmosphere, with 1 maximum density and 0 no density.
+     */
+    skyAtmosphereColor: PropTypes.string,
+    /**
+     * The opacity of the entire sky layer.
+     */
+    skyOpacity: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s skyOpacity property.
+     */
+    skyOpacityTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+});
+export const LightLayerStyleProp = PropTypes.shape({
+    /**
+     * Whether extruded geometries are lit relative to the map or viewport.
+     */
+    anchor: PropTypes.oneOfType([
+        PropTypes.oneOf(['map', 'viewport']),
+        PropTypes.array,
+    ]),
+    /**
+     * Position of the light source relative to lit (extruded) geometries, in [r radial coordinate, a azimuthal angle, p polar angle] where r indicates the distance from the center of the base of an object to its light, a indicates the position of the light relative to 0° (0° when `light.anchor` is set to `viewport` corresponds to the top of the viewport, or 0° when `light.anchor` is set to `map` corresponds to due north, and degrees proceed clockwise), and p indicates the height of the light (from 0°, directly above, to 180°, directly below).
+     */
+    position: PropTypes.oneOfType([
+        PropTypes.arrayOf(PropTypes.number),
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s position property.
+     */
+    positionTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * Color tint for lighting extruded geometries.
+     */
+    color: PropTypes.oneOfType([
+        PropTypes.string,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s color property.
+     */
+    colorTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * Intensity of lighting (on a scale from 0 to 1). Higher numbers will present as more extreme contrast.
+     */
+    intensity: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s intensity property.
+     */
+    intensityTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+});
+export const AtmosphereLayerStyleProp = PropTypes.shape({
+    /**
+     * The start and end distance range in which fog fades from fully transparent to fully opaque. The distance to the point at the center of the map is defined as zero, so that negative range values are closer to the camera, and positive values are farther away.
+     */
+    range: PropTypes.oneOfType([
+        PropTypes.arrayOf(PropTypes.number),
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s range property.
+     */
+    rangeTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * The color of the atmosphere region immediately below the horizon and within the `range` and above the horizon and within `horizonBlend`. Using opacity is recommended only for smoothly transitioning fog on/off as anything less than 100% opacity results in more tiles loaded and drawn.
+     */
+    color: PropTypes.oneOfType([
+        PropTypes.string,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s color property.
+     */
+    colorTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * The color of the atmosphere region above the horizon, `highColor` extends further above the horizon than the `color` property and its spread can be controlled with `horizonBlend`. The opacity can be set to `0` to remove the high atmosphere color contribution.
+     */
+    highColor: PropTypes.oneOfType([
+        PropTypes.string,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s highColor property.
+     */
+    highColorTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * The color of the region above the horizon and after the end of the `horizonBlend` contribution. The opacity can be set to `0` to have a transparent background.
+     */
+    spaceColor: PropTypes.oneOfType([
+        PropTypes.string,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s spaceColor property.
+     */
+    spaceColorTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * Horizon blend applies a smooth fade from the color of the atmosphere to the color of space. A value of zero leaves a sharp transition from atmosphere to space. Increasing the value blends the color of atmosphere into increasingly high angles of the sky.
+     */
+    horizonBlend: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s horizonBlend property.
+     */
+    horizonBlendTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+    /**
+     * A value controlling the star intensity where `0` will show no stars and `1` will show stars at their maximum intensity.
+     */
+    starIntensity: PropTypes.oneOfType([
+        PropTypes.number,
+        PropTypes.array,
+    ]),
+    /**
+     * The transition affecting any changes to this layer’s starIntensity property.
+     */
+    starIntensityTransition: PropTypes.shape({
+        duration: PropTypes.number,
+        delay: PropTypes.number,
+    }),
+});
+const styleMap = {
+    fillSortKey: StyleTypes.Constant,
+    fillAntialias: StyleTypes.Constant,
+    fillOpacity: StyleTypes.Constant,
+    fillOpacityTransition: StyleTypes.Transition,
+    fillColor: StyleTypes.Color,
+    fillColorTransition: StyleTypes.Transition,
+    fillOutlineColor: StyleTypes.Color,
+    fillOutlineColorTransition: StyleTypes.Transition,
+    fillTranslate: StyleTypes.Translation,
+    fillTranslateTransition: StyleTypes.Transition,
+    fillTranslateAnchor: StyleTypes.Enum,
+    fillPattern: StyleTypes.Image,
+    fillPatternTransition: StyleTypes.Transition,
+    lineCap: StyleTypes.Enum,
+    lineJoin: StyleTypes.Enum,
+    lineMiterLimit: StyleTypes.Constant,
+    lineRoundLimit: StyleTypes.Constant,
+    lineSortKey: StyleTypes.Constant,
+    lineOpacity: StyleTypes.Constant,
+    lineOpacityTransition: StyleTypes.Transition,
+    lineColor: StyleTypes.Color,
+    lineColorTransition: StyleTypes.Transition,
+    lineTranslate: StyleTypes.Translation,
+    lineTranslateTransition: StyleTypes.Transition,
+    lineTranslateAnchor: StyleTypes.Enum,
+    lineWidth: StyleTypes.Constant,
+    lineWidthTransition: StyleTypes.Transition,
+    lineGapWidth: StyleTypes.Constant,
+    lineGapWidthTransition: StyleTypes.Transition,
+    lineOffset: StyleTypes.Constant,
+    lineOffsetTransition: StyleTypes.Transition,
+    lineBlur: StyleTypes.Constant,
+    lineBlurTransition: StyleTypes.Transition,
+    lineDasharray: StyleTypes.Constant,
+    lineDasharrayTransition: StyleTypes.Transition,
+    linePattern: StyleTypes.Image,
+    linePatternTransition: StyleTypes.Transition,
+    lineGradient: StyleTypes.Color,
+    lineTrimOffset: StyleTypes.Constant,
+    symbolPlacement: StyleTypes.Enum,
+    symbolSpacing: StyleTypes.Constant,
+    symbolAvoidEdges: StyleTypes.Constant,
+    symbolSortKey: StyleTypes.Constant,
+    symbolZOrder: StyleTypes.Enum,
+    iconAllowOverlap: StyleTypes.Constant,
+    iconIgnorePlacement: StyleTypes.Constant,
+    iconOptional: StyleTypes.Constant,
+    iconRotationAlignment: StyleTypes.Enum,
+    iconSize: StyleTypes.Constant,
+    iconTextFit: StyleTypes.Enum,
+    iconTextFitPadding: StyleTypes.Constant,
+    iconImage: StyleTypes.Image,
+    iconRotate: StyleTypes.Constant,
+    iconPadding: StyleTypes.Constant,
+    iconKeepUpright: StyleTypes.Constant,
+    iconOffset: StyleTypes.Constant,
+    iconAnchor: StyleTypes.Enum,
+    iconPitchAlignment: StyleTypes.Enum,
+    textPitchAlignment: StyleTypes.Enum,
+    textRotationAlignment: StyleTypes.Enum,
+    textField: StyleTypes.Constant,
+    textFont: StyleTypes.Constant,
+    textSize: StyleTypes.Constant,
+    textMaxWidth: StyleTypes.Constant,
+    textLineHeight: StyleTypes.Constant,
+    textLetterSpacing: StyleTypes.Constant,
+    textJustify: StyleTypes.Enum,
+    textRadialOffset: StyleTypes.Constant,
+    textVariableAnchor: StyleTypes.Constant,
+    textAnchor: StyleTypes.Enum,
+    textMaxAngle: StyleTypes.Constant,
+    textWritingMode: StyleTypes.Constant,
+    textRotate: StyleTypes.Constant,
+    textPadding: StyleTypes.Constant,
+    textKeepUpright: StyleTypes.Constant,
+    textTransform: StyleTypes.Enum,
+    textOffset: StyleTypes.Constant,
+    textAllowOverlap: StyleTypes.Constant,
+    textIgnorePlacement: StyleTypes.Constant,
+    textOptional: StyleTypes.Constant,
+    iconOpacity: StyleTypes.Constant,
+    iconOpacityTransition: StyleTypes.Transition,
+    iconColor: StyleTypes.Color,
+    iconColorTransition: StyleTypes.Transition,
+    iconHaloColor: StyleTypes.Color,
+    iconHaloColorTransition: StyleTypes.Transition,
+    iconHaloWidth: StyleTypes.Constant,
+    iconHaloWidthTransition: StyleTypes.Transition,
+    iconHaloBlur: StyleTypes.Constant,
+    iconHaloBlurTransition: StyleTypes.Transition,
+    iconTranslate: StyleTypes.Translation,
+    iconTranslateTransition: StyleTypes.Transition,
+    iconTranslateAnchor: StyleTypes.Enum,
+    textOpacity: StyleTypes.Constant,
+    textOpacityTransition: StyleTypes.Transition,
+    textColor: StyleTypes.Color,
+    textColorTransition: StyleTypes.Transition,
+    textHaloColor: StyleTypes.Color,
+    textHaloColorTransition: StyleTypes.Transition,
+    textHaloWidth: StyleTypes.Constant,
+    textHaloWidthTransition: StyleTypes.Transition,
+    textHaloBlur: StyleTypes.Constant,
+    textHaloBlurTransition: StyleTypes.Transition,
+    textTranslate: StyleTypes.Translation,
+    textTranslateTransition: StyleTypes.Transition,
+    textTranslateAnchor: StyleTypes.Enum,
+    circleSortKey: StyleTypes.Constant,
+    circleRadius: StyleTypes.Constant,
+    circleRadiusTransition: StyleTypes.Transition,
+    circleColor: StyleTypes.Color,
+    circleColorTransition: StyleTypes.Transition,
+    circleBlur: StyleTypes.Constant,
+    circleBlurTransition: StyleTypes.Transition,
+    circleOpacity: StyleTypes.Constant,
+    circleOpacityTransition: StyleTypes.Transition,
+    circleTranslate: StyleTypes.Translation,
+    circleTranslateTransition: StyleTypes.Transition,
+    circleTranslateAnchor: StyleTypes.Enum,
+    circlePitchScale: StyleTypes.Enum,
+    circlePitchAlignment: StyleTypes.Enum,
+    circleStrokeWidth: StyleTypes.Constant,
+    circleStrokeWidthTransition: StyleTypes.Transition,
+    circleStrokeColor: StyleTypes.Color,
+    circleStrokeColorTransition: StyleTypes.Transition,
+    circleStrokeOpacity: StyleTypes.Constant,
+    circleStrokeOpacityTransition: StyleTypes.Transition,
+    heatmapRadius: StyleTypes.Constant,
+    heatmapRadiusTransition: StyleTypes.Transition,
+    heatmapWeight: StyleTypes.Constant,
+    heatmapIntensity: StyleTypes.Constant,
+    heatmapIntensityTransition: StyleTypes.Transition,
+    heatmapColor: StyleTypes.Color,
+    heatmapOpacity: StyleTypes.Constant,
+    heatmapOpacityTransition: StyleTypes.Transition,
+    fillExtrusionOpacity: StyleTypes.Constant,
+    fillExtrusionOpacityTransition: StyleTypes.Transition,
+    fillExtrusionColor: StyleTypes.Color,
+    fillExtrusionColorTransition: StyleTypes.Transition,
+    fillExtrusionTranslate: StyleTypes.Translation,
+    fillExtrusionTranslateTransition: StyleTypes.Transition,
+    fillExtrusionTranslateAnchor: StyleTypes.Enum,
+    fillExtrusionPattern: StyleTypes.Image,
+    fillExtrusionPatternTransition: StyleTypes.Transition,
+    fillExtrusionHeight: StyleTypes.Constant,
+    fillExtrusionHeightTransition: StyleTypes.Transition,
+    fillExtrusionBase: StyleTypes.Constant,
+    fillExtrusionBaseTransition: StyleTypes.Transition,
+    fillExtrusionVerticalGradient: StyleTypes.Constant,
+    fillExtrusionAmbientOcclusionIntensity: StyleTypes.Constant,
+    fillExtrusionAmbientOcclusionIntensityTransition: StyleTypes.Transition,
+    fillExtrusionAmbientOcclusionRadius: StyleTypes.Constant,
+    fillExtrusionAmbientOcclusionRadiusTransition: StyleTypes.Transition,
+    rasterOpacity: StyleTypes.Constant,
+    rasterOpacityTransition: StyleTypes.Transition,
+    rasterHueRotate: StyleTypes.Constant,
+    rasterHueRotateTransition: StyleTypes.Transition,
+    rasterBrightnessMin: StyleTypes.Constant,
+    rasterBrightnessMinTransition: StyleTypes.Transition,
+    rasterBrightnessMax: StyleTypes.Constant,
+    rasterBrightnessMaxTransition: StyleTypes.Transition,
+    rasterSaturation: StyleTypes.Constant,
+    rasterSaturationTransition: StyleTypes.Transition,
+    rasterContrast: StyleTypes.Constant,
+    rasterContrastTransition: StyleTypes.Transition,
+    rasterResampling: StyleTypes.Enum,
+    rasterFadeDuration: StyleTypes.Constant,
+    hillshadeIlluminationDirection: StyleTypes.Constant,
+    hillshadeIlluminationAnchor: StyleTypes.Enum,
+    hillshadeExaggeration: StyleTypes.Constant,
+    hillshadeExaggerationTransition: StyleTypes.Transition,
+    hillshadeShadowColor: StyleTypes.Color,
+    hillshadeShadowColorTransition: StyleTypes.Transition,
+    hillshadeHighlightColor: StyleTypes.Color,
+    hillshadeHighlightColorTransition: StyleTypes.Transition,
+    hillshadeAccentColor: StyleTypes.Color,
+    hillshadeAccentColorTransition: StyleTypes.Transition,
+    backgroundColor: StyleTypes.Color,
+    backgroundColorTransition: StyleTypes.Transition,
+    backgroundPattern: StyleTypes.Image,
+    backgroundPatternTransition: StyleTypes.Transition,
+    backgroundOpacity: StyleTypes.Constant,
+    backgroundOpacityTransition: StyleTypes.Transition,
+    skyType: StyleTypes.Enum,
+    skyAtmosphereSun: StyleTypes.Constant,
+    skyAtmosphereSunIntensity: StyleTypes.Constant,
+    skyGradientCenter: StyleTypes.Constant,
+    skyGradientRadius: StyleTypes.Constant,
+    skyGradient: StyleTypes.Color,
+    skyAtmosphereHaloColor: StyleTypes.Color,
+    skyAtmosphereColor: StyleTypes.Color,
+    skyOpacity: StyleTypes.Constant,
+    skyOpacityTransition: StyleTypes.Transition,
+    anchor: StyleTypes.Enum,
+    position: StyleTypes.Constant,
+    positionTransition: StyleTypes.Transition,
+    color: StyleTypes.Color,
+    colorTransition: StyleTypes.Transition,
+    intensity: StyleTypes.Constant,
+    intensityTransition: StyleTypes.Transition,
+    range: StyleTypes.Constant,
+    rangeTransition: StyleTypes.Transition,
+    color: StyleTypes.Color,
+    colorTransition: StyleTypes.Transition,
+    highColor: StyleTypes.Color,
+    highColorTransition: StyleTypes.Transition,
+    spaceColor: StyleTypes.Color,
+    spaceColorTransition: StyleTypes.Transition,
+    horizonBlend: StyleTypes.Constant,
+    horizonBlendTransition: StyleTypes.Transition,
+    starIntensity: StyleTypes.Constant,
+    starIntensityTransition: StyleTypes.Transition,
+    visibility: StyleTypes.Constant,
+};
+export const styleExtras = {
+    // padding
+    iconTextFitPadding: {
+        iosType: 'edgeinsets',
+    },
+    // offsets
+    iconOffset: {
+        iosType: 'vector',
+    },
+    textOffset: {
+        iosType: 'vector',
+    },
+    lineOffset: {
+        iosType: 'vector',
+    },
+    // translates
+    fillTranslate: {
+        iosType: 'vector',
+    },
+    lineTranslate: {
+        iosType: 'vector',
+    },
+    iconTranslate: {
+        iosType: 'vector',
+    },
+    textTranslate: {
+        iosType: 'vector',
+    },
+    circleTranslate: {
+        iosType: 'vector',
+    },
+    fillExtrusionTranslate: {
+        iosType: 'vector',
+    },
+};
+export default styleMap;
diff --git a/b/javascript/web/MapContext.js b/b/javascript/web/MapContext.js
new file mode 100644
index 0000000000000000000000000000000000000000..4398da3913484eb80ea091bfbb858c16d085d7f0
--- /dev/null
+++ b/b/javascript/web/MapContext.js
@@ -0,0 +1,3 @@
+import React from 'react';
+const MapContext = React.createContext({});
+export default MapContext;
diff --git a/b/javascript/web/MapboxModule.js b/b/javascript/web/MapboxModule.js
new file mode 100644
index 0000000000000000000000000000000000000000..b0b3844e833a52e923cb2336531dba806b92379c
--- /dev/null
+++ b/b/javascript/web/MapboxModule.js
@@ -0,0 +1,12 @@
+import mapboxgl from 'mapbox-gl';
+const MapboxModule = {
+    LineJoin: {},
+    StyleURL: {
+        Street: 'mapbox://styles/mapbox/streets-v11',
+        Satellite: 'mapbox://styles/mapbox/satellite-v9',
+    },
+    setAccessToken: (token) => {
+        mapboxgl.accessToken = token;
+    },
+};
+export default MapboxModule;
diff --git a/b/javascript/web/UnimplementedComponent.js b/b/javascript/web/UnimplementedComponent.js
new file mode 100644
index 0000000000000000000000000000000000000000..e8e76e94a7767478d407a722e44c5642d54caf5f
--- /dev/null
+++ b/b/javascript/web/UnimplementedComponent.js
@@ -0,0 +1,7 @@
+import React from 'react';
+const UnimplementedComponent = (name) => class SymbolLater extends React.Component {
+    render() {
+        return <div>TODO implement {name}</div>;
+    }
+};
+export default UnimplementedComponent;
diff --git a/b/javascript/web/components/Camera.js b/b/javascript/web/components/Camera.js
new file mode 100644
index 0000000000000000000000000000000000000000..9a3703dcccb777910dbc2e64b7ca4b86c4fa4ad5
--- /dev/null
+++ b/b/javascript/web/components/Camera.js
@@ -0,0 +1,24 @@
+import React from 'react';
+import MapContext from '../MapContext';
+class Camera extends React.Component {
+    componentDidMount() {
+        const { map } = this.context;
+        const { centerCoordinate } = this.props;
+        if (map && centerCoordinate) {
+            map.flyTo({ center: centerCoordinate });
+        }
+    }
+    fitBounds(northEastCoordinates, southWestCoordinates, padding = 0, animationDuration = 0.0) {
+        const { map } = this.context;
+        if (map) {
+            map.fitBounds([northEastCoordinates, southWestCoordinates]);
+        }
+    }
+    render() {
+        return <></>;
+    }
+}
+Camera.contextType = MapContext;
+Camera.UserTrackingModes = [];
+export { Camera };
+export default Camera;
diff --git a/b/javascript/web/components/MapView.js b/b/javascript/web/components/MapView.js
new file mode 100644
index 0000000000000000000000000000000000000000..a7e1d99c41468caf0c450b3055b499181df9810d
--- /dev/null
+++ b/b/javascript/web/components/MapView.js
@@ -0,0 +1,39 @@
+import React from 'react';
+import mapboxgl from 'mapbox-gl';
+import MapContext from '../MapContext';
+/**
+ * MapView backed by Mapbox GL KS
+ */
+class MapView extends React.Component {
+    constructor() {
+        super(...arguments);
+        this.state = { map: null };
+        this.mapContainer = null;
+        this.map = null;
+    }
+    componentDidMount() {
+        const { styleURL } = this.props;
+        if (!this.mapContainer) {
+            console.error('MapView - mapContainer should is null');
+            return;
+        }
+        const map = new mapboxgl.Map({
+            container: this.mapContainer,
+            style: styleURL || 'mapbox://styles/mapbox/streets-v11',
+        });
+        this.map = map;
+        this.setState({ map });
+    }
+    render() {
+        const { children } = this.props;
+        const { map } = this.state;
+        return (<div style={{ width: '100%', height: '100%' }} ref={(el) => (this.mapContainer = el)}>
+        {map && (<div style={{ position: 'absolute' }}>
+            <MapContext.Provider value={{ map }}>
+              {children}
+            </MapContext.Provider>
+          </div>)}
+      </div>);
+    }
+}
+export default MapView;
diff --git a/b/javascript/web/index.js b/b/javascript/web/index.js
new file mode 100644
index 0000000000000000000000000000000000000000..a2ff896718eb5061a332469d105939c774a23591
--- /dev/null
+++ b/b/javascript/web/index.js
@@ -0,0 +1,12 @@
+import MapboxModule from './MapboxModule';
+import Camera from './components/Camera';
+import MapView from './components/MapView';
+import Logger from './utils/Logger';
+const ExportedComponents = {
+    Camera,
+    MapView,
+    Logger,
+};
+const Mapbox = Object.assign(Object.assign({}, MapboxModule), ExportedComponents);
+export { Camera, MapView, Logger };
+export default Mapbox;
diff --git a/b/javascript/web/utils/Logger.js b/b/javascript/web/utils/Logger.js
new file mode 100644
index 0000000000000000000000000000000000000000..4175be6ca964cb38212c776bd350f04b49fd4bbe
--- /dev/null
+++ b/b/javascript/web/utils/Logger.js
@@ -0,0 +1,81 @@
+class Logger {
+    constructor() {
+        this.level = 'info';
+        this.startedCount = 0;
+        this.logCallback = null;
+    }
+    static sharedInstance() {
+        if (this.instance === null) {
+            this.instance = new Logger();
+        }
+        return this.instance;
+    }
+    /**
+     * Set custom logger function.
+     * @param {Logger~logCallback} logCallback - callback taking a log object as param. If callback return falsy value then
+     * default logging will take place.
+     */
+    static setLogCallback(logCallback) {
+        this.sharedInstance().setLogCallback(logCallback);
+    }
+    /**
+     * Set custom logger function.
+     * @param {Logger~logCallback} logCallback - callback taking a log object as param. If callback return falsy value then
+     * default logging will take place.
+     */
+    setLogCallback(logCallback) {
+        this.logCallback = logCallback;
+    }
+    /**
+     * This callback is displayed as part of the Requester class.
+     * @callback Logger~logCallback
+     * @param {object} log
+     * @param {string} log.message - the message of the log
+     * @param {string} log.level - log level
+     * @param {string} log.tag - optional tag used on android
+     */
+    /**
+     * setLogLevel
+     * @param {LogLevel} level
+     */
+    static setLogLevel(level) {
+        this.sharedInstance().level = level;
+    }
+    start() { }
+    stop() { }
+    subscribe() {
+        //TODO
+    }
+    unsubscribe() {
+        //TODO
+    }
+    effectiveLevel(log) {
+        const { level, message, tag } = log;
+        if (level === 'warning') {
+            if (tag === 'Mbgl-HttpRequest' &&
+                message.startsWith('Request failed due to a permanent error: Canceled')) {
+                // this seems to happening too much to show a warning every time
+                return 'info';
+            }
+        }
+        return level;
+    }
+    onLog(log) {
+        if (!this.logCallback || !this.logCallback(log)) {
+            const { message } = log;
+            const level = this.effectiveLevel(log);
+            if (level === 'error') {
+                console.error('Mapbox error', message, log);
+            }
+            else if (level === 'warning') {
+                console.warn('Mapbox warning', message, log);
+            }
+            else {
+                console.log(`Mapbox [${level}]`, message, log);
+            }
+        }
+    }
+}
+Logger.instance = null;
+Logger.sharedInstance().start();
+export default Logger;
diff --git a/package.json b/package.json
index 9fef883acda9f6bc282ad5d63ca9654c183be3fa..13a14971bb3ead0a959a55e5b9cc8ad962b01852 100644
--- a/package.json
+++ b/package.json
@@ -6,9 +6,9 @@
     "access": "public"
   },
   "author": "React Native Mapbox Team",
-  "main": "./javascript/index.js",
-  "browser": "./javascript/index.web.js",
-  "react-native": "./javascript/index.js",
+  "main": "./b/javascript/index.js",
+  "browser": "./b/javascript/index.web.js",
+  "react-native": "./b/javascript/index.js",
   "keywords": [
     "gl",
     "ios",
